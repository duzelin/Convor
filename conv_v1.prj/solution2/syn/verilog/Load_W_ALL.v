// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Load_W_ALL (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cho_dout,
        cho_empty_n,
        cho_read,
        W_buf_address0,
        W_buf_ce0,
        W_buf_q0,
        W_buf_address1,
        W_buf_ce1,
        W_buf_q1,
        W_next_0_0_V_din,
        W_next_0_0_V_full_n,
        W_next_0_0_V_write,
        W_next_0_1_V_din,
        W_next_0_1_V_full_n,
        W_next_0_1_V_write,
        W_next_0_2_V_din,
        W_next_0_2_V_full_n,
        W_next_0_2_V_write,
        W_next_0_3_V_din,
        W_next_0_3_V_full_n,
        W_next_0_3_V_write,
        p_c_s_dout,
        p_c_s_empty_n,
        p_c_s_read,
        p_chin_s_dout,
        p_chin_s_empty_n,
        p_chin_s_read,
        p_k_s_dout,
        p_k_s_empty_n,
        p_k_s_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_pp0_stage1 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] cho_dout;
input   cho_empty_n;
output   cho_read;
output  [8:0] W_buf_address0;
output   W_buf_ce0;
input  [31:0] W_buf_q0;
output  [8:0] W_buf_address1;
output   W_buf_ce1;
input  [31:0] W_buf_q1;
output  [31:0] W_next_0_0_V_din;
input   W_next_0_0_V_full_n;
output   W_next_0_0_V_write;
output  [31:0] W_next_0_1_V_din;
input   W_next_0_1_V_full_n;
output   W_next_0_1_V_write;
output  [31:0] W_next_0_2_V_din;
input   W_next_0_2_V_full_n;
output   W_next_0_2_V_write;
output  [31:0] W_next_0_3_V_din;
input   W_next_0_3_V_full_n;
output   W_next_0_3_V_write;
input  [31:0] p_c_s_dout;
input   p_c_s_empty_n;
output   p_c_s_read;
input  [31:0] p_chin_s_dout;
input   p_chin_s_empty_n;
output   p_chin_s_read;
input  [31:0] p_k_s_dout;
input   p_k_s_empty_n;
output   p_k_s_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg cho_read;
reg[8:0] W_buf_address0;
reg W_buf_ce0;
reg[8:0] W_buf_address1;
reg W_buf_ce1;
reg W_next_0_0_V_write;
reg W_next_0_1_V_write;
reg W_next_0_2_V_write;
reg W_next_0_3_V_write;
reg p_c_s_read;
reg p_chin_s_read;
reg p_k_s_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cho_blk_n;
reg    W_next_0_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln69_reg_744;
reg   [0:0] icmp_ln69_reg_744_pp0_iter1_reg;
reg    W_next_0_1_V_blk_n;
reg    W_next_0_2_V_blk_n;
reg    W_next_0_3_V_blk_n;
reg    p_c_s_blk_n;
reg    p_chin_s_blk_n;
reg    p_k_s_blk_n;
reg   [127:0] indvar_flatten58_reg_177;
reg   [95:0] indvar_flatten21_reg_189;
reg   [30:0] chi_0_i_i_reg_200;
reg   [63:0] indvar_flatten_reg_211;
reg   [31:0] kc_0_i_i_reg_222;
reg   [30:0] kr_0_i_i_reg_233;
reg  signed [31:0] cho_read_reg_648;
reg    ap_block_state1;
reg   [31:0] p_c_read_reg_656;
reg  signed [31:0] p_chin_read_reg_661;
reg  signed [31:0] p_k_read_reg_668;
wire  signed [9:0] trunc_ln78_1_fu_244_p1;
reg  signed [9:0] trunc_ln78_1_reg_685;
wire   [9:0] trunc_ln78_fu_262_p1;
reg   [9:0] trunc_ln78_reg_691;
wire    ap_CS_fsm_state2;
wire   [9:0] trunc_ln78_2_fu_286_p1;
reg   [9:0] trunc_ln78_2_reg_696;
wire   [9:0] trunc_ln78_3_fu_306_p1;
reg   [9:0] trunc_ln78_3_reg_701;
wire   [9:0] trunc_ln78_4_fu_326_p1;
reg   [9:0] trunc_ln78_4_reg_706;
wire   [63:0] bound_fu_333_p2;
reg   [63:0] bound_reg_711;
wire   [95:0] bound4_fu_346_p2;
reg   [95:0] bound4_reg_717;
wire   [127:0] bound26_fu_358_p2;
reg   [127:0] bound26_reg_723;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln75_fu_364_p2;
reg   [0:0] icmp_ln75_reg_728;
wire   [0:0] icmp_ln73_fu_369_p2;
reg   [0:0] icmp_ln73_reg_734;
wire   [9:0] trunc_ln78_5_fu_388_p1;
reg   [9:0] trunc_ln78_5_reg_739;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln69_fu_392_p2;
wire   [0:0] icmp_ln71_fu_397_p2;
reg   [0:0] icmp_ln71_reg_748;
wire   [30:0] select_ln71_fu_402_p3;
reg   [30:0] select_ln71_reg_754;
wire   [0:0] select_ln71_3_fu_427_p3;
reg   [0:0] select_ln71_3_reg_759;
wire   [30:0] chi_fu_434_p2;
reg   [30:0] chi_reg_765;
wire   [0:0] or_ln71_fu_444_p2;
reg   [0:0] or_ln71_reg_770;
wire  signed [31:0] mul_ln78_13_fu_450_p2;
reg  signed [31:0] mul_ln78_13_reg_777;
wire   [0:0] select_ln71_7_fu_455_p3;
reg   [0:0] select_ln71_7_reg_782;
wire   [31:0] select_ln73_fu_474_p3;
reg   [31:0] select_ln73_reg_788;
wire   [9:0] trunc_ln78_9_fu_482_p1;
reg   [9:0] trunc_ln78_9_reg_793;
wire   [63:0] add_ln73_1_fu_486_p2;
reg   [63:0] add_ln73_1_reg_798;
wire   [95:0] add_ln71_1_fu_492_p2;
reg   [95:0] add_ln71_1_reg_803;
wire   [127:0] add_ln69_fu_507_p2;
reg   [127:0] add_ln69_reg_808;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage1_iter0;
reg    ap_block_state7_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [30:0] select_ln71_8_fu_548_p3;
reg   [30:0] select_ln71_8_reg_813;
wire   [30:0] select_ln73_2_fu_575_p3;
reg   [30:0] select_ln73_2_reg_818;
wire   [9:0] add_ln78_4_fu_587_p2;
reg   [9:0] add_ln78_4_reg_823;
wire   [31:0] kc_fu_613_p2;
reg   [31:0] kc_reg_839;
wire   [63:0] select_ln73_3_fu_618_p3;
reg   [63:0] select_ln73_3_reg_844;
wire   [95:0] select_ln71_9_fu_624_p3;
reg   [95:0] select_ln71_9_reg_849;
reg   [31:0] tmp_reg_854;
reg   [31:0] tmp_73_reg_859;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg   [127:0] ap_phi_mux_indvar_flatten58_phi_fu_181_p4;
wire    ap_block_pp0_stage0;
reg   [95:0] ap_phi_mux_indvar_flatten21_phi_fu_193_p4;
reg   [30:0] ap_phi_mux_chi_0_i_i_phi_fu_204_p4;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_215_p4;
reg   [31:0] ap_phi_mux_kc_0_i_i_phi_fu_226_p4;
reg   [30:0] ap_phi_mux_kr_0_i_i_phi_fu_237_p4;
wire  signed [63:0] sext_ln78_fu_598_p1;
wire  signed [63:0] sext_ln78_1_fu_608_p1;
wire  signed [63:0] sext_ln78_2_fu_634_p1;
wire  signed [63:0] sext_ln78_3_fu_643_p1;
reg    ap_block_pp0_stage1_01001;
wire  signed [31:0] trunc_ln78_1_fu_244_p0;
wire  signed [31:0] mul_ln78_1_fu_252_p2;
wire  signed [31:0] mul_ln78_fu_248_p2;
wire   [31:0] mul_ln78_2_fu_256_p2;
wire  signed [31:0] add_ln78_fu_266_p2;
wire  signed [31:0] mul_ln78_4_fu_275_p2;
wire  signed [31:0] mul_ln78_3_fu_271_p2;
wire   [31:0] mul_ln78_5_fu_280_p2;
wire  signed [31:0] add_ln78_1_fu_290_p2;
wire  signed [31:0] mul_ln78_6_fu_295_p2;
wire   [31:0] mul_ln78_7_fu_300_p2;
wire  signed [31:0] add_ln78_2_fu_310_p2;
wire  signed [31:0] mul_ln78_8_fu_315_p2;
wire   [31:0] mul_ln78_9_fu_320_p2;
wire   [31:0] bound_fu_333_p0;
wire   [63:0] cast_fu_330_p1;
wire   [31:0] bound_fu_333_p1;
wire   [63:0] bound4_fu_346_p0;
wire   [31:0] bound4_fu_346_p1;
wire   [95:0] bound26_fu_358_p0;
wire   [31:0] bound26_fu_358_p1;
wire   [30:0] mul_ln78_10_fu_378_p1;
wire  signed [31:0] mul_ln78_10_fu_378_p2;
wire   [31:0] mul_ln78_11_fu_383_p2;
wire   [0:0] icmp_ln75_1_fu_410_p2;
wire   [0:0] icmp_ln73_1_fu_422_p2;
wire   [30:0] mul_ln78_13_fu_450_p0;
wire   [0:0] select_ln71_2_fu_415_p3;
wire   [0:0] or_ln73_fu_462_p2;
wire   [0:0] or_ln73_1_fu_468_p2;
wire  signed [9:0] trunc_ln78_6_fu_498_p1;
wire   [31:0] mul_ln78_14_fu_526_p2;
wire   [9:0] trunc_ln78_7_fu_530_p1;
wire   [9:0] select_ln71_1_fu_513_p3;
wire   [9:0] mul_ln78_12_fu_502_p2;
wire   [30:0] select_ln71_4_fu_519_p3;
wire   [30:0] kr_fu_553_p2;
wire  signed [9:0] trunc_ln78_8_fu_559_p1;
wire   [9:0] mul_ln78_15_fu_563_p2;
wire   [9:0] select_ln71_6_fu_541_p3;
wire   [9:0] select_ln73_1_fu_568_p3;
wire   [9:0] select_ln71_5_fu_534_p3;
wire   [9:0] add_ln78_3_fu_582_p2;
wire   [9:0] add_ln78_5_fu_593_p2;
wire   [9:0] add_ln78_6_fu_603_p2;
wire   [9:0] add_ln78_7_fu_630_p2;
wire   [9:0] add_ln78_8_fu_639_p2;
wire    ap_CS_fsm_state8;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [127:0] bound26_fu_358_p00;
wire   [127:0] bound26_fu_358_p10;
wire   [95:0] bound4_fu_346_p00;
wire   [95:0] bound4_fu_346_p10;
wire   [31:0] mul_ln78_10_fu_378_p10;
wire   [31:0] mul_ln78_13_fu_450_p00;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_condition_pp0_exit_iter0_state5))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        chi_0_i_i_reg_200 <= select_ln71_8_reg_813;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        chi_0_i_i_reg_200 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        indvar_flatten21_reg_189 <= select_ln71_9_reg_849;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten21_reg_189 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        indvar_flatten58_reg_177 <= add_ln69_reg_808;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten58_reg_177 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        indvar_flatten_reg_211 <= select_ln73_3_reg_844;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_211 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        kc_0_i_i_reg_222 <= kc_reg_839;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kc_0_i_i_reg_222 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        kr_0_i_i_reg_233 <= select_ln73_2_reg_818;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kr_0_i_i_reg_233 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln69_reg_808 <= add_ln69_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_fu_392_p2 == 1'd0))) begin
        add_ln71_1_reg_803 <= add_ln71_1_fu_492_p2;
        add_ln73_1_reg_798 <= add_ln73_1_fu_486_p2;
        chi_reg_765 <= chi_fu_434_p2;
        icmp_ln71_reg_748 <= icmp_ln71_fu_397_p2;
        mul_ln78_13_reg_777 <= mul_ln78_13_fu_450_p2;
        or_ln71_reg_770 <= or_ln71_fu_444_p2;
        select_ln71_3_reg_759 <= select_ln71_3_fu_427_p3;
        select_ln71_7_reg_782 <= select_ln71_7_fu_455_p3;
        select_ln71_reg_754 <= select_ln71_fu_402_p3;
        select_ln73_reg_788 <= select_ln73_fu_474_p3;
        trunc_ln78_9_reg_793 <= trunc_ln78_9_fu_482_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744 == 1'd0))) begin
        add_ln78_4_reg_823 <= add_ln78_4_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound26_reg_723 <= bound26_fu_358_p2;
        icmp_ln73_reg_734 <= icmp_ln73_fu_369_p2;
        icmp_ln75_reg_728 <= icmp_ln75_fu_364_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound4_reg_717 <= bound4_fu_346_p2;
        bound_reg_711 <= bound_fu_333_p2;
        trunc_ln78_2_reg_696 <= trunc_ln78_2_fu_286_p1;
        trunc_ln78_3_reg_701 <= trunc_ln78_3_fu_306_p1;
        trunc_ln78_4_reg_706 <= trunc_ln78_4_fu_326_p1;
        trunc_ln78_reg_691 <= trunc_ln78_fu_262_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_read_reg_648 <= cho_dout;
        p_c_read_reg_656 <= p_c_s_dout;
        p_chin_read_reg_661 <= p_chin_s_dout;
        p_k_read_reg_668 <= p_k_s_dout;
        trunc_ln78_1_reg_685 <= trunc_ln78_1_fu_244_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln69_reg_744 <= icmp_ln69_fu_392_p2;
        icmp_ln69_reg_744_pp0_iter1_reg <= icmp_ln69_reg_744;
        trunc_ln78_5_reg_739 <= trunc_ln78_5_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_744 == 1'd0))) begin
        kc_reg_839 <= kc_fu_613_p2;
        select_ln71_8_reg_813 <= select_ln71_8_fu_548_p3;
        select_ln71_9_reg_849 <= select_ln71_9_fu_624_p3;
        select_ln73_2_reg_818 <= select_ln73_2_fu_575_p3;
        select_ln73_3_reg_844 <= select_ln73_3_fu_618_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln69_reg_744 == 1'd0))) begin
        tmp_73_reg_859 <= W_buf_q1;
        tmp_reg_854 <= W_buf_q0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_buf_address0 = sext_ln78_2_fu_634_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        W_buf_address0 = sext_ln78_fu_598_p1;
    end else begin
        W_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_buf_address1 = sext_ln78_3_fu_643_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        W_buf_address1 = sext_ln78_1_fu_608_p1;
    end else begin
        W_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        W_buf_ce0 = 1'b1;
    end else begin
        W_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        W_buf_ce1 = 1'b1;
    end else begin
        W_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        W_next_0_0_V_blk_n = W_next_0_0_V_full_n;
    end else begin
        W_next_0_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        W_next_0_0_V_write = 1'b1;
    end else begin
        W_next_0_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        W_next_0_1_V_blk_n = W_next_0_1_V_full_n;
    end else begin
        W_next_0_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        W_next_0_1_V_write = 1'b1;
    end else begin
        W_next_0_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        W_next_0_2_V_blk_n = W_next_0_2_V_full_n;
    end else begin
        W_next_0_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        W_next_0_2_V_write = 1'b1;
    end else begin
        W_next_0_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        W_next_0_3_V_blk_n = W_next_0_3_V_full_n;
    end else begin
        W_next_0_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        W_next_0_3_V_write = 1'b1;
    end else begin
        W_next_0_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln69_reg_744 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_reg_744 == 1'd0))) begin
        ap_phi_mux_chi_0_i_i_phi_fu_204_p4 = select_ln71_8_reg_813;
    end else begin
        ap_phi_mux_chi_0_i_i_phi_fu_204_p4 = chi_0_i_i_reg_200;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_reg_744 == 1'd0))) begin
        ap_phi_mux_indvar_flatten21_phi_fu_193_p4 = select_ln71_9_reg_849;
    end else begin
        ap_phi_mux_indvar_flatten21_phi_fu_193_p4 = indvar_flatten21_reg_189;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_reg_744 == 1'd0))) begin
        ap_phi_mux_indvar_flatten58_phi_fu_181_p4 = add_ln69_reg_808;
    end else begin
        ap_phi_mux_indvar_flatten58_phi_fu_181_p4 = indvar_flatten58_reg_177;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_reg_744 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_215_p4 = select_ln73_3_reg_844;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_215_p4 = indvar_flatten_reg_211;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln69_reg_744 == 1'd0))) begin
        ap_phi_mux_kc_0_i_i_phi_fu_226_p4 = kc_reg_839;
    end else begin
        ap_phi_mux_kc_0_i_i_phi_fu_226_p4 = kc_0_i_i_reg_222;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_kr_0_i_i_phi_fu_237_p4 = select_ln73_2_reg_818;
    end else begin
        ap_phi_mux_kr_0_i_i_phi_fu_237_p4 = kr_0_i_i_reg_233;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_blk_n = cho_empty_n;
    end else begin
        cho_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_read = 1'b1;
    end else begin
        cho_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_s_blk_n = p_c_s_empty_n;
    end else begin
        p_c_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_s_read = 1'b1;
    end else begin
        p_c_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_s_blk_n = p_chin_s_empty_n;
    end else begin
        p_chin_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_s_read = 1'b1;
    end else begin
        p_chin_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_s_blk_n = p_k_s_empty_n;
    end else begin
        p_k_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_s_read = 1'b1;
    end else begin
        p_k_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_744 == 1'd1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln69_reg_744 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_next_0_0_V_din = tmp_reg_854;

assign W_next_0_1_V_din = tmp_73_reg_859;

assign W_next_0_2_V_din = W_buf_q0;

assign W_next_0_3_V_din = W_buf_q1;

assign add_ln69_fu_507_p2 = (128'd1 + indvar_flatten58_reg_177);

assign add_ln71_1_fu_492_p2 = (96'd1 + ap_phi_mux_indvar_flatten21_phi_fu_193_p4);

assign add_ln73_1_fu_486_p2 = (64'd1 + ap_phi_mux_indvar_flatten_phi_fu_215_p4);

assign add_ln78_1_fu_290_p2 = ($signed(32'd2) + $signed(cho_read_reg_648));

assign add_ln78_2_fu_310_p2 = ($signed(32'd3) + $signed(cho_read_reg_648));

assign add_ln78_3_fu_582_p2 = (select_ln73_1_fu_568_p3 + trunc_ln78_9_reg_793);

assign add_ln78_4_fu_587_p2 = (select_ln71_5_fu_534_p3 + add_ln78_3_fu_582_p2);

assign add_ln78_5_fu_593_p2 = (trunc_ln78_reg_691 + add_ln78_4_fu_587_p2);

assign add_ln78_6_fu_603_p2 = (trunc_ln78_2_reg_696 + add_ln78_4_fu_587_p2);

assign add_ln78_7_fu_630_p2 = (trunc_ln78_3_reg_701 + add_ln78_4_reg_823);

assign add_ln78_8_fu_639_p2 = (trunc_ln78_4_reg_706 + add_ln78_4_reg_823);

assign add_ln78_fu_266_p2 = ($signed(32'd1) + $signed(cho_read_reg_648));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == W_next_0_3_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_2_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_1_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_0_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == W_next_0_3_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_2_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_1_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_0_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == W_next_0_3_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_2_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_1_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_0_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage1_iter1 = (((1'b0 == W_next_0_3_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_2_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_1_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)) | ((1'b0 == W_next_0_0_V_full_n) & (icmp_ln69_reg_744_pp0_iter1_reg == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound26_fu_358_p0 = bound26_fu_358_p00;

assign bound26_fu_358_p00 = bound4_reg_717;

assign bound26_fu_358_p1 = bound26_fu_358_p10;

assign bound26_fu_358_p10 = p_c_read_reg_656;

assign bound26_fu_358_p2 = (bound26_fu_358_p0 * bound26_fu_358_p1);

assign bound4_fu_346_p0 = bound4_fu_346_p00;

assign bound4_fu_346_p00 = bound_fu_333_p2;

assign bound4_fu_346_p1 = bound4_fu_346_p10;

assign bound4_fu_346_p10 = $unsigned(p_chin_read_reg_661);

assign bound4_fu_346_p2 = (bound4_fu_346_p0 * bound4_fu_346_p1);

assign bound_fu_333_p0 = cast_fu_330_p1;

assign bound_fu_333_p1 = cast_fu_330_p1;

assign bound_fu_333_p2 = (bound_fu_333_p0 * bound_fu_333_p1);

assign cast_fu_330_p1 = $unsigned(p_k_read_reg_668);

assign chi_fu_434_p2 = (31'd1 + select_ln71_fu_402_p3);

assign icmp_ln69_fu_392_p2 = ((ap_phi_mux_indvar_flatten58_phi_fu_181_p4 == bound26_reg_723) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_397_p2 = ((ap_phi_mux_indvar_flatten21_phi_fu_193_p4 == bound4_reg_717) ? 1'b1 : 1'b0);

assign icmp_ln73_1_fu_422_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_215_p4 == bound_reg_711) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_369_p2 = ((bound_reg_711 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_1_fu_410_p2 = ((ap_phi_mux_kc_0_i_i_phi_fu_226_p4 == p_k_read_reg_668) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_364_p2 = ((p_k_read_reg_668 == 32'd0) ? 1'b1 : 1'b0);

assign kc_fu_613_p2 = (32'd1 + select_ln73_reg_788);

assign kr_fu_553_p2 = (31'd1 + select_ln71_4_fu_519_p3);

assign mul_ln78_10_fu_378_p1 = mul_ln78_10_fu_378_p10;

assign mul_ln78_10_fu_378_p10 = ap_phi_mux_chi_0_i_i_phi_fu_204_p4;

assign mul_ln78_10_fu_378_p2 = ($signed(p_k_read_reg_668) * $signed({{1'b0}, {mul_ln78_10_fu_378_p1}}));

assign mul_ln78_11_fu_383_p2 = ($signed(mul_ln78_10_fu_378_p2) * $signed(p_k_read_reg_668));

assign mul_ln78_12_fu_502_p2 = ($signed(trunc_ln78_6_fu_498_p1) * $signed(trunc_ln78_1_reg_685));

assign mul_ln78_13_fu_450_p0 = mul_ln78_13_fu_450_p00;

assign mul_ln78_13_fu_450_p00 = chi_fu_434_p2;

assign mul_ln78_13_fu_450_p2 = ($signed({{1'b0}, {mul_ln78_13_fu_450_p0}}) * $signed(p_k_read_reg_668));

assign mul_ln78_14_fu_526_p2 = ($signed(p_k_read_reg_668) * $signed(mul_ln78_13_reg_777));

assign mul_ln78_15_fu_563_p2 = ($signed(trunc_ln78_1_reg_685) * $signed(trunc_ln78_8_fu_559_p1));

assign mul_ln78_1_fu_252_p2 = ($signed(p_k_read_reg_668) * $signed(p_k_read_reg_668));

assign mul_ln78_2_fu_256_p2 = ($signed(mul_ln78_1_fu_252_p2) * $signed(mul_ln78_fu_248_p2));

assign mul_ln78_3_fu_271_p2 = ($signed(p_chin_read_reg_661) * $signed(p_k_read_reg_668));

assign mul_ln78_4_fu_275_p2 = ($signed(p_k_read_reg_668) * $signed(add_ln78_fu_266_p2));

assign mul_ln78_5_fu_280_p2 = ($signed(mul_ln78_4_fu_275_p2) * $signed(mul_ln78_3_fu_271_p2));

assign mul_ln78_6_fu_295_p2 = ($signed(p_k_read_reg_668) * $signed(add_ln78_1_fu_290_p2));

assign mul_ln78_7_fu_300_p2 = ($signed(mul_ln78_6_fu_295_p2) * $signed(mul_ln78_3_fu_271_p2));

assign mul_ln78_8_fu_315_p2 = ($signed(p_k_read_reg_668) * $signed(add_ln78_2_fu_310_p2));

assign mul_ln78_9_fu_320_p2 = ($signed(mul_ln78_8_fu_315_p2) * $signed(mul_ln78_3_fu_271_p2));

assign mul_ln78_fu_248_p2 = ($signed(cho_read_reg_648) * $signed(p_chin_read_reg_661));

assign or_ln71_fu_444_p2 = (select_ln71_3_fu_427_p3 | icmp_ln71_fu_397_p2);

assign or_ln73_1_fu_468_p2 = (or_ln73_fu_462_p2 | icmp_ln71_fu_397_p2);

assign or_ln73_fu_462_p2 = (select_ln71_7_fu_455_p3 | select_ln71_3_fu_427_p3);

assign select_ln71_1_fu_513_p3 = ((icmp_ln71_reg_748[0:0] === 1'b1) ? 10'd0 : trunc_ln78_5_reg_739);

assign select_ln71_2_fu_415_p3 = ((icmp_ln71_fu_397_p2[0:0] === 1'b1) ? icmp_ln75_reg_728 : icmp_ln75_1_fu_410_p2);

assign select_ln71_3_fu_427_p3 = ((icmp_ln71_fu_397_p2[0:0] === 1'b1) ? icmp_ln73_reg_734 : icmp_ln73_1_fu_422_p2);

assign select_ln71_4_fu_519_p3 = ((or_ln71_reg_770[0:0] === 1'b1) ? 31'd0 : ap_phi_mux_kr_0_i_i_phi_fu_237_p4);

assign select_ln71_5_fu_534_p3 = ((select_ln71_3_reg_759[0:0] === 1'b1) ? trunc_ln78_7_fu_530_p1 : select_ln71_1_fu_513_p3);

assign select_ln71_6_fu_541_p3 = ((or_ln71_reg_770[0:0] === 1'b1) ? 10'd0 : mul_ln78_12_fu_502_p2);

assign select_ln71_7_fu_455_p3 = ((select_ln71_3_fu_427_p3[0:0] === 1'b1) ? icmp_ln75_reg_728 : select_ln71_2_fu_415_p3);

assign select_ln71_8_fu_548_p3 = ((select_ln71_3_reg_759[0:0] === 1'b1) ? chi_reg_765 : select_ln71_reg_754);

assign select_ln71_9_fu_624_p3 = ((icmp_ln71_reg_748[0:0] === 1'b1) ? 96'd1 : add_ln71_1_reg_803);

assign select_ln71_fu_402_p3 = ((icmp_ln71_fu_397_p2[0:0] === 1'b1) ? 31'd0 : ap_phi_mux_chi_0_i_i_phi_fu_204_p4);

assign select_ln73_1_fu_568_p3 = ((select_ln71_7_reg_782[0:0] === 1'b1) ? mul_ln78_15_fu_563_p2 : select_ln71_6_fu_541_p3);

assign select_ln73_2_fu_575_p3 = ((select_ln71_7_reg_782[0:0] === 1'b1) ? kr_fu_553_p2 : select_ln71_4_fu_519_p3);

assign select_ln73_3_fu_618_p3 = ((or_ln71_reg_770[0:0] === 1'b1) ? 64'd1 : add_ln73_1_reg_798);

assign select_ln73_fu_474_p3 = ((or_ln73_1_fu_468_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_kc_0_i_i_phi_fu_226_p4);

assign sext_ln78_1_fu_608_p1 = $signed(add_ln78_6_fu_603_p2);

assign sext_ln78_2_fu_634_p1 = $signed(add_ln78_7_fu_630_p2);

assign sext_ln78_3_fu_643_p1 = $signed(add_ln78_8_fu_639_p2);

assign sext_ln78_fu_598_p1 = $signed(add_ln78_5_fu_593_p2);

assign start_out = real_start;

assign trunc_ln78_1_fu_244_p0 = p_k_s_dout;

assign trunc_ln78_1_fu_244_p1 = trunc_ln78_1_fu_244_p0[9:0];

assign trunc_ln78_2_fu_286_p1 = mul_ln78_5_fu_280_p2[9:0];

assign trunc_ln78_3_fu_306_p1 = mul_ln78_7_fu_300_p2[9:0];

assign trunc_ln78_4_fu_326_p1 = mul_ln78_9_fu_320_p2[9:0];

assign trunc_ln78_5_fu_388_p1 = mul_ln78_11_fu_383_p2[9:0];

assign trunc_ln78_6_fu_498_p1 = ap_phi_mux_kr_0_i_i_phi_fu_237_p4[9:0];

assign trunc_ln78_7_fu_530_p1 = mul_ln78_14_fu_526_p2[9:0];

assign trunc_ln78_8_fu_559_p1 = kr_fu_553_p2[9:0];

assign trunc_ln78_9_fu_482_p1 = select_ln73_fu_474_p3[9:0];

assign trunc_ln78_fu_262_p1 = mul_ln78_2_fu_256_p2[9:0];

endmodule //Load_W_ALL
