// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Read_W_buf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        W_address0,
        W_ce0,
        W_we0,
        W_d0,
        m_axi_W_ddr_AWVALID,
        m_axi_W_ddr_AWREADY,
        m_axi_W_ddr_AWADDR,
        m_axi_W_ddr_AWID,
        m_axi_W_ddr_AWLEN,
        m_axi_W_ddr_AWSIZE,
        m_axi_W_ddr_AWBURST,
        m_axi_W_ddr_AWLOCK,
        m_axi_W_ddr_AWCACHE,
        m_axi_W_ddr_AWPROT,
        m_axi_W_ddr_AWQOS,
        m_axi_W_ddr_AWREGION,
        m_axi_W_ddr_AWUSER,
        m_axi_W_ddr_WVALID,
        m_axi_W_ddr_WREADY,
        m_axi_W_ddr_WDATA,
        m_axi_W_ddr_WSTRB,
        m_axi_W_ddr_WLAST,
        m_axi_W_ddr_WID,
        m_axi_W_ddr_WUSER,
        m_axi_W_ddr_ARVALID,
        m_axi_W_ddr_ARREADY,
        m_axi_W_ddr_ARADDR,
        m_axi_W_ddr_ARID,
        m_axi_W_ddr_ARLEN,
        m_axi_W_ddr_ARSIZE,
        m_axi_W_ddr_ARBURST,
        m_axi_W_ddr_ARLOCK,
        m_axi_W_ddr_ARCACHE,
        m_axi_W_ddr_ARPROT,
        m_axi_W_ddr_ARQOS,
        m_axi_W_ddr_ARREGION,
        m_axi_W_ddr_ARUSER,
        m_axi_W_ddr_RVALID,
        m_axi_W_ddr_RREADY,
        m_axi_W_ddr_RDATA,
        m_axi_W_ddr_RLAST,
        m_axi_W_ddr_RID,
        m_axi_W_ddr_RUSER,
        m_axi_W_ddr_RRESP,
        m_axi_W_ddr_BVALID,
        m_axi_W_ddr_BREADY,
        m_axi_W_ddr_BRESP,
        m_axi_W_ddr_BID,
        m_axi_W_ddr_BUSER,
        W_ddr_offset,
        length_r
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] W_address0;
output   W_ce0;
output   W_we0;
output  [31:0] W_d0;
output   m_axi_W_ddr_AWVALID;
input   m_axi_W_ddr_AWREADY;
output  [31:0] m_axi_W_ddr_AWADDR;
output  [0:0] m_axi_W_ddr_AWID;
output  [31:0] m_axi_W_ddr_AWLEN;
output  [2:0] m_axi_W_ddr_AWSIZE;
output  [1:0] m_axi_W_ddr_AWBURST;
output  [1:0] m_axi_W_ddr_AWLOCK;
output  [3:0] m_axi_W_ddr_AWCACHE;
output  [2:0] m_axi_W_ddr_AWPROT;
output  [3:0] m_axi_W_ddr_AWQOS;
output  [3:0] m_axi_W_ddr_AWREGION;
output  [0:0] m_axi_W_ddr_AWUSER;
output   m_axi_W_ddr_WVALID;
input   m_axi_W_ddr_WREADY;
output  [31:0] m_axi_W_ddr_WDATA;
output  [3:0] m_axi_W_ddr_WSTRB;
output   m_axi_W_ddr_WLAST;
output  [0:0] m_axi_W_ddr_WID;
output  [0:0] m_axi_W_ddr_WUSER;
output   m_axi_W_ddr_ARVALID;
input   m_axi_W_ddr_ARREADY;
output  [31:0] m_axi_W_ddr_ARADDR;
output  [0:0] m_axi_W_ddr_ARID;
output  [31:0] m_axi_W_ddr_ARLEN;
output  [2:0] m_axi_W_ddr_ARSIZE;
output  [1:0] m_axi_W_ddr_ARBURST;
output  [1:0] m_axi_W_ddr_ARLOCK;
output  [3:0] m_axi_W_ddr_ARCACHE;
output  [2:0] m_axi_W_ddr_ARPROT;
output  [3:0] m_axi_W_ddr_ARQOS;
output  [3:0] m_axi_W_ddr_ARREGION;
output  [0:0] m_axi_W_ddr_ARUSER;
input   m_axi_W_ddr_RVALID;
output   m_axi_W_ddr_RREADY;
input  [31:0] m_axi_W_ddr_RDATA;
input   m_axi_W_ddr_RLAST;
input  [0:0] m_axi_W_ddr_RID;
input  [0:0] m_axi_W_ddr_RUSER;
input  [1:0] m_axi_W_ddr_RRESP;
input   m_axi_W_ddr_BVALID;
output   m_axi_W_ddr_BREADY;
input  [1:0] m_axi_W_ddr_BRESP;
input  [0:0] m_axi_W_ddr_BID;
input  [0:0] m_axi_W_ddr_BUSER;
input  [29:0] W_ddr_offset;
input  [31:0] length_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg W_ce0;
reg W_we0;
reg m_axi_W_ddr_ARVALID;
reg m_axi_W_ddr_RREADY;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    W_ddr_blk_n_AR;
reg    W_ddr_blk_n_R;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln274_fu_115_p2;
wire   [63:0] p_0_rec_cast_fu_107_p1;
reg   [63:0] p_0_rec_cast_reg_138;
reg    ap_block_state8;
wire   [30:0] i_fu_120_p2;
reg   [30:0] i_reg_146;
reg   [31:0] W_ddr_addr_read_reg_151;
reg   [30:0] p_0_rec_reg_85;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln273_fu_96_p1;
wire   [31:0] i_0_cast_fu_111_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_0_rec_reg_85 <= i_reg_146;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_0_rec_reg_85 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_W_ddr_RVALID == 1'b0) & (icmp_ln274_fu_115_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln274_fu_115_p2 == 1'd1))) begin
        W_ddr_addr_read_reg_151 <= m_axi_W_ddr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_W_ddr_RVALID == 1'b0) & (icmp_ln274_fu_115_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state8))) begin
        i_reg_146 <= i_fu_120_p2;
        p_0_rec_cast_reg_138[30 : 0] <= p_0_rec_cast_fu_107_p1[30 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        W_ce0 = 1'b1;
    end else begin
        W_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        W_ddr_blk_n_AR = m_axi_W_ddr_ARREADY;
    end else begin
        W_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln274_fu_115_p2 == 1'd1))) begin
        W_ddr_blk_n_R = m_axi_W_ddr_RVALID;
    end else begin
        W_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        W_we0 = 1'b1;
    end else begin
        W_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((m_axi_W_ddr_RVALID == 1'b0) & (icmp_ln274_fu_115_p2 == 1'd1)) & (icmp_ln274_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_W_ddr_RVALID == 1'b0) & (icmp_ln274_fu_115_p2 == 1'd1)) & (icmp_ln274_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_W_ddr_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        m_axi_W_ddr_ARVALID = 1'b1;
    end else begin
        m_axi_W_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_W_ddr_RVALID == 1'b0) & (icmp_ln274_fu_115_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln274_fu_115_p2 == 1'd1))) begin
        m_axi_W_ddr_RREADY = 1'b1;
    end else begin
        m_axi_W_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((m_axi_W_ddr_ARREADY == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((m_axi_W_ddr_RVALID == 1'b0) & (icmp_ln274_fu_115_p2 == 1'd1)) & (icmp_ln274_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((m_axi_W_ddr_RVALID == 1'b0) & (icmp_ln274_fu_115_p2 == 1'd1)) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln274_fu_115_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_address0 = p_0_rec_cast_reg_138;

assign W_d0 = W_ddr_addr_read_reg_151;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state8 = ((m_axi_W_ddr_RVALID == 1'b0) & (icmp_ln274_fu_115_p2 == 1'd1));
end

assign i_0_cast_fu_111_p1 = p_0_rec_reg_85;

assign i_fu_120_p2 = (p_0_rec_reg_85 + 31'd1);

assign icmp_ln274_fu_115_p2 = (($signed(i_0_cast_fu_111_p1) < $signed(length_r)) ? 1'b1 : 1'b0);

assign m_axi_W_ddr_ARADDR = zext_ln273_fu_96_p1;

assign m_axi_W_ddr_ARBURST = 2'd0;

assign m_axi_W_ddr_ARCACHE = 4'd0;

assign m_axi_W_ddr_ARID = 1'd0;

assign m_axi_W_ddr_ARLEN = length_r;

assign m_axi_W_ddr_ARLOCK = 2'd0;

assign m_axi_W_ddr_ARPROT = 3'd0;

assign m_axi_W_ddr_ARQOS = 4'd0;

assign m_axi_W_ddr_ARREGION = 4'd0;

assign m_axi_W_ddr_ARSIZE = 3'd0;

assign m_axi_W_ddr_ARUSER = 1'd0;

assign m_axi_W_ddr_AWADDR = 32'd0;

assign m_axi_W_ddr_AWBURST = 2'd0;

assign m_axi_W_ddr_AWCACHE = 4'd0;

assign m_axi_W_ddr_AWID = 1'd0;

assign m_axi_W_ddr_AWLEN = 32'd0;

assign m_axi_W_ddr_AWLOCK = 2'd0;

assign m_axi_W_ddr_AWPROT = 3'd0;

assign m_axi_W_ddr_AWQOS = 4'd0;

assign m_axi_W_ddr_AWREGION = 4'd0;

assign m_axi_W_ddr_AWSIZE = 3'd0;

assign m_axi_W_ddr_AWUSER = 1'd0;

assign m_axi_W_ddr_AWVALID = 1'b0;

assign m_axi_W_ddr_BREADY = 1'b0;

assign m_axi_W_ddr_WDATA = 32'd0;

assign m_axi_W_ddr_WID = 1'd0;

assign m_axi_W_ddr_WLAST = 1'b0;

assign m_axi_W_ddr_WSTRB = 4'd0;

assign m_axi_W_ddr_WUSER = 1'd0;

assign m_axi_W_ddr_WVALID = 1'b0;

assign p_0_rec_cast_fu_107_p1 = p_0_rec_reg_85;

assign zext_ln273_fu_96_p1 = W_ddr_offset;

always @ (posedge ap_clk) begin
    p_0_rec_cast_reg_138[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //Read_W_buf
