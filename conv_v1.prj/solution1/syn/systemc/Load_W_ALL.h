// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Load_W_ALL_HH_
#define _Load_W_ALL_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Load_W_ALL : public sc_module {
    // Port declarations 37
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > cho_dout;
    sc_in< sc_logic > cho_empty_n;
    sc_out< sc_logic > cho_read;
    sc_out< sc_lv<9> > W_buf_address0;
    sc_out< sc_logic > W_buf_ce0;
    sc_in< sc_lv<32> > W_buf_q0;
    sc_out< sc_lv<32> > W_next_0_0_V_din;
    sc_in< sc_logic > W_next_0_0_V_full_n;
    sc_out< sc_logic > W_next_0_0_V_write;
    sc_out< sc_lv<32> > W_next_0_1_V_din;
    sc_in< sc_logic > W_next_0_1_V_full_n;
    sc_out< sc_logic > W_next_0_1_V_write;
    sc_out< sc_lv<32> > W_next_0_2_V_din;
    sc_in< sc_logic > W_next_0_2_V_full_n;
    sc_out< sc_logic > W_next_0_2_V_write;
    sc_out< sc_lv<32> > W_next_0_3_V_din;
    sc_in< sc_logic > W_next_0_3_V_full_n;
    sc_out< sc_logic > W_next_0_3_V_write;
    sc_in< sc_lv<32> > p_c_s_dout;
    sc_in< sc_logic > p_c_s_empty_n;
    sc_out< sc_logic > p_c_s_read;
    sc_in< sc_lv<32> > p_chin_s_dout;
    sc_in< sc_logic > p_chin_s_empty_n;
    sc_out< sc_logic > p_chin_s_read;
    sc_in< sc_lv<32> > p_k_s_dout;
    sc_in< sc_logic > p_k_s_empty_n;
    sc_out< sc_logic > p_k_s_read;


    // Module declarations
    Load_W_ALL(sc_module_name name);
    SC_HAS_PROCESS(Load_W_ALL);

    ~Load_W_ALL();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > cho_blk_n;
    sc_signal< sc_logic > W_next_0_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<2> > trunc_ln182_reg_449;
    sc_signal< sc_logic > W_next_0_1_V_blk_n;
    sc_signal< sc_logic > W_next_0_2_V_blk_n;
    sc_signal< sc_logic > W_next_0_3_V_blk_n;
    sc_signal< sc_logic > p_c_s_blk_n;
    sc_signal< sc_logic > p_chin_s_blk_n;
    sc_signal< sc_logic > p_k_s_blk_n;
    sc_signal< sc_lv<32> > cho_read_reg_355;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > p_c_read_reg_360;
    sc_signal< sc_lv<32> > p_chin_read_reg_365;
    sc_signal< sc_lv<32> > p_k_read_reg_370;
    sc_signal< sc_lv<10> > trunc_ln78_fu_204_p1;
    sc_signal< sc_lv<10> > trunc_ln78_reg_379;
    sc_signal< sc_lv<32> > mul_ln78_3_fu_208_p2;
    sc_signal< sc_lv<32> > mul_ln78_3_reg_384;
    sc_signal< sc_lv<31> > col_fu_223_p2;
    sc_signal< sc_lv<31> > col_reg_392;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<31> > chi_fu_238_p2;
    sc_signal< sc_lv<31> > chi_reg_400;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<10> > trunc_ln78_1_fu_254_p1;
    sc_signal< sc_lv<10> > trunc_ln78_1_reg_405;
    sc_signal< sc_lv<1> > icmp_ln71_fu_233_p2;
    sc_signal< sc_lv<31> > kr_fu_267_p2;
    sc_signal< sc_lv<31> > kr_reg_413;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<10> > mul_ln78_2_fu_277_p2;
    sc_signal< sc_lv<10> > mul_ln78_2_reg_418;
    sc_signal< sc_lv<1> > icmp_ln73_fu_262_p2;
    sc_signal< sc_lv<32> > kc_fu_287_p2;
    sc_signal< sc_lv<32> > kc_reg_426;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<10> > add_ln78_1_fu_297_p2;
    sc_signal< sc_lv<10> > add_ln78_1_reg_431;
    sc_signal< sc_lv<1> > icmp_ln75_fu_282_p2;
    sc_signal< sc_lv<3> > o_fu_312_p2;
    sc_signal< sc_lv<3> > o_reg_439;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<10> > trunc_ln78_3_fu_333_p1;
    sc_signal< sc_lv<10> > trunc_ln78_3_reg_444;
    sc_signal< sc_lv<1> > icmp_ln77_fu_306_p2;
    sc_signal< sc_lv<2> > trunc_ln182_fu_337_p1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<31> > col_0_i_i_reg_149;
    sc_signal< sc_lv<31> > chi_0_i_i_reg_160;
    sc_signal< sc_lv<1> > icmp_ln69_fu_218_p2;
    sc_signal< sc_lv<31> > kr_0_i_i_reg_171;
    sc_signal< sc_lv<32> > kc_0_i_i_reg_182;
    sc_signal< sc_lv<3> > o_0_i_i_reg_193;
    sc_signal< bool > ap_block_state8;
    sc_signal< sc_lv<64> > sext_ln78_fu_350_p1;
    sc_signal< sc_lv<32> > trunc_ln78_fu_204_p0;
    sc_signal< sc_lv<32> > mul_ln78_3_fu_208_p0;
    sc_signal< sc_lv<32> > mul_ln78_3_fu_208_p1;
    sc_signal< sc_lv<32> > zext_ln69_fu_214_p1;
    sc_signal< sc_lv<32> > zext_ln71_fu_229_p1;
    sc_signal< sc_lv<31> > mul_ln78_fu_244_p1;
    sc_signal< sc_lv<32> > mul_ln78_fu_244_p2;
    sc_signal< sc_lv<32> > mul_ln78_1_fu_249_p2;
    sc_signal< sc_lv<32> > zext_ln73_fu_258_p1;
    sc_signal< sc_lv<10> > trunc_ln78_2_fu_273_p1;
    sc_signal< sc_lv<10> > trunc_ln77_fu_293_p1;
    sc_signal< sc_lv<32> > zext_ln77_fu_302_p1;
    sc_signal< sc_lv<32> > add_ln78_fu_318_p2;
    sc_signal< sc_lv<32> > mul_ln78_4_fu_323_p2;
    sc_signal< sc_lv<32> > mul_ln78_5_fu_328_p2;
    sc_signal< sc_lv<10> > add_ln78_2_fu_341_p2;
    sc_signal< sc_lv<10> > add_ln78_3_fu_345_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_W_buf_address0();
    void thread_W_buf_ce0();
    void thread_W_next_0_0_V_blk_n();
    void thread_W_next_0_0_V_din();
    void thread_W_next_0_0_V_write();
    void thread_W_next_0_1_V_blk_n();
    void thread_W_next_0_1_V_din();
    void thread_W_next_0_1_V_write();
    void thread_W_next_0_2_V_blk_n();
    void thread_W_next_0_2_V_din();
    void thread_W_next_0_2_V_write();
    void thread_W_next_0_3_V_blk_n();
    void thread_W_next_0_3_V_din();
    void thread_W_next_0_3_V_write();
    void thread_add_ln78_1_fu_297_p2();
    void thread_add_ln78_2_fu_341_p2();
    void thread_add_ln78_3_fu_345_p2();
    void thread_add_ln78_fu_318_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_state1();
    void thread_ap_block_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_chi_fu_238_p2();
    void thread_cho_blk_n();
    void thread_cho_read();
    void thread_col_fu_223_p2();
    void thread_icmp_ln69_fu_218_p2();
    void thread_icmp_ln71_fu_233_p2();
    void thread_icmp_ln73_fu_262_p2();
    void thread_icmp_ln75_fu_282_p2();
    void thread_icmp_ln77_fu_306_p2();
    void thread_internal_ap_ready();
    void thread_kc_fu_287_p2();
    void thread_kr_fu_267_p2();
    void thread_mul_ln78_1_fu_249_p2();
    void thread_mul_ln78_2_fu_277_p2();
    void thread_mul_ln78_3_fu_208_p0();
    void thread_mul_ln78_3_fu_208_p1();
    void thread_mul_ln78_3_fu_208_p2();
    void thread_mul_ln78_4_fu_323_p2();
    void thread_mul_ln78_5_fu_328_p2();
    void thread_mul_ln78_fu_244_p1();
    void thread_mul_ln78_fu_244_p2();
    void thread_o_fu_312_p2();
    void thread_p_c_s_blk_n();
    void thread_p_c_s_read();
    void thread_p_chin_s_blk_n();
    void thread_p_chin_s_read();
    void thread_p_k_s_blk_n();
    void thread_p_k_s_read();
    void thread_real_start();
    void thread_sext_ln78_fu_350_p1();
    void thread_start_out();
    void thread_start_write();
    void thread_trunc_ln182_fu_337_p1();
    void thread_trunc_ln77_fu_293_p1();
    void thread_trunc_ln78_1_fu_254_p1();
    void thread_trunc_ln78_2_fu_273_p1();
    void thread_trunc_ln78_3_fu_333_p1();
    void thread_trunc_ln78_fu_204_p0();
    void thread_trunc_ln78_fu_204_p1();
    void thread_zext_ln69_fu_214_p1();
    void thread_zext_ln71_fu_229_p1();
    void thread_zext_ln73_fu_258_p1();
    void thread_zext_ln77_fu_302_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
