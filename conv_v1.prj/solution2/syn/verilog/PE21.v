// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module PE21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        W_pre_V_dout,
        W_pre_V_empty_n,
        W_pre_V_read,
        In_pre_V_dout,
        In_pre_V_empty_n,
        In_pre_V_read,
        W_next_V8_din,
        W_next_V8_full_n,
        W_next_V8_write,
        In_next_V50_din,
        In_next_V50_full_n,
        In_next_V50_write,
        row_dout,
        row_empty_n,
        row_read,
        cho_dout,
        cho_empty_n,
        cho_read,
        O_V_din,
        O_V_full_n,
        O_V_write,
        p_c_s_dout,
        p_c_s_empty_n,
        p_c_s_read,
        p_chin_s_dout,
        p_chin_s_empty_n,
        p_chin_s_read,
        p_k_s_dout,
        p_k_s_empty_n,
        p_k_s_read,
        row_out_din,
        row_out_full_n,
        row_out_write,
        cho_out_din,
        cho_out_full_n,
        cho_out_write,
        cho_out1_din,
        cho_out1_full_n,
        cho_out1_write,
        p_c_out_din,
        p_c_out_full_n,
        p_c_out_write,
        p_c_out2_din,
        p_c_out2_full_n,
        p_c_out2_write,
        p_chin_out_din,
        p_chin_out_full_n,
        p_chin_out_write,
        p_chin_out3_din,
        p_chin_out3_full_n,
        p_chin_out3_write,
        p_chout_out_din,
        p_chout_out_full_n,
        p_chout_out_write,
        p_chout_out4_din,
        p_chout_out4_full_n,
        p_chout_out4_write,
        p_k_out_din,
        p_k_out_full_n,
        p_k_out_write,
        p_k_out5_din,
        p_k_out5_full_n,
        p_k_out5_write,
        p_r_out_din,
        p_r_out_full_n,
        p_r_out_write,
        p_r_out6_din,
        p_r_out6_full_n,
        p_r_out6_write,
        p_chout_s,
        p_r_s
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage0 = 7'd8;
parameter    ap_ST_fsm_pp0_stage1 = 7'd16;
parameter    ap_ST_fsm_pp0_stage2 = 7'd32;
parameter    ap_ST_fsm_state12 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] W_pre_V_dout;
input   W_pre_V_empty_n;
output   W_pre_V_read;
input  [31:0] In_pre_V_dout;
input   In_pre_V_empty_n;
output   In_pre_V_read;
output  [31:0] W_next_V8_din;
input   W_next_V8_full_n;
output   W_next_V8_write;
output  [31:0] In_next_V50_din;
input   In_next_V50_full_n;
output   In_next_V50_write;
input  [31:0] row_dout;
input   row_empty_n;
output   row_read;
input  [31:0] cho_dout;
input   cho_empty_n;
output   cho_read;
output  [31:0] O_V_din;
input   O_V_full_n;
output   O_V_write;
input  [31:0] p_c_s_dout;
input   p_c_s_empty_n;
output   p_c_s_read;
input  [31:0] p_chin_s_dout;
input   p_chin_s_empty_n;
output   p_chin_s_read;
input  [31:0] p_k_s_dout;
input   p_k_s_empty_n;
output   p_k_s_read;
output  [31:0] row_out_din;
input   row_out_full_n;
output   row_out_write;
output  [31:0] cho_out_din;
input   cho_out_full_n;
output   cho_out_write;
output  [31:0] cho_out1_din;
input   cho_out1_full_n;
output   cho_out1_write;
output  [31:0] p_c_out_din;
input   p_c_out_full_n;
output   p_c_out_write;
output  [31:0] p_c_out2_din;
input   p_c_out2_full_n;
output   p_c_out2_write;
output  [31:0] p_chin_out_din;
input   p_chin_out_full_n;
output   p_chin_out_write;
output  [31:0] p_chin_out3_din;
input   p_chin_out3_full_n;
output   p_chin_out3_write;
output  [31:0] p_chout_out_din;
input   p_chout_out_full_n;
output   p_chout_out_write;
output  [31:0] p_chout_out4_din;
input   p_chout_out4_full_n;
output   p_chout_out4_write;
output  [31:0] p_k_out_din;
input   p_k_out_full_n;
output   p_k_out_write;
output  [31:0] p_k_out5_din;
input   p_k_out5_full_n;
output   p_k_out5_write;
output  [31:0] p_r_out_din;
input   p_r_out_full_n;
output   p_r_out_write;
output  [31:0] p_r_out6_din;
input   p_r_out6_full_n;
output   p_r_out6_write;
input  [31:0] p_chout_s;
input  [31:0] p_r_s;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg W_pre_V_read;
reg In_pre_V_read;
reg W_next_V8_write;
reg In_next_V50_write;
reg row_read;
reg cho_read;
reg O_V_write;
reg p_c_s_read;
reg p_chin_s_read;
reg p_k_s_read;
reg row_out_write;
reg cho_out_write;
reg cho_out1_write;
reg p_c_out_write;
reg p_c_out2_write;
reg p_chin_out_write;
reg p_chin_out3_write;
reg p_chout_out_write;
reg p_chout_out4_write;
reg p_k_out_write;
reg p_k_out5_write;
reg p_r_out_write;
reg p_r_out6_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    W_pre_V_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln122_reg_442;
reg    In_pre_V_blk_n;
reg    W_next_V8_blk_n;
reg    In_next_V50_blk_n;
reg    row_blk_n;
reg    cho_blk_n;
reg    O_V_blk_n;
wire    ap_CS_fsm_state12;
reg    p_c_s_blk_n;
reg    p_chin_s_blk_n;
reg    p_k_s_blk_n;
reg    row_out_blk_n;
reg    cho_out_blk_n;
reg    cho_out1_blk_n;
reg    p_c_out_blk_n;
reg    p_c_out2_blk_n;
reg    p_chin_out_blk_n;
reg    p_chin_out3_blk_n;
reg    p_chout_out_blk_n;
reg    p_chout_out4_blk_n;
reg    p_k_out_blk_n;
reg    p_k_out5_blk_n;
reg    p_r_out_blk_n;
reg    p_r_out6_blk_n;
reg   [95:0] indvar_flatten13_reg_290;
reg   [31:0] tmp_reg_301;
reg   [31:0] p_c_read_reg_408;
reg    ap_block_state1;
reg   [31:0] p_chin_read_reg_413;
reg   [31:0] p_k_read_reg_418;
wire   [0:0] and_ln130_fu_347_p2;
reg   [0:0] and_ln130_reg_423;
wire   [95:0] bound4_fu_369_p2;
reg   [95:0] bound4_reg_428;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln119_fu_379_p2;
wire    ap_CS_fsm_state3;
wire   [30:0] add_ln119_fu_384_p2;
reg   [30:0] add_ln119_reg_437;
wire   [0:0] icmp_ln122_fu_390_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln122_reg_442_pp0_iter1_reg;
reg   [0:0] icmp_ln122_reg_442_pp0_iter2_reg;
wire   [95:0] add_ln122_fu_395_p2;
reg   [95:0] add_ln122_reg_446;
reg   [31:0] tmp_72_reg_451;
reg    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] tmp_71_reg_456;
wire   [31:0] grp_fu_319_p2;
reg   [31:0] tmp_4_i_i_reg_461;
wire   [31:0] O_temp_16_fu_401_p3;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_block_pp0_stage1_subdone;
reg   [30:0] col_0_i_i_reg_279;
reg   [95:0] ap_phi_mux_indvar_flatten13_phi_fu_294_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_tmp_phi_fu_306_p4;
reg    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage2;
wire   [0:0] icmp_ln130_fu_335_p2;
wire   [0:0] icmp_ln130_16_fu_341_p2;
wire   [31:0] bound_fu_356_p0;
wire   [63:0] cast_fu_353_p1;
wire   [31:0] bound_fu_356_p1;
wire   [63:0] bound_fu_356_p2;
wire   [63:0] bound4_fu_369_p0;
wire   [31:0] bound4_fu_369_p1;
wire   [31:0] col_0_i_i_cast_fu_375_p1;
wire   [31:0] grp_fu_314_p2;
reg    grp_fu_314_ce;
wire    ap_block_pp0_stage2_11001;
reg    grp_fu_319_ce;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [95:0] bound4_fu_369_p00;
wire   [95:0] bound4_fu_369_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Systolic_Array_Cocud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_Cocud_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_tmp_phi_fu_306_p4),
    .din1(tmp_4_i_i_reg_461),
    .ce(grp_fu_314_ce),
    .dout(grp_fu_314_p2)
);

Systolic_Array_CodEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_CodEe_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_71_reg_456),
    .din1(tmp_72_reg_451),
    .ce(grp_fu_319_ce),
    .dout(grp_fu_319_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln119_fu_379_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln119_fu_379_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln119_fu_379_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == O_V_full_n) & (1'b1 == ap_CS_fsm_state12))) begin
        col_0_i_i_reg_279 <= add_ln119_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        col_0_i_i_reg_279 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln122_reg_442 == 1'd0))) begin
        indvar_flatten13_reg_290 <= add_ln122_reg_446;
    end else if (((icmp_ln119_fu_379_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        indvar_flatten13_reg_290 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442_pp0_iter2_reg == 1'd0))) begin
        tmp_reg_301 <= O_temp_16_fu_401_p3;
    end else if (((icmp_ln119_fu_379_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_reg_301 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln119_reg_437 <= add_ln119_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln122_reg_446 <= add_ln122_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        and_ln130_reg_423 <= and_ln130_fu_347_p2;
        p_c_read_reg_408 <= p_c_s_dout;
        p_chin_read_reg_413 <= p_chin_s_dout;
        p_k_read_reg_418 <= p_k_s_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound4_reg_428 <= bound4_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln122_reg_442 <= icmp_ln122_fu_390_p2;
        icmp_ln122_reg_442_pp0_iter1_reg <= icmp_ln122_reg_442;
        icmp_ln122_reg_442_pp0_iter2_reg <= icmp_ln122_reg_442_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln130_reg_423) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln122_reg_442 == 1'd0))) begin
        tmp_4_i_i_reg_461 <= grp_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442 == 1'd0))) begin
        tmp_71_reg_456 <= In_pre_V_dout;
        tmp_72_reg_451 <= W_pre_V_dout;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        In_next_V50_blk_n = In_next_V50_full_n;
    end else begin
        In_next_V50_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442 == 1'd0))) begin
        In_next_V50_write = 1'b1;
    end else begin
        In_next_V50_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        In_pre_V_blk_n = In_pre_V_empty_n;
    end else begin
        In_pre_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442 == 1'd0))) begin
        In_pre_V_read = 1'b1;
    end else begin
        In_pre_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        O_V_blk_n = O_V_full_n;
    end else begin
        O_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == O_V_full_n) & (1'b1 == ap_CS_fsm_state12))) begin
        O_V_write = 1'b1;
    end else begin
        O_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        W_next_V8_blk_n = W_next_V8_full_n;
    end else begin
        W_next_V8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442 == 1'd0))) begin
        W_next_V8_write = 1'b1;
    end else begin
        W_next_V8_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        W_pre_V_blk_n = W_pre_V_empty_n;
    end else begin
        W_pre_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442 == 1'd0))) begin
        W_pre_V_read = 1'b1;
    end else begin
        W_pre_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln122_fu_390_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln119_fu_379_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln122_reg_442 == 1'd0))) begin
        ap_phi_mux_indvar_flatten13_phi_fu_294_p4 = add_ln122_reg_446;
    end else begin
        ap_phi_mux_indvar_flatten13_phi_fu_294_p4 = indvar_flatten13_reg_290;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln122_reg_442_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_tmp_phi_fu_306_p4 = O_temp_16_fu_401_p3;
    end else begin
        ap_phi_mux_tmp_phi_fu_306_p4 = tmp_reg_301;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln119_fu_379_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_blk_n = cho_empty_n;
    end else begin
        cho_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out1_blk_n = cho_out1_full_n;
    end else begin
        cho_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out1_write = 1'b1;
    end else begin
        cho_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out_blk_n = cho_out_full_n;
    end else begin
        cho_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out_write = 1'b1;
    end else begin
        cho_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_read = 1'b1;
    end else begin
        cho_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_314_ce = 1'b1;
    end else begin
        grp_fu_314_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_319_ce = 1'b1;
    end else begin
        grp_fu_319_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_out2_blk_n = p_c_out2_full_n;
    end else begin
        p_c_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_out2_write = 1'b1;
    end else begin
        p_c_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_out_blk_n = p_c_out_full_n;
    end else begin
        p_c_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_out_write = 1'b1;
    end else begin
        p_c_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_s_blk_n = p_c_s_empty_n;
    end else begin
        p_c_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_s_read = 1'b1;
    end else begin
        p_c_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_out3_blk_n = p_chin_out3_full_n;
    end else begin
        p_chin_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_out3_write = 1'b1;
    end else begin
        p_chin_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_out_blk_n = p_chin_out_full_n;
    end else begin
        p_chin_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_out_write = 1'b1;
    end else begin
        p_chin_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_s_blk_n = p_chin_s_empty_n;
    end else begin
        p_chin_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_s_read = 1'b1;
    end else begin
        p_chin_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chout_out4_blk_n = p_chout_out4_full_n;
    end else begin
        p_chout_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chout_out4_write = 1'b1;
    end else begin
        p_chout_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chout_out_blk_n = p_chout_out_full_n;
    end else begin
        p_chout_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chout_out_write = 1'b1;
    end else begin
        p_chout_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out5_blk_n = p_k_out5_full_n;
    end else begin
        p_k_out5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out5_write = 1'b1;
    end else begin
        p_k_out5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_blk_n = p_k_out_full_n;
    end else begin
        p_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_write = 1'b1;
    end else begin
        p_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_s_blk_n = p_k_s_empty_n;
    end else begin
        p_k_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_s_read = 1'b1;
    end else begin
        p_k_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_r_out6_blk_n = p_r_out6_full_n;
    end else begin
        p_r_out6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_r_out6_write = 1'b1;
    end else begin
        p_r_out6_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_r_out_blk_n = p_r_out_full_n;
    end else begin
        p_r_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_r_out_write = 1'b1;
    end else begin
        p_r_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_blk_n = row_empty_n;
    end else begin
        row_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out_blk_n = row_out_full_n;
    end else begin
        row_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out_write = 1'b1;
    end else begin
        row_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_read = 1'b1;
    end else begin
        row_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln119_fu_379_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln122_fu_390_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln122_fu_390_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == O_V_full_n) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign In_next_V50_din = In_pre_V_dout;

assign O_V_din = tmp_reg_301;

assign O_temp_16_fu_401_p3 = ((and_ln130_reg_423[0:0] === 1'b1) ? grp_fu_314_p2 : tmp_reg_301);

assign W_next_V8_din = W_pre_V_dout;

assign add_ln119_fu_384_p2 = (col_0_i_i_reg_279 + 31'd1);

assign add_ln122_fu_395_p2 = (ap_phi_mux_indvar_flatten13_phi_fu_294_p4 + 96'd1);

assign and_ln130_fu_347_p2 = (icmp_ln130_fu_335_p2 & icmp_ln130_16_fu_341_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((1'b0 == W_next_V8_full_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == In_next_V50_full_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == In_pre_V_empty_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == W_pre_V_empty_n) & (icmp_ln122_reg_442 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((1'b0 == W_next_V8_full_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == In_next_V50_full_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == In_pre_V_empty_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == W_pre_V_empty_n) & (icmp_ln122_reg_442 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((1'b0 == W_next_V8_full_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == In_next_V50_full_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == In_pre_V_empty_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == W_pre_V_empty_n) & (icmp_ln122_reg_442 == 1'd0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((p_chout_out_full_n == 1'b0) | (p_chin_out3_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out2_full_n == 1'b0) | (p_c_out_full_n == 1'b0) | (cho_out1_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_start == 1'b0) | (p_r_out6_full_n == 1'b0) | (p_r_out_full_n == 1'b0) | (p_k_out5_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chout_out4_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter0 = (((1'b0 == W_next_V8_full_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == In_next_V50_full_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == In_pre_V_empty_n) & (icmp_ln122_reg_442 == 1'd0)) | ((1'b0 == W_pre_V_empty_n) & (icmp_ln122_reg_442 == 1'd0)));
end

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound4_fu_369_p0 = bound4_fu_369_p00;

assign bound4_fu_369_p00 = bound_fu_356_p2;

assign bound4_fu_369_p1 = bound4_fu_369_p10;

assign bound4_fu_369_p10 = p_chin_read_reg_413;

assign bound4_fu_369_p2 = (bound4_fu_369_p0 * bound4_fu_369_p1);

assign bound_fu_356_p0 = cast_fu_353_p1;

assign bound_fu_356_p1 = cast_fu_353_p1;

assign bound_fu_356_p2 = (bound_fu_356_p0 * bound_fu_356_p1);

assign cast_fu_353_p1 = p_k_read_reg_418;

assign cho_out1_din = cho_dout;

assign cho_out_din = cho_dout;

assign col_0_i_i_cast_fu_375_p1 = col_0_i_i_reg_279;

assign icmp_ln119_fu_379_p2 = (($signed(col_0_i_i_cast_fu_375_p1) < $signed(p_c_read_reg_408)) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_390_p2 = ((ap_phi_mux_indvar_flatten13_phi_fu_294_p4 == bound4_reg_428) ? 1'b1 : 1'b0);

assign icmp_ln130_16_fu_341_p2 = (($signed(p_chout_s) > $signed(cho_dout)) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_335_p2 = (($signed(p_r_s) > $signed(row_dout)) ? 1'b1 : 1'b0);

assign p_c_out2_din = p_c_s_dout;

assign p_c_out_din = p_c_s_dout;

assign p_chin_out3_din = p_chin_s_dout;

assign p_chin_out_din = p_chin_s_dout;

assign p_chout_out4_din = p_chout_s;

assign p_chout_out_din = p_chout_s;

assign p_k_out5_din = p_k_s_dout;

assign p_k_out_din = p_k_s_dout;

assign p_r_out6_din = p_r_s;

assign p_r_out_din = p_r_s;

assign row_out_din = row_dout;

endmodule //PE21
