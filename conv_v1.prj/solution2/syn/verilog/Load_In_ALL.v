// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Load_In_ALL (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        In_buf_address0,
        In_buf_ce0,
        In_buf_q0,
        In_buf_address1,
        In_buf_ce1,
        In_buf_q1,
        In_next_0_0_V_din,
        In_next_0_0_V_full_n,
        In_next_0_0_V_write,
        In_next_1_0_V_din,
        In_next_1_0_V_full_n,
        In_next_1_0_V_write,
        In_next_2_0_V_din,
        In_next_2_0_V_full_n,
        In_next_2_0_V_write,
        In_next_3_0_V_din,
        In_next_3_0_V_full_n,
        In_next_3_0_V_write,
        p_c_out_din,
        p_c_out_full_n,
        p_c_out_write,
        p_c_out1_din,
        p_c_out1_full_n,
        p_c_out1_write,
        p_chin_out_din,
        p_chin_out_full_n,
        p_chin_out_write,
        p_chin_out2_din,
        p_chin_out2_full_n,
        p_chin_out2_write,
        p_k_out_din,
        p_k_out_full_n,
        p_k_out_write,
        p_k_out3_din,
        p_k_out3_full_n,
        p_k_out3_write,
        p_c_s,
        p_chin_s,
        p_k_s,
        p_s_s,
        In_buffer_start,
        p_cin_s,
        In_buffer_length
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state42 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [8:0] In_buf_address0;
output   In_buf_ce0;
input  [31:0] In_buf_q0;
output  [8:0] In_buf_address1;
output   In_buf_ce1;
input  [31:0] In_buf_q1;
output  [31:0] In_next_0_0_V_din;
input   In_next_0_0_V_full_n;
output   In_next_0_0_V_write;
output  [31:0] In_next_1_0_V_din;
input   In_next_1_0_V_full_n;
output   In_next_1_0_V_write;
output  [31:0] In_next_2_0_V_din;
input   In_next_2_0_V_full_n;
output   In_next_2_0_V_write;
output  [31:0] In_next_3_0_V_din;
input   In_next_3_0_V_full_n;
output   In_next_3_0_V_write;
output  [31:0] p_c_out_din;
input   p_c_out_full_n;
output   p_c_out_write;
output  [31:0] p_c_out1_din;
input   p_c_out1_full_n;
output   p_c_out1_write;
output  [31:0] p_chin_out_din;
input   p_chin_out_full_n;
output   p_chin_out_write;
output  [31:0] p_chin_out2_din;
input   p_chin_out2_full_n;
output   p_chin_out2_write;
output  [31:0] p_k_out_din;
input   p_k_out_full_n;
output   p_k_out_write;
output  [31:0] p_k_out3_din;
input   p_k_out3_full_n;
output   p_k_out3_write;
input  [31:0] p_c_s;
input  [31:0] p_chin_s;
input  [31:0] p_k_s;
input  [31:0] p_s_s;
input  [31:0] In_buffer_start;
input  [31:0] p_cin_s;
input  [31:0] In_buffer_length;

reg ap_done;
reg ap_idle;
reg start_write;
reg[8:0] In_buf_address0;
reg In_buf_ce0;
reg[8:0] In_buf_address1;
reg In_buf_ce1;
reg In_next_0_0_V_write;
reg In_next_1_0_V_write;
reg In_next_2_0_V_write;
reg In_next_3_0_V_write;
reg p_c_out_write;
reg p_c_out1_write;
reg p_chin_out_write;
reg p_chin_out2_write;
reg p_k_out_write;
reg p_k_out3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    In_next_0_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter19;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln32_reg_758;
reg   [0:0] icmp_ln32_reg_758_pp0_iter18_reg;
reg    In_next_1_0_V_blk_n;
reg    In_next_2_0_V_blk_n;
reg    In_next_3_0_V_blk_n;
reg    p_c_out_blk_n;
wire    ap_CS_fsm_state2;
reg    p_c_out1_blk_n;
reg    p_chin_out_blk_n;
reg    p_chin_out2_blk_n;
reg    p_k_out_blk_n;
reg    p_k_out3_blk_n;
reg   [127:0] indvar_flatten47_reg_209;
reg   [30:0] col_0_i_i_reg_220;
reg   [95:0] indvar_flatten17_reg_231;
reg   [30:0] chi_0_i_i_reg_242;
reg   [63:0] indvar_flatten_reg_253;
reg   [30:0] kr_0_i_i_reg_264;
reg   [31:0] kc_0_i_i_reg_275;
reg    ap_block_state1;
wire   [63:0] bound_fu_298_p2;
reg   [63:0] bound_reg_730;
wire   [95:0] bound4_fu_312_p2;
reg   [95:0] bound4_reg_736;
wire   [127:0] bound22_fu_331_p2;
reg   [127:0] bound22_reg_742;
reg    ap_block_state2;
wire   [0:0] icmp_ln38_fu_337_p2;
reg   [0:0] icmp_ln38_reg_747;
wire   [0:0] icmp_ln36_fu_342_p2;
reg   [0:0] icmp_ln36_reg_753;
wire   [0:0] icmp_ln32_fu_347_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state11_pp0_stage0_iter4;
wire    ap_block_state13_pp0_stage0_iter5;
wire    ap_block_state15_pp0_stage0_iter6;
wire    ap_block_state17_pp0_stage0_iter7;
wire    ap_block_state19_pp0_stage0_iter8;
wire    ap_block_state21_pp0_stage0_iter9;
wire    ap_block_state23_pp0_stage0_iter10;
wire    ap_block_state25_pp0_stage0_iter11;
wire    ap_block_state27_pp0_stage0_iter12;
wire    ap_block_state29_pp0_stage0_iter13;
wire    ap_block_state31_pp0_stage0_iter14;
wire    ap_block_state33_pp0_stage0_iter15;
wire    ap_block_state35_pp0_stage0_iter16;
wire    ap_block_state37_pp0_stage0_iter17;
wire    ap_block_state39_pp0_stage0_iter18;
reg    ap_block_state41_pp0_stage0_iter19;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln32_reg_758_pp0_iter1_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter2_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter3_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter4_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter5_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter6_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter7_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter8_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter9_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter10_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter11_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter12_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter13_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter14_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter15_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter16_reg;
reg   [0:0] icmp_ln32_reg_758_pp0_iter17_reg;
wire   [127:0] add_ln32_fu_352_p2;
reg   [127:0] add_ln32_reg_762;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln34_fu_358_p2;
reg   [0:0] icmp_ln34_reg_767;
wire   [30:0] select_ln32_fu_363_p3;
reg   [30:0] select_ln32_reg_772;
wire   [30:0] select_ln32_1_fu_377_p3;
reg   [30:0] select_ln32_1_reg_778;
wire   [0:0] select_ln32_3_fu_406_p3;
reg   [0:0] select_ln32_3_reg_783;
wire   [0:0] or_ln34_fu_413_p2;
reg   [0:0] or_ln34_reg_788;
wire   [31:0] select_ln36_fu_452_p3;
reg   [31:0] select_ln36_reg_793;
wire   [30:0] select_ln36_1_fu_460_p3;
reg   [30:0] select_ln36_1_reg_798;
wire   [31:0] add_ln42_fu_492_p2;
reg   [31:0] add_ln42_reg_803;
wire  signed [31:0] tmp_0_i_i_fu_498_p2;
reg  signed [31:0] tmp_0_i_i_reg_809;
wire   [31:0] mul_ln43_1_fu_510_p2;
reg   [31:0] mul_ln43_1_reg_814;
wire   [31:0] mul_ln43_2_fu_528_p2;
reg   [31:0] mul_ln43_2_reg_819;
wire  signed [31:0] tmp_3_i_i_fu_558_p2;
reg  signed [31:0] tmp_3_i_i_reg_824;
wire   [63:0] add_ln36_1_fu_564_p2;
reg   [63:0] add_ln36_1_reg_829;
wire   [95:0] add_ln34_1_fu_570_p2;
reg   [95:0] add_ln34_1_reg_834;
wire   [30:0] select_ln34_1_fu_581_p3;
reg   [30:0] select_ln34_1_reg_839;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state10_pp0_stage1_iter3;
wire    ap_block_state12_pp0_stage1_iter4;
wire    ap_block_state14_pp0_stage1_iter5;
wire    ap_block_state16_pp0_stage1_iter6;
wire    ap_block_state18_pp0_stage1_iter7;
wire    ap_block_state20_pp0_stage1_iter8;
wire    ap_block_state22_pp0_stage1_iter9;
wire    ap_block_state24_pp0_stage1_iter10;
wire    ap_block_state26_pp0_stage1_iter11;
wire    ap_block_state28_pp0_stage1_iter12;
wire    ap_block_state30_pp0_stage1_iter13;
wire    ap_block_state32_pp0_stage1_iter14;
wire    ap_block_state34_pp0_stage1_iter15;
wire    ap_block_state36_pp0_stage1_iter16;
wire    ap_block_state38_pp0_stage1_iter17;
wire    ap_block_state40_pp0_stage1_iter18;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] In_buffer_length_loa_reg_849;
wire   [31:0] add_ln43_3_fu_651_p2;
reg   [31:0] add_ln43_3_reg_862;
wire   [31:0] add_ln43_4_fu_661_p2;
reg   [31:0] add_ln43_4_reg_867;
wire   [31:0] kc_fu_667_p2;
reg   [31:0] kc_reg_872;
wire   [63:0] select_ln36_2_fu_672_p3;
reg   [63:0] select_ln36_2_reg_877;
wire   [95:0] select_ln34_3_fu_678_p3;
reg   [95:0] select_ln34_3_reg_882;
reg   [31:0] tmp_reg_897;
reg    ap_enable_reg_pp0_iter18;
reg   [31:0] tmp_76_reg_902;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg   [127:0] ap_phi_mux_indvar_flatten47_phi_fu_213_p4;
reg   [30:0] ap_phi_mux_col_0_i_i_phi_fu_224_p4;
reg   [95:0] ap_phi_mux_indvar_flatten17_phi_fu_235_p4;
reg   [30:0] ap_phi_mux_chi_0_i_i_phi_fu_246_p4;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_257_p4;
reg   [30:0] ap_phi_mux_kr_0_i_i_phi_fu_268_p4;
reg   [31:0] ap_phi_mux_kc_0_i_i_phi_fu_279_p4;
wire  signed [63:0] sext_ln43_fu_692_p1;
wire  signed [63:0] sext_ln43_1_fu_697_p1;
wire  signed [63:0] sext_ln43_2_fu_702_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] sext_ln43_3_fu_707_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_298_p0;
wire   [63:0] cast_fu_294_p1;
wire   [31:0] bound_fu_298_p1;
wire  signed [31:0] cast2_fu_304_p0;
wire   [63:0] bound4_fu_312_p0;
wire   [31:0] bound4_fu_312_p1;
wire   [95:0] bound22_fu_331_p0;
wire   [31:0] bound22_fu_331_p1;
wire   [30:0] add_ln32_1_fu_371_p2;
wire   [0:0] icmp_ln38_1_fu_389_p2;
wire   [0:0] icmp_ln36_1_fu_401_p2;
wire   [0:0] select_ln32_2_fu_394_p3;
wire   [30:0] select_ln34_fu_419_p3;
wire   [0:0] select_ln34_2_fu_427_p3;
wire   [0:0] or_ln36_fu_440_p2;
wire   [0:0] or_ln36_1_fu_446_p2;
wire   [30:0] kr_fu_434_p2;
wire   [30:0] mul_ln42_fu_476_p0;
wire  signed [31:0] mul_ln42_fu_476_p1;
wire   [30:0] mul_ln43_fu_486_p0;
wire   [31:0] zext_ln36_fu_468_p1;
wire  signed [31:0] mul_ln43_fu_486_p1;
wire   [31:0] mul_ln42_fu_476_p2;
wire   [31:0] mul_ln43_fu_486_p2;
wire  signed [31:0] add_ln41_fu_504_p1;
wire  signed [31:0] add_ln41_fu_504_p2;
wire  signed [31:0] mul_ln43_1_fu_510_p1;
wire  signed [31:0] shl_ln41_fu_516_p0;
wire   [31:0] shl_ln41_fu_516_p2;
wire  signed [31:0] add_ln41_1_fu_522_p2;
wire  signed [31:0] mul_ln43_2_fu_528_p1;
wire  signed [31:0] shl_ln41_1_fu_534_p0;
wire   [31:0] shl_ln41_1_fu_534_p2;
wire  signed [31:0] sub_ln41_fu_540_p1;
wire   [31:0] sub_ln41_fu_540_p2;
wire  signed [31:0] add_ln41_2_fu_546_p2;
wire  signed [31:0] mul_ln43_3_fu_552_p1;
wire   [31:0] mul_ln43_3_fu_552_p2;
wire   [30:0] chi_fu_576_p2;
wire  signed [31:0] tmp1_0_i_i_fu_595_p1;
wire   [31:0] zext_ln34_fu_587_p1;
wire   [31:0] tmp1_0_i_i_fu_595_p2;
wire   [31:0] add_ln43_fu_599_p2;
wire   [31:0] grp_fu_615_p0;
wire  signed [31:0] tmp_1_i_i_fu_621_p2;
wire  signed [31:0] tmp1_1_i_i_fu_625_p1;
wire   [31:0] tmp1_1_i_i_fu_625_p2;
wire   [31:0] grp_fu_636_p0;
wire  signed [31:0] tmp_2_i_i_fu_642_p2;
wire  signed [31:0] tmp1_2_i_i_fu_646_p1;
wire   [31:0] tmp1_2_i_i_fu_646_p2;
wire  signed [31:0] tmp1_3_i_i_fu_657_p1;
wire   [31:0] tmp1_3_i_i_fu_657_p2;
wire   [31:0] grp_fu_615_p2;
wire   [31:0] grp_fu_636_p2;
wire   [31:0] grp_fu_684_p2;
wire   [31:0] grp_fu_688_p2;
reg    grp_fu_615_ce;
reg    grp_fu_636_ce;
reg    grp_fu_684_ce;
reg    grp_fu_688_ce;
wire    ap_CS_fsm_state42;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [127:0] bound22_fu_331_p00;
wire   [127:0] bound22_fu_331_p10;
wire   [95:0] bound4_fu_312_p00;
wire   [95:0] bound4_fu_312_p10;
wire   [31:0] mul_ln42_fu_476_p00;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
end

Systolic_Array_Cocud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_Cocud_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_615_p0),
    .din1(In_buffer_length),
    .ce(grp_fu_615_ce),
    .dout(grp_fu_615_p2)
);

Systolic_Array_Cocud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_Cocud_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_636_p0),
    .din1(In_buffer_length),
    .ce(grp_fu_636_ce),
    .dout(grp_fu_636_p2)
);

Systolic_Array_Cocud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_Cocud_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln43_3_reg_862),
    .din1(In_buffer_length_loa_reg_849),
    .ce(grp_fu_684_ce),
    .dout(grp_fu_684_p2)
);

Systolic_Array_Cocud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_Cocud_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln43_4_reg_867),
    .din1(In_buffer_length_loa_reg_849),
    .ce(grp_fu_688_ce),
    .dout(grp_fu_688_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end else if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter19 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0))) begin
        chi_0_i_i_reg_242 <= select_ln34_1_reg_839;
    end else if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        chi_0_i_i_reg_242 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0))) begin
        col_0_i_i_reg_220 <= select_ln32_1_reg_778;
    end else if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        col_0_i_i_reg_220 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0))) begin
        indvar_flatten17_reg_231 <= select_ln34_3_reg_882;
    end else if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten17_reg_231 <= 96'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0))) begin
        indvar_flatten47_reg_209 <= add_ln32_reg_762;
    end else if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten47_reg_209 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0))) begin
        indvar_flatten_reg_253 <= select_ln36_2_reg_877;
    end else if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_253 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0))) begin
        kc_0_i_i_reg_275 <= kc_reg_872;
    end else if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kc_0_i_i_reg_275 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0))) begin
        kr_0_i_i_reg_264 <= select_ln36_1_reg_798;
    end else if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        kr_0_i_i_reg_264 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln32_reg_758 == 1'd0))) begin
        In_buffer_length_loa_reg_849 <= In_buffer_length;
        add_ln43_3_reg_862 <= add_ln43_3_fu_651_p2;
        add_ln43_4_reg_867 <= add_ln43_4_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln32_reg_762 <= add_ln32_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_fu_347_p2 == 1'd0))) begin
        add_ln34_1_reg_834 <= add_ln34_1_fu_570_p2;
        add_ln36_1_reg_829 <= add_ln36_1_fu_564_p2;
        add_ln42_reg_803 <= add_ln42_fu_492_p2;
        icmp_ln34_reg_767 <= icmp_ln34_fu_358_p2;
        mul_ln43_1_reg_814 <= mul_ln43_1_fu_510_p2;
        mul_ln43_2_reg_819 <= mul_ln43_2_fu_528_p2;
        or_ln34_reg_788 <= or_ln34_fu_413_p2;
        select_ln32_3_reg_783 <= select_ln32_3_fu_406_p3;
        select_ln32_reg_772 <= select_ln32_fu_363_p3;
        select_ln36_reg_793 <= select_ln36_fu_452_p3;
        tmp_0_i_i_reg_809 <= tmp_0_i_i_fu_498_p2;
        tmp_3_i_i_reg_824 <= tmp_3_i_i_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        bound22_reg_742 <= bound22_fu_331_p2;
        icmp_ln36_reg_753 <= icmp_ln36_fu_342_p2;
        icmp_ln38_reg_747 <= icmp_ln38_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound4_reg_736 <= bound4_fu_312_p2;
        bound_reg_730 <= bound_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln32_reg_758 <= icmp_ln32_fu_347_p2;
        icmp_ln32_reg_758_pp0_iter10_reg <= icmp_ln32_reg_758_pp0_iter9_reg;
        icmp_ln32_reg_758_pp0_iter11_reg <= icmp_ln32_reg_758_pp0_iter10_reg;
        icmp_ln32_reg_758_pp0_iter12_reg <= icmp_ln32_reg_758_pp0_iter11_reg;
        icmp_ln32_reg_758_pp0_iter13_reg <= icmp_ln32_reg_758_pp0_iter12_reg;
        icmp_ln32_reg_758_pp0_iter14_reg <= icmp_ln32_reg_758_pp0_iter13_reg;
        icmp_ln32_reg_758_pp0_iter15_reg <= icmp_ln32_reg_758_pp0_iter14_reg;
        icmp_ln32_reg_758_pp0_iter16_reg <= icmp_ln32_reg_758_pp0_iter15_reg;
        icmp_ln32_reg_758_pp0_iter17_reg <= icmp_ln32_reg_758_pp0_iter16_reg;
        icmp_ln32_reg_758_pp0_iter18_reg <= icmp_ln32_reg_758_pp0_iter17_reg;
        icmp_ln32_reg_758_pp0_iter1_reg <= icmp_ln32_reg_758;
        icmp_ln32_reg_758_pp0_iter2_reg <= icmp_ln32_reg_758_pp0_iter1_reg;
        icmp_ln32_reg_758_pp0_iter3_reg <= icmp_ln32_reg_758_pp0_iter2_reg;
        icmp_ln32_reg_758_pp0_iter4_reg <= icmp_ln32_reg_758_pp0_iter3_reg;
        icmp_ln32_reg_758_pp0_iter5_reg <= icmp_ln32_reg_758_pp0_iter4_reg;
        icmp_ln32_reg_758_pp0_iter6_reg <= icmp_ln32_reg_758_pp0_iter5_reg;
        icmp_ln32_reg_758_pp0_iter7_reg <= icmp_ln32_reg_758_pp0_iter6_reg;
        icmp_ln32_reg_758_pp0_iter8_reg <= icmp_ln32_reg_758_pp0_iter7_reg;
        icmp_ln32_reg_758_pp0_iter9_reg <= icmp_ln32_reg_758_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln32_reg_758 == 1'd0))) begin
        kc_reg_872 <= kc_fu_667_p2;
        select_ln34_1_reg_839 <= select_ln34_1_fu_581_p3;
        select_ln34_3_reg_882 <= select_ln34_3_fu_678_p3;
        select_ln36_2_reg_877 <= select_ln36_2_fu_672_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_fu_347_p2 == 1'd0))) begin
        select_ln32_1_reg_778 <= select_ln32_1_fu_377_p3;
        select_ln36_1_reg_798 <= select_ln36_1_fu_460_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0))) begin
        tmp_76_reg_902 <= In_buf_q1;
        tmp_reg_897 <= In_buf_q0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter18 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            In_buf_address0 = sext_ln43_2_fu_702_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            In_buf_address0 = sext_ln43_fu_692_p1;
        end else begin
            In_buf_address0 = 'bx;
        end
    end else begin
        In_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter18 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            In_buf_address1 = sext_ln43_3_fu_707_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            In_buf_address1 = sext_ln43_1_fu_697_p1;
        end else begin
            In_buf_address1 = 'bx;
        end
    end else begin
        In_buf_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        In_buf_ce0 = 1'b1;
    end else begin
        In_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        In_buf_ce1 = 1'b1;
    end else begin
        In_buf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        In_next_0_0_V_blk_n = In_next_0_0_V_full_n;
    end else begin
        In_next_0_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0))) begin
        In_next_0_0_V_write = 1'b1;
    end else begin
        In_next_0_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        In_next_1_0_V_blk_n = In_next_1_0_V_full_n;
    end else begin
        In_next_1_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0))) begin
        In_next_1_0_V_write = 1'b1;
    end else begin
        In_next_1_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        In_next_2_0_V_blk_n = In_next_2_0_V_full_n;
    end else begin
        In_next_2_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0))) begin
        In_next_2_0_V_write = 1'b1;
    end else begin
        In_next_2_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        In_next_3_0_V_blk_n = In_next_3_0_V_full_n;
    end else begin
        In_next_3_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0))) begin
        In_next_3_0_V_write = 1'b1;
    end else begin
        In_next_3_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_347_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_chi_0_i_i_phi_fu_246_p4 = select_ln34_1_reg_839;
    end else begin
        ap_phi_mux_chi_0_i_i_phi_fu_246_p4 = chi_0_i_i_reg_242;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_col_0_i_i_phi_fu_224_p4 = select_ln32_1_reg_778;
    end else begin
        ap_phi_mux_col_0_i_i_phi_fu_224_p4 = col_0_i_i_reg_220;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten17_phi_fu_235_p4 = select_ln34_3_reg_882;
    end else begin
        ap_phi_mux_indvar_flatten17_phi_fu_235_p4 = indvar_flatten17_reg_231;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten47_phi_fu_213_p4 = add_ln32_reg_762;
    end else begin
        ap_phi_mux_indvar_flatten47_phi_fu_213_p4 = indvar_flatten47_reg_209;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_257_p4 = select_ln36_2_reg_877;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_257_p4 = indvar_flatten_reg_253;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_kc_0_i_i_phi_fu_279_p4 = kc_reg_872;
    end else begin
        ap_phi_mux_kc_0_i_i_phi_fu_279_p4 = kc_0_i_i_reg_275;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln32_reg_758 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_kr_0_i_i_phi_fu_268_p4 = select_ln36_1_reg_798;
    end else begin
        ap_phi_mux_kr_0_i_i_phi_fu_268_p4 = kr_0_i_i_reg_264;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_615_ce = 1'b1;
    end else begin
        grp_fu_615_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_636_ce = 1'b1;
    end else begin
        grp_fu_636_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_684_ce = 1'b1;
    end else begin
        grp_fu_684_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_688_ce = 1'b1;
    end else begin
        grp_fu_688_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_c_out1_blk_n = p_c_out1_full_n;
    end else begin
        p_c_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_c_out1_write = 1'b1;
    end else begin
        p_c_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_c_out_blk_n = p_c_out_full_n;
    end else begin
        p_c_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_c_out_write = 1'b1;
    end else begin
        p_c_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_chin_out2_blk_n = p_chin_out2_full_n;
    end else begin
        p_chin_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_chin_out2_write = 1'b1;
    end else begin
        p_chin_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_chin_out_blk_n = p_chin_out_full_n;
    end else begin
        p_chin_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_chin_out_write = 1'b1;
    end else begin
        p_chin_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_k_out3_blk_n = p_k_out3_full_n;
    end else begin
        p_k_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_k_out3_write = 1'b1;
    end else begin
        p_k_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        p_k_out_blk_n = p_k_out_full_n;
    end else begin
        p_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        p_k_out_write = 1'b1;
    end else begin
        p_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln32_fu_347_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln32_fu_347_p2 == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign In_next_0_0_V_din = tmp_reg_897;

assign In_next_1_0_V_din = tmp_76_reg_902;

assign In_next_2_0_V_din = In_buf_q0;

assign In_next_3_0_V_din = In_buf_q1;

assign add_ln32_1_fu_371_p2 = (31'd1 + ap_phi_mux_col_0_i_i_phi_fu_224_p4);

assign add_ln32_fu_352_p2 = (ap_phi_mux_indvar_flatten47_phi_fu_213_p4 + 128'd1);

assign add_ln34_1_fu_570_p2 = (96'd1 + ap_phi_mux_indvar_flatten17_phi_fu_235_p4);

assign add_ln36_1_fu_564_p2 = (64'd1 + ap_phi_mux_indvar_flatten_phi_fu_257_p4);

assign add_ln41_1_fu_522_p2 = (zext_ln36_fu_468_p1 + shl_ln41_fu_516_p2);

assign add_ln41_2_fu_546_p2 = (zext_ln36_fu_468_p1 + sub_ln41_fu_540_p2);

assign add_ln41_fu_504_p1 = p_s_s;

assign add_ln41_fu_504_p2 = ($signed(zext_ln36_fu_468_p1) + $signed(add_ln41_fu_504_p1));

assign add_ln42_fu_492_p2 = (select_ln36_fu_452_p3 + mul_ln42_fu_476_p2);

assign add_ln43_3_fu_651_p2 = (tmp1_2_i_i_fu_646_p2 + add_ln43_fu_599_p2);

assign add_ln43_4_fu_661_p2 = (tmp1_3_i_i_fu_657_p2 + add_ln43_fu_599_p2);

assign add_ln43_fu_599_p2 = (zext_ln34_fu_587_p1 + In_buffer_start);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter19 == 1'b1) & (((1'b0 == In_next_3_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_2_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_1_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_0_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter19 == 1'b1) & (((1'b0 == In_next_3_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_2_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_1_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_0_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter19 == 1'b1) & (((1'b0 == In_next_3_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_2_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_1_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_0_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0));
end

assign ap_block_state20_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_pp0_stage0_iter19 = (((1'b0 == In_next_3_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_2_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_1_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)) | ((1'b0 == In_next_0_0_V_full_n) & (icmp_ln32_reg_758_pp0_iter18_reg == 1'd0)));
end

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign bound22_fu_331_p0 = bound22_fu_331_p00;

assign bound22_fu_331_p00 = bound4_reg_736;

assign bound22_fu_331_p1 = bound22_fu_331_p10;

assign bound22_fu_331_p10 = p_c_s;

assign bound22_fu_331_p2 = (bound22_fu_331_p0 * bound22_fu_331_p1);

assign bound4_fu_312_p0 = bound4_fu_312_p00;

assign bound4_fu_312_p00 = bound_fu_298_p2;

assign bound4_fu_312_p1 = bound4_fu_312_p10;

assign bound4_fu_312_p10 = $unsigned(cast2_fu_304_p0);

assign bound4_fu_312_p2 = (bound4_fu_312_p0 * bound4_fu_312_p1);

assign bound_fu_298_p0 = cast_fu_294_p1;

assign bound_fu_298_p1 = cast_fu_294_p1;

assign bound_fu_298_p2 = (bound_fu_298_p0 * bound_fu_298_p1);

assign cast2_fu_304_p0 = p_chin_s;

assign cast_fu_294_p1 = p_k_s;

assign chi_fu_576_p2 = (31'd1 + select_ln32_reg_772);

assign grp_fu_615_p0 = (tmp1_0_i_i_fu_595_p2 + add_ln43_fu_599_p2);

assign grp_fu_636_p0 = (tmp1_1_i_i_fu_625_p2 + add_ln43_fu_599_p2);

assign icmp_ln32_fu_347_p2 = ((ap_phi_mux_indvar_flatten47_phi_fu_213_p4 == bound22_reg_742) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_358_p2 = ((ap_phi_mux_indvar_flatten17_phi_fu_235_p4 == bound4_reg_736) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_401_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_257_p4 == bound_reg_730) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_342_p2 = ((bound_reg_730 == 64'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_1_fu_389_p2 = ((ap_phi_mux_kc_0_i_i_phi_fu_279_p4 == p_k_s) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_337_p2 = ((p_k_s == 32'd0) ? 1'b1 : 1'b0);

assign kc_fu_667_p2 = (32'd1 + select_ln36_reg_793);

assign kr_fu_434_p2 = (31'd1 + select_ln34_fu_419_p3);

assign mul_ln42_fu_476_p0 = mul_ln42_fu_476_p00;

assign mul_ln42_fu_476_p00 = select_ln32_1_fu_377_p3;

assign mul_ln42_fu_476_p1 = p_s_s;

assign mul_ln42_fu_476_p2 = ($signed({{1'b0}, {mul_ln42_fu_476_p0}}) * $signed(mul_ln42_fu_476_p1));

assign mul_ln43_1_fu_510_p1 = p_cin_s;

assign mul_ln43_1_fu_510_p2 = ($signed(add_ln41_fu_504_p2) * $signed(mul_ln43_1_fu_510_p1));

assign mul_ln43_2_fu_528_p1 = p_cin_s;

assign mul_ln43_2_fu_528_p2 = ($signed(add_ln41_1_fu_522_p2) * $signed(mul_ln43_2_fu_528_p1));

assign mul_ln43_3_fu_552_p1 = p_cin_s;

assign mul_ln43_3_fu_552_p2 = ($signed(add_ln41_2_fu_546_p2) * $signed(mul_ln43_3_fu_552_p1));

assign mul_ln43_fu_486_p0 = zext_ln36_fu_468_p1;

assign mul_ln43_fu_486_p1 = p_cin_s;

assign mul_ln43_fu_486_p2 = ($signed({{1'b0}, {mul_ln43_fu_486_p0}}) * $signed(mul_ln43_fu_486_p1));

assign or_ln34_fu_413_p2 = (select_ln32_3_fu_406_p3 | icmp_ln34_fu_358_p2);

assign or_ln36_1_fu_446_p2 = (or_ln36_fu_440_p2 | icmp_ln34_fu_358_p2);

assign or_ln36_fu_440_p2 = (select_ln34_2_fu_427_p3 | select_ln32_3_fu_406_p3);

assign p_c_out1_din = p_c_s;

assign p_c_out_din = p_c_s;

assign p_chin_out2_din = p_chin_s;

assign p_chin_out_din = p_chin_s;

assign p_k_out3_din = p_k_s;

assign p_k_out_din = p_k_s;

assign select_ln32_1_fu_377_p3 = ((icmp_ln34_fu_358_p2[0:0] === 1'b1) ? add_ln32_1_fu_371_p2 : ap_phi_mux_col_0_i_i_phi_fu_224_p4);

assign select_ln32_2_fu_394_p3 = ((icmp_ln34_fu_358_p2[0:0] === 1'b1) ? icmp_ln38_reg_747 : icmp_ln38_1_fu_389_p2);

assign select_ln32_3_fu_406_p3 = ((icmp_ln34_fu_358_p2[0:0] === 1'b1) ? icmp_ln36_reg_753 : icmp_ln36_1_fu_401_p2);

assign select_ln32_fu_363_p3 = ((icmp_ln34_fu_358_p2[0:0] === 1'b1) ? 31'd0 : ap_phi_mux_chi_0_i_i_phi_fu_246_p4);

assign select_ln34_1_fu_581_p3 = ((select_ln32_3_reg_783[0:0] === 1'b1) ? chi_fu_576_p2 : select_ln32_reg_772);

assign select_ln34_2_fu_427_p3 = ((select_ln32_3_fu_406_p3[0:0] === 1'b1) ? icmp_ln38_reg_747 : select_ln32_2_fu_394_p3);

assign select_ln34_3_fu_678_p3 = ((icmp_ln34_reg_767[0:0] === 1'b1) ? 96'd1 : add_ln34_1_reg_834);

assign select_ln34_fu_419_p3 = ((or_ln34_fu_413_p2[0:0] === 1'b1) ? 31'd0 : ap_phi_mux_kr_0_i_i_phi_fu_268_p4);

assign select_ln36_1_fu_460_p3 = ((select_ln34_2_fu_427_p3[0:0] === 1'b1) ? kr_fu_434_p2 : select_ln34_fu_419_p3);

assign select_ln36_2_fu_672_p3 = ((or_ln34_reg_788[0:0] === 1'b1) ? 64'd1 : add_ln36_1_reg_829);

assign select_ln36_fu_452_p3 = ((or_ln36_1_fu_446_p2[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_kc_0_i_i_phi_fu_279_p4);

assign sext_ln43_1_fu_697_p1 = $signed(grp_fu_636_p2);

assign sext_ln43_2_fu_702_p1 = $signed(grp_fu_684_p2);

assign sext_ln43_3_fu_707_p1 = $signed(grp_fu_688_p2);

assign sext_ln43_fu_692_p1 = $signed(grp_fu_615_p2);

assign shl_ln41_1_fu_534_p0 = p_s_s;

assign shl_ln41_1_fu_534_p2 = shl_ln41_1_fu_534_p0 << 32'd2;

assign shl_ln41_fu_516_p0 = p_s_s;

assign shl_ln41_fu_516_p2 = shl_ln41_fu_516_p0 << 32'd1;

assign start_out = real_start;

assign sub_ln41_fu_540_p1 = p_s_s;

assign sub_ln41_fu_540_p2 = ($signed(shl_ln41_1_fu_534_p2) - $signed(sub_ln41_fu_540_p1));

assign tmp1_0_i_i_fu_595_p1 = p_chin_s;

assign tmp1_0_i_i_fu_595_p2 = ($signed(tmp_0_i_i_reg_809) * $signed(tmp1_0_i_i_fu_595_p1));

assign tmp1_1_i_i_fu_625_p1 = p_chin_s;

assign tmp1_1_i_i_fu_625_p2 = ($signed(tmp_1_i_i_fu_621_p2) * $signed(tmp1_1_i_i_fu_625_p1));

assign tmp1_2_i_i_fu_646_p1 = p_chin_s;

assign tmp1_2_i_i_fu_646_p2 = ($signed(tmp_2_i_i_fu_642_p2) * $signed(tmp1_2_i_i_fu_646_p1));

assign tmp1_3_i_i_fu_657_p1 = p_chin_s;

assign tmp1_3_i_i_fu_657_p2 = ($signed(tmp_3_i_i_reg_824) * $signed(tmp1_3_i_i_fu_657_p1));

assign tmp_0_i_i_fu_498_p2 = (mul_ln43_fu_486_p2 + add_ln42_fu_492_p2);

assign tmp_1_i_i_fu_621_p2 = (mul_ln43_1_reg_814 + add_ln42_reg_803);

assign tmp_2_i_i_fu_642_p2 = (mul_ln43_2_reg_819 + add_ln42_reg_803);

assign tmp_3_i_i_fu_558_p2 = (mul_ln43_3_fu_552_p2 + add_ln42_fu_492_p2);

assign zext_ln34_fu_587_p1 = select_ln34_1_fu_581_p3;

assign zext_ln36_fu_468_p1 = select_ln36_1_fu_460_p3;

endmodule //Load_In_ALL
