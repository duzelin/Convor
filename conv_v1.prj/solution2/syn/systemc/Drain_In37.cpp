// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Drain_In37.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Drain_In37::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Drain_In37::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> Drain_In37::ap_ST_fsm_state1 = "1";
const sc_lv<5> Drain_In37::ap_ST_fsm_state2 = "10";
const sc_lv<5> Drain_In37::ap_ST_fsm_state3 = "100";
const sc_lv<5> Drain_In37::ap_ST_fsm_pp0_stage0 = "1000";
const sc_lv<5> Drain_In37::ap_ST_fsm_state6 = "10000";
const sc_lv<32> Drain_In37::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Drain_In37::ap_const_boolean_1 = true;
const sc_lv<32> Drain_In37::ap_const_lv32_3 = "11";
const bool Drain_In37::ap_const_boolean_0 = false;
const sc_lv<1> Drain_In37::ap_const_lv1_0 = "0";
const sc_lv<32> Drain_In37::ap_const_lv32_1 = "1";
const sc_lv<32> Drain_In37::ap_const_lv32_2 = "10";
const sc_lv<1> Drain_In37::ap_const_lv1_1 = "1";
const sc_lv<128> Drain_In37::ap_const_lv128_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<128> Drain_In37::ap_const_lv128_lc_2 = "1";
const sc_lv<32> Drain_In37::ap_const_lv32_4 = "100";

Drain_In37::Drain_In37(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_In_pre_V4_blk_n);
    sensitive << ( In_pre_V4_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln147_reg_163 );

    SC_METHOD(thread_In_pre_V4_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln147_reg_163 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_add_ln147_fu_132_p2);
    sensitive << ( indvar_flatten31_reg_82 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( In_pre_V4_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln147_reg_163 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( In_pre_V4_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln147_reg_163 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( p_c_s_empty_n );
    sensitive << ( p_chin_s_empty_n );
    sensitive << ( p_k_s_empty_n );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter1);
    sensitive << ( In_pre_V4_empty_n );
    sensitive << ( icmp_ln147_reg_163 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state4);
    sensitive << ( icmp_ln147_fu_127_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_bound16_fu_121_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( bound16_fu_121_p00 );

    SC_METHOD(thread_bound16_fu_121_p00);
    sensitive << ( bound4_reg_153 );

    SC_METHOD(thread_bound16_fu_121_p1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( bound16_fu_121_p10 );

    SC_METHOD(thread_bound16_fu_121_p10);
    sensitive << ( p_c_read_reg_138 );

    SC_METHOD(thread_bound16_fu_121_p2);
    sensitive << ( bound16_fu_121_p0 );
    sensitive << ( bound16_fu_121_p1 );

    SC_METHOD(thread_bound4_fu_109_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound4_fu_109_p00 );

    SC_METHOD(thread_bound4_fu_109_p00);
    sensitive << ( bound_fu_96_p2 );

    SC_METHOD(thread_bound4_fu_109_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound4_fu_109_p10 );

    SC_METHOD(thread_bound4_fu_109_p10);
    sensitive << ( p_chin_read_reg_143 );

    SC_METHOD(thread_bound4_fu_109_p2);
    sensitive << ( bound4_fu_109_p0 );
    sensitive << ( bound4_fu_109_p1 );

    SC_METHOD(thread_bound_fu_96_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( cast_fu_93_p1 );

    SC_METHOD(thread_bound_fu_96_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( cast_fu_93_p1 );

    SC_METHOD(thread_bound_fu_96_p2);
    sensitive << ( bound_fu_96_p0 );
    sensitive << ( bound_fu_96_p1 );

    SC_METHOD(thread_cast_fu_93_p1);
    sensitive << ( p_k_read_reg_148 );

    SC_METHOD(thread_icmp_ln147_fu_127_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten31_reg_82 );
    sensitive << ( bound16_reg_158 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_p_c_s_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_c_s_empty_n );

    SC_METHOD(thread_p_c_s_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_c_s_empty_n );
    sensitive << ( p_chin_s_empty_n );
    sensitive << ( p_k_s_empty_n );

    SC_METHOD(thread_p_chin_s_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_chin_s_empty_n );

    SC_METHOD(thread_p_chin_s_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_c_s_empty_n );
    sensitive << ( p_chin_s_empty_n );
    sensitive << ( p_k_s_empty_n );

    SC_METHOD(thread_p_k_s_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_k_s_empty_n );

    SC_METHOD(thread_p_k_s_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_c_s_empty_n );
    sensitive << ( p_chin_s_empty_n );
    sensitive << ( p_k_s_empty_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_c_s_empty_n );
    sensitive << ( p_chin_s_empty_n );
    sensitive << ( p_k_s_empty_n );
    sensitive << ( icmp_ln147_fu_127_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Drain_In37_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, In_pre_V4_dout, "(port)In_pre_V4_dout");
    sc_trace(mVcdFile, In_pre_V4_empty_n, "(port)In_pre_V4_empty_n");
    sc_trace(mVcdFile, In_pre_V4_read, "(port)In_pre_V4_read");
    sc_trace(mVcdFile, p_c_s_dout, "(port)p_c_s_dout");
    sc_trace(mVcdFile, p_c_s_empty_n, "(port)p_c_s_empty_n");
    sc_trace(mVcdFile, p_c_s_read, "(port)p_c_s_read");
    sc_trace(mVcdFile, p_chin_s_dout, "(port)p_chin_s_dout");
    sc_trace(mVcdFile, p_chin_s_empty_n, "(port)p_chin_s_empty_n");
    sc_trace(mVcdFile, p_chin_s_read, "(port)p_chin_s_read");
    sc_trace(mVcdFile, p_k_s_dout, "(port)p_k_s_dout");
    sc_trace(mVcdFile, p_k_s_empty_n, "(port)p_k_s_empty_n");
    sc_trace(mVcdFile, p_k_s_read, "(port)p_k_s_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, In_pre_V4_blk_n, "In_pre_V4_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln147_reg_163, "icmp_ln147_reg_163");
    sc_trace(mVcdFile, p_c_s_blk_n, "p_c_s_blk_n");
    sc_trace(mVcdFile, p_chin_s_blk_n, "p_chin_s_blk_n");
    sc_trace(mVcdFile, p_k_s_blk_n, "p_k_s_blk_n");
    sc_trace(mVcdFile, indvar_flatten31_reg_82, "indvar_flatten31_reg_82");
    sc_trace(mVcdFile, p_c_read_reg_138, "p_c_read_reg_138");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, p_chin_read_reg_143, "p_chin_read_reg_143");
    sc_trace(mVcdFile, p_k_read_reg_148, "p_k_read_reg_148");
    sc_trace(mVcdFile, bound4_fu_109_p2, "bound4_fu_109_p2");
    sc_trace(mVcdFile, bound4_reg_153, "bound4_reg_153");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, bound16_fu_121_p2, "bound16_fu_121_p2");
    sc_trace(mVcdFile, bound16_reg_158, "bound16_reg_158");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln147_fu_127_p2, "icmp_ln147_fu_127_p2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter0, "ap_block_state4_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter1, "ap_block_state5_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln147_fu_132_p2, "add_ln147_fu_132_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state4, "ap_condition_pp0_exit_iter0_state4");
    sc_trace(mVcdFile, bound_fu_96_p0, "bound_fu_96_p0");
    sc_trace(mVcdFile, cast_fu_93_p1, "cast_fu_93_p1");
    sc_trace(mVcdFile, bound_fu_96_p1, "bound_fu_96_p1");
    sc_trace(mVcdFile, bound_fu_96_p2, "bound_fu_96_p2");
    sc_trace(mVcdFile, bound4_fu_109_p0, "bound4_fu_109_p0");
    sc_trace(mVcdFile, bound4_fu_109_p1, "bound4_fu_109_p1");
    sc_trace(mVcdFile, bound16_fu_121_p0, "bound16_fu_121_p0");
    sc_trace(mVcdFile, bound16_fu_121_p1, "bound16_fu_121_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, bound16_fu_121_p00, "bound16_fu_121_p00");
    sc_trace(mVcdFile, bound16_fu_121_p10, "bound16_fu_121_p10");
    sc_trace(mVcdFile, bound4_fu_109_p00, "bound4_fu_109_p00");
    sc_trace(mVcdFile, bound4_fu_109_p10, "bound4_fu_109_p10");
#endif

    }
}

Drain_In37::~Drain_In37() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Drain_In37::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state4.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state4.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state4.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln147_fu_127_p2.read()))) {
        indvar_flatten31_reg_82 = add_ln147_fu_132_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        indvar_flatten31_reg_82 = ap_const_lv128_lc_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        bound16_reg_158 = bound16_fu_121_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        bound4_reg_153 = bound4_fu_109_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln147_reg_163 = icmp_ln147_fu_127_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_c_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_chin_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_k_s_empty_n.read())))) {
        p_c_read_reg_138 = p_c_s_dout.read();
        p_chin_read_reg_143 = p_chin_s_dout.read();
        p_k_read_reg_148 = p_k_s_dout.read();
    }
}

void Drain_In37::thread_In_pre_V4_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln147_reg_163.read(), ap_const_lv1_0))) {
        In_pre_V4_blk_n = In_pre_V4_empty_n.read();
    } else {
        In_pre_V4_blk_n = ap_const_logic_1;
    }
}

void Drain_In37::thread_In_pre_V4_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln147_reg_163.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        In_pre_V4_read = ap_const_logic_1;
    } else {
        In_pre_V4_read = ap_const_logic_0;
    }
}

void Drain_In37::thread_add_ln147_fu_132_p2() {
    add_ln147_fu_132_p2 = (!indvar_flatten31_reg_82.read().is_01() || !ap_const_lv128_lc_2.is_01())? sc_lv<128>(): (sc_biguint<128>(indvar_flatten31_reg_82.read()) + sc_biguint<128>(ap_const_lv128_lc_2));
}

void Drain_In37::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[3];
}

void Drain_In37::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Drain_In37::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Drain_In37::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Drain_In37::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[4];
}

void Drain_In37::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Drain_In37::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln147_reg_163.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, In_pre_V4_empty_n.read()));
}

void Drain_In37::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln147_reg_163.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, In_pre_V4_empty_n.read()));
}

void Drain_In37::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_c_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_chin_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_k_s_empty_n.read()));
}

void Drain_In37::thread_ap_block_state4_pp0_stage0_iter0() {
    ap_block_state4_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Drain_In37::thread_ap_block_state5_pp0_stage0_iter1() {
    ap_block_state5_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln147_reg_163.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, In_pre_V4_empty_n.read()));
}

void Drain_In37::thread_ap_condition_pp0_exit_iter0_state4() {
    if (esl_seteq<1,1,1>(icmp_ln147_fu_127_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state4 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state4 = ap_const_logic_0;
    }
}

void Drain_In37::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Drain_In37::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Drain_In37::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Drain_In37::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Drain_In37::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Drain_In37::thread_bound16_fu_121_p0() {
    bound16_fu_121_p0 =  (sc_lv<96>) (bound16_fu_121_p00.read());
}

void Drain_In37::thread_bound16_fu_121_p00() {
    bound16_fu_121_p00 = esl_zext<128,96>(bound4_reg_153.read());
}

void Drain_In37::thread_bound16_fu_121_p1() {
    bound16_fu_121_p1 =  (sc_lv<32>) (bound16_fu_121_p10.read());
}

void Drain_In37::thread_bound16_fu_121_p10() {
    bound16_fu_121_p10 = esl_zext<128,32>(p_c_read_reg_138.read());
}

void Drain_In37::thread_bound16_fu_121_p2() {
    bound16_fu_121_p2 = (!bound16_fu_121_p0.read().is_01() || !bound16_fu_121_p1.read().is_01())? sc_lv<128>(): sc_biguint<96>(bound16_fu_121_p0.read()) * sc_biguint<32>(bound16_fu_121_p1.read());
}

void Drain_In37::thread_bound4_fu_109_p0() {
    bound4_fu_109_p0 =  (sc_lv<64>) (bound4_fu_109_p00.read());
}

void Drain_In37::thread_bound4_fu_109_p00() {
    bound4_fu_109_p00 = esl_zext<96,64>(bound_fu_96_p2.read());
}

void Drain_In37::thread_bound4_fu_109_p1() {
    bound4_fu_109_p1 =  (sc_lv<32>) (bound4_fu_109_p10.read());
}

void Drain_In37::thread_bound4_fu_109_p10() {
    bound4_fu_109_p10 = esl_zext<96,32>(p_chin_read_reg_143.read());
}

void Drain_In37::thread_bound4_fu_109_p2() {
    bound4_fu_109_p2 = (!bound4_fu_109_p0.read().is_01() || !bound4_fu_109_p1.read().is_01())? sc_lv<96>(): sc_biguint<64>(bound4_fu_109_p0.read()) * sc_biguint<32>(bound4_fu_109_p1.read());
}

void Drain_In37::thread_bound_fu_96_p0() {
    bound_fu_96_p0 =  (sc_lv<32>) (cast_fu_93_p1.read());
}

void Drain_In37::thread_bound_fu_96_p1() {
    bound_fu_96_p1 =  (sc_lv<32>) (cast_fu_93_p1.read());
}

void Drain_In37::thread_bound_fu_96_p2() {
    bound_fu_96_p2 = (!bound_fu_96_p0.read().is_01() || !bound_fu_96_p1.read().is_01())? sc_lv<64>(): sc_biguint<32>(bound_fu_96_p0.read()) * sc_biguint<32>(bound_fu_96_p1.read());
}

void Drain_In37::thread_cast_fu_93_p1() {
    cast_fu_93_p1 = esl_zext<64,32>(p_k_read_reg_148.read());
}

void Drain_In37::thread_icmp_ln147_fu_127_p2() {
    icmp_ln147_fu_127_p2 = (!indvar_flatten31_reg_82.read().is_01() || !bound16_reg_158.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten31_reg_82.read() == bound16_reg_158.read());
}

void Drain_In37::thread_p_c_s_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_c_s_blk_n = p_c_s_empty_n.read();
    } else {
        p_c_s_blk_n = ap_const_logic_1;
    }
}

void Drain_In37::thread_p_c_s_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_c_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_chin_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_k_s_empty_n.read())))) {
        p_c_s_read = ap_const_logic_1;
    } else {
        p_c_s_read = ap_const_logic_0;
    }
}

void Drain_In37::thread_p_chin_s_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_chin_s_blk_n = p_chin_s_empty_n.read();
    } else {
        p_chin_s_blk_n = ap_const_logic_1;
    }
}

void Drain_In37::thread_p_chin_s_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_c_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_chin_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_k_s_empty_n.read())))) {
        p_chin_s_read = ap_const_logic_1;
    } else {
        p_chin_s_read = ap_const_logic_0;
    }
}

void Drain_In37::thread_p_k_s_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        p_k_s_blk_n = p_k_s_empty_n.read();
    } else {
        p_k_s_blk_n = ap_const_logic_1;
    }
}

void Drain_In37::thread_p_k_s_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_c_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_chin_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_k_s_empty_n.read())))) {
        p_k_s_read = ap_const_logic_1;
    } else {
        p_k_s_read = ap_const_logic_0;
    }
}

void Drain_In37::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, p_c_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_chin_s_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, p_k_s_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 8 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln147_fu_127_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln147_fu_127_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

