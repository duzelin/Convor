// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Write_C_buf (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Out_buf_address0,
        Out_buf_ce0,
        Out_buf_we0,
        Out_buf_d0,
        Out_buf_q0,
        m_axi_Out_ddr_AWVALID,
        m_axi_Out_ddr_AWREADY,
        m_axi_Out_ddr_AWADDR,
        m_axi_Out_ddr_AWID,
        m_axi_Out_ddr_AWLEN,
        m_axi_Out_ddr_AWSIZE,
        m_axi_Out_ddr_AWBURST,
        m_axi_Out_ddr_AWLOCK,
        m_axi_Out_ddr_AWCACHE,
        m_axi_Out_ddr_AWPROT,
        m_axi_Out_ddr_AWQOS,
        m_axi_Out_ddr_AWREGION,
        m_axi_Out_ddr_AWUSER,
        m_axi_Out_ddr_WVALID,
        m_axi_Out_ddr_WREADY,
        m_axi_Out_ddr_WDATA,
        m_axi_Out_ddr_WSTRB,
        m_axi_Out_ddr_WLAST,
        m_axi_Out_ddr_WID,
        m_axi_Out_ddr_WUSER,
        m_axi_Out_ddr_ARVALID,
        m_axi_Out_ddr_ARREADY,
        m_axi_Out_ddr_ARADDR,
        m_axi_Out_ddr_ARID,
        m_axi_Out_ddr_ARLEN,
        m_axi_Out_ddr_ARSIZE,
        m_axi_Out_ddr_ARBURST,
        m_axi_Out_ddr_ARLOCK,
        m_axi_Out_ddr_ARCACHE,
        m_axi_Out_ddr_ARPROT,
        m_axi_Out_ddr_ARQOS,
        m_axi_Out_ddr_ARREGION,
        m_axi_Out_ddr_ARUSER,
        m_axi_Out_ddr_RVALID,
        m_axi_Out_ddr_RREADY,
        m_axi_Out_ddr_RDATA,
        m_axi_Out_ddr_RLAST,
        m_axi_Out_ddr_RID,
        m_axi_Out_ddr_RUSER,
        m_axi_Out_ddr_RRESP,
        m_axi_Out_ddr_BVALID,
        m_axi_Out_ddr_BREADY,
        m_axi_Out_ddr_BRESP,
        m_axi_Out_ddr_BID,
        m_axi_Out_ddr_BUSER,
        Out_ddr_offset,
        Out_ddr_offset1,
        row,
        p_c_s,
        p_chout_s
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] Out_buf_address0;
output   Out_buf_ce0;
output   Out_buf_we0;
output  [31:0] Out_buf_d0;
input  [31:0] Out_buf_q0;
output   m_axi_Out_ddr_AWVALID;
input   m_axi_Out_ddr_AWREADY;
output  [31:0] m_axi_Out_ddr_AWADDR;
output  [0:0] m_axi_Out_ddr_AWID;
output  [31:0] m_axi_Out_ddr_AWLEN;
output  [2:0] m_axi_Out_ddr_AWSIZE;
output  [1:0] m_axi_Out_ddr_AWBURST;
output  [1:0] m_axi_Out_ddr_AWLOCK;
output  [3:0] m_axi_Out_ddr_AWCACHE;
output  [2:0] m_axi_Out_ddr_AWPROT;
output  [3:0] m_axi_Out_ddr_AWQOS;
output  [3:0] m_axi_Out_ddr_AWREGION;
output  [0:0] m_axi_Out_ddr_AWUSER;
output   m_axi_Out_ddr_WVALID;
input   m_axi_Out_ddr_WREADY;
output  [31:0] m_axi_Out_ddr_WDATA;
output  [3:0] m_axi_Out_ddr_WSTRB;
output   m_axi_Out_ddr_WLAST;
output  [0:0] m_axi_Out_ddr_WID;
output  [0:0] m_axi_Out_ddr_WUSER;
output   m_axi_Out_ddr_ARVALID;
input   m_axi_Out_ddr_ARREADY;
output  [31:0] m_axi_Out_ddr_ARADDR;
output  [0:0] m_axi_Out_ddr_ARID;
output  [31:0] m_axi_Out_ddr_ARLEN;
output  [2:0] m_axi_Out_ddr_ARSIZE;
output  [1:0] m_axi_Out_ddr_ARBURST;
output  [1:0] m_axi_Out_ddr_ARLOCK;
output  [3:0] m_axi_Out_ddr_ARCACHE;
output  [2:0] m_axi_Out_ddr_ARPROT;
output  [3:0] m_axi_Out_ddr_ARQOS;
output  [3:0] m_axi_Out_ddr_ARREGION;
output  [0:0] m_axi_Out_ddr_ARUSER;
input   m_axi_Out_ddr_RVALID;
output   m_axi_Out_ddr_RREADY;
input  [31:0] m_axi_Out_ddr_RDATA;
input   m_axi_Out_ddr_RLAST;
input  [0:0] m_axi_Out_ddr_RID;
input  [0:0] m_axi_Out_ddr_RUSER;
input  [1:0] m_axi_Out_ddr_RRESP;
input   m_axi_Out_ddr_BVALID;
output   m_axi_Out_ddr_BREADY;
input  [1:0] m_axi_Out_ddr_BRESP;
input  [0:0] m_axi_Out_ddr_BID;
input  [0:0] m_axi_Out_ddr_BUSER;
input  [29:0] Out_ddr_offset;
input  [63:0] Out_ddr_offset1;
input  [31:0] row;
input  [31:0] p_c_s;
input  [31:0] p_chout_s;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] Out_buf_address0;
reg Out_buf_ce0;
reg Out_buf_we0;
reg m_axi_Out_ddr_AWVALID;
reg m_axi_Out_ddr_WVALID;
reg m_axi_Out_ddr_BREADY;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    Out_ddr_blk_n_AW;
wire    ap_CS_fsm_state5;
reg    Out_ddr_blk_n_W;
wire    ap_CS_fsm_state6;
reg    Out_ddr_blk_n_B;
wire    ap_CS_fsm_state11;
wire   [63:0] sext_fu_180_p1;
reg   [63:0] sext_reg_373;
wire   [31:0] zext_ln293_fu_189_p1;
reg   [31:0] zext_ln293_reg_378;
wire    ap_CS_fsm_state2;
wire   [2:0] r_fu_198_p2;
reg   [2:0] r_reg_386;
wire  signed [31:0] mul_ln299_fu_204_p2;
reg  signed [31:0] mul_ln299_reg_391;
wire   [0:0] icmp_ln293_fu_193_p2;
wire   [30:0] c_fu_218_p2;
reg   [30:0] c_reg_399;
wire    ap_CS_fsm_state3;
wire  signed [9:0] trunc_ln299_fu_224_p1;
reg  signed [9:0] trunc_ln299_reg_404;
wire   [0:0] icmp_ln295_fu_213_p2;
reg   [31:0] Out_ddr_addr_reg_409;
wire    ap_CS_fsm_state4;
wire   [63:0] add_ln299_2_fu_263_p2;
reg   [63:0] add_ln299_2_reg_418;
wire   [0:0] icmp_ln297_fu_257_p2;
wire   [9:0] add_ln301_1_fu_328_p2;
reg   [9:0] add_ln301_1_reg_428;
wire   [31:0] cho_fu_334_p2;
reg   [31:0] cho_reg_433;
reg   [31:0] Out_buf_load_reg_438;
reg   [2:0] r_0_reg_132;
reg   [30:0] c_0_reg_143;
reg   [63:0] p_2_rec_reg_154;
reg   [31:0] cho_0_reg_165;
wire  signed [63:0] sext_ln299_fu_303_p1;
wire  signed [63:0] sext_ln301_fu_345_p1;
wire   [63:0] sum_fu_242_p2;
reg   [63:0] p_0_idx_fu_72;
wire   [63:0] p_1_idx8_fu_231_p2;
wire  signed [31:0] mul_ln299_fu_204_p0;
wire   [2:0] mul_ln299_fu_204_p1;
wire   [31:0] zext_ln295_fu_209_p1;
wire  signed [31:0] icmp_ln295_fu_213_p1;
wire   [63:0] sum1_fu_237_p2;
wire  signed [31:0] icmp_ln297_fu_257_p1;
wire  signed [31:0] mul_ln299_1_fu_269_p1;
wire   [31:0] mul_ln299_1_fu_269_p2;
wire  signed [31:0] trunc_ln299_2_fu_278_p0;
wire  signed [9:0] trunc_ln299_2_fu_278_p1;
wire   [9:0] trunc_ln299_3_fu_287_p1;
wire   [9:0] trunc_ln299_1_fu_274_p1;
wire   [9:0] add_ln299_fu_291_p2;
wire   [9:0] mul_ln299_2_fu_282_p2;
wire   [9:0] add_ln299_1_fu_297_p2;
wire  signed [31:0] mul_ln301_fu_308_p0;
wire   [2:0] mul_ln301_fu_308_p1;
wire  signed [31:0] mul_ln301_fu_308_p2;
wire  signed [31:0] mul_ln301_1_fu_313_p1;
wire   [31:0] mul_ln301_1_fu_313_p2;
wire   [9:0] add_ln301_fu_322_p2;
wire   [9:0] trunc_ln301_fu_318_p1;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln293_fu_193_p2 == 1'd1))) begin
        c_0_reg_143 <= 31'd0;
    end else if (((icmp_ln297_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_143 <= c_reg_399;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_Out_ddr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        cho_0_reg_165 <= cho_reg_433;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln295_fu_213_p2 == 1'd1))) begin
        cho_0_reg_165 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln297_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0_idx_fu_72 <= p_1_idx8_fu_231_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_0_idx_fu_72 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_Out_ddr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        p_2_rec_reg_154 <= add_ln299_2_reg_418;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln295_fu_213_p2 == 1'd1))) begin
        p_2_rec_reg_154 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln295_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_132 <= r_reg_386;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_132 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_Out_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        Out_buf_load_reg_438 <= Out_buf_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Out_ddr_addr_reg_409 <= sum_fu_242_p2;
        add_ln299_2_reg_418 <= add_ln299_2_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln297_fu_257_p2 == 1'd1))) begin
        add_ln301_1_reg_428 <= add_ln301_1_fu_328_p2;
        cho_reg_433 <= cho_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_399 <= c_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln293_fu_193_p2 == 1'd1))) begin
        mul_ln299_reg_391 <= mul_ln299_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_386 <= r_fu_198_p2;
        zext_ln293_reg_378[2 : 0] <= zext_ln293_fu_189_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sext_reg_373[29 : 0] <= sext_fu_180_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln295_fu_213_p2 == 1'd1))) begin
        trunc_ln299_reg_404 <= trunc_ln299_fu_224_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Out_buf_address0 = sext_ln301_fu_345_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Out_buf_address0 = sext_ln299_fu_303_p1;
    end else begin
        Out_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((m_axi_Out_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        Out_buf_ce0 = 1'b1;
    end else begin
        Out_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_Out_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        Out_buf_we0 = 1'b1;
    end else begin
        Out_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        Out_ddr_blk_n_AW = m_axi_Out_ddr_AWREADY;
    end else begin
        Out_ddr_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        Out_ddr_blk_n_B = m_axi_Out_ddr_BVALID;
    end else begin
        Out_ddr_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Out_ddr_blk_n_W = m_axi_Out_ddr_WREADY;
    end else begin
        Out_ddr_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln293_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln293_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_Out_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_Out_ddr_AWVALID = 1'b1;
    end else begin
        m_axi_Out_ddr_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_Out_ddr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_Out_ddr_BREADY = 1'b1;
    end else begin
        m_axi_Out_ddr_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_Out_ddr_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        m_axi_Out_ddr_WVALID = 1'b1;
    end else begin
        m_axi_Out_ddr_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln293_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln295_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln297_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_Out_ddr_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_Out_ddr_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((m_axi_Out_ddr_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Out_buf_d0 = 32'd0;

assign add_ln299_1_fu_297_p2 = (add_ln299_fu_291_p2 + mul_ln299_2_fu_282_p2);

assign add_ln299_2_fu_263_p2 = (p_2_rec_reg_154 + 64'd1);

assign add_ln299_fu_291_p2 = (trunc_ln299_3_fu_287_p1 + trunc_ln299_1_fu_274_p1);

assign add_ln301_1_fu_328_p2 = (add_ln301_fu_322_p2 + trunc_ln301_fu_318_p1);

assign add_ln301_fu_322_p2 = (trunc_ln299_3_fu_287_p1 + mul_ln299_2_fu_282_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign c_fu_218_p2 = (c_0_reg_143 + 31'd1);

assign cho_fu_334_p2 = (32'd1 + cho_0_reg_165);

assign icmp_ln293_fu_193_p2 = (($signed(zext_ln293_fu_189_p1) < $signed(row)) ? 1'b1 : 1'b0);

assign icmp_ln295_fu_213_p1 = p_c_s;

assign icmp_ln295_fu_213_p2 = (($signed(zext_ln295_fu_209_p1) < $signed(icmp_ln295_fu_213_p1)) ? 1'b1 : 1'b0);

assign icmp_ln297_fu_257_p1 = p_chout_s;

assign icmp_ln297_fu_257_p2 = (($signed(cho_0_reg_165) < $signed(icmp_ln297_fu_257_p1)) ? 1'b1 : 1'b0);

assign m_axi_Out_ddr_ARADDR = 32'd0;

assign m_axi_Out_ddr_ARBURST = 2'd0;

assign m_axi_Out_ddr_ARCACHE = 4'd0;

assign m_axi_Out_ddr_ARID = 1'd0;

assign m_axi_Out_ddr_ARLEN = 32'd0;

assign m_axi_Out_ddr_ARLOCK = 2'd0;

assign m_axi_Out_ddr_ARPROT = 3'd0;

assign m_axi_Out_ddr_ARQOS = 4'd0;

assign m_axi_Out_ddr_ARREGION = 4'd0;

assign m_axi_Out_ddr_ARSIZE = 3'd0;

assign m_axi_Out_ddr_ARUSER = 1'd0;

assign m_axi_Out_ddr_ARVALID = 1'b0;

assign m_axi_Out_ddr_AWADDR = Out_ddr_addr_reg_409;

assign m_axi_Out_ddr_AWBURST = 2'd0;

assign m_axi_Out_ddr_AWCACHE = 4'd0;

assign m_axi_Out_ddr_AWID = 1'd0;

assign m_axi_Out_ddr_AWLEN = 32'd1;

assign m_axi_Out_ddr_AWLOCK = 2'd0;

assign m_axi_Out_ddr_AWPROT = 3'd0;

assign m_axi_Out_ddr_AWQOS = 4'd0;

assign m_axi_Out_ddr_AWREGION = 4'd0;

assign m_axi_Out_ddr_AWSIZE = 3'd0;

assign m_axi_Out_ddr_AWUSER = 1'd0;

assign m_axi_Out_ddr_RREADY = 1'b0;

assign m_axi_Out_ddr_WDATA = Out_buf_load_reg_438;

assign m_axi_Out_ddr_WID = 1'd0;

assign m_axi_Out_ddr_WLAST = 1'b0;

assign m_axi_Out_ddr_WSTRB = 4'd15;

assign m_axi_Out_ddr_WUSER = 1'd0;

assign mul_ln299_1_fu_269_p1 = p_chout_s;

assign mul_ln299_1_fu_269_p2 = ($signed(mul_ln299_reg_391) * $signed(mul_ln299_1_fu_269_p1));

assign mul_ln299_2_fu_282_p2 = ($signed(trunc_ln299_2_fu_278_p1) * $signed(trunc_ln299_reg_404));

assign mul_ln299_fu_204_p0 = p_c_s;

assign mul_ln299_fu_204_p1 = zext_ln293_fu_189_p1;

assign mul_ln299_fu_204_p2 = ($signed(mul_ln299_fu_204_p0) * $signed({{1'b0}, {mul_ln299_fu_204_p1}}));

assign mul_ln301_1_fu_313_p1 = p_c_s;

assign mul_ln301_1_fu_313_p2 = ($signed(mul_ln301_fu_308_p2) * $signed(mul_ln301_1_fu_313_p1));

assign mul_ln301_fu_308_p0 = p_chout_s;

assign mul_ln301_fu_308_p1 = zext_ln293_reg_378;

assign mul_ln301_fu_308_p2 = ($signed(mul_ln301_fu_308_p0) * $signed({{1'b0}, {mul_ln301_fu_308_p1}}));

assign p_1_idx8_fu_231_p2 = (p_2_rec_reg_154 + p_0_idx_fu_72);

assign r_fu_198_p2 = (r_0_reg_132 + 3'd1);

assign sext_fu_180_p1 = Out_ddr_offset;

assign sext_ln299_fu_303_p1 = $signed(add_ln299_1_fu_297_p2);

assign sext_ln301_fu_345_p1 = $signed(add_ln301_1_reg_428);

assign sum1_fu_237_p2 = (p_1_idx8_fu_231_p2 + Out_ddr_offset1);

assign sum_fu_242_p2 = (sum1_fu_237_p2 + sext_reg_373);

assign trunc_ln299_1_fu_274_p1 = mul_ln299_1_fu_269_p2[9:0];

assign trunc_ln299_2_fu_278_p0 = p_chout_s;

assign trunc_ln299_2_fu_278_p1 = trunc_ln299_2_fu_278_p0[9:0];

assign trunc_ln299_3_fu_287_p1 = cho_0_reg_165[9:0];

assign trunc_ln299_fu_224_p1 = c_0_reg_143[9:0];

assign trunc_ln301_fu_318_p1 = mul_ln301_1_fu_313_p2[9:0];

assign zext_ln293_fu_189_p1 = r_0_reg_132;

assign zext_ln295_fu_209_p1 = c_0_reg_143;

always @ (posedge ap_clk) begin
    sext_reg_373[63:30] <= 34'b0000000000000000000000000000000000;
    zext_ln293_reg_378[31:3] <= 29'b00000000000000000000000000000;
end

endmodule //Write_C_buf
