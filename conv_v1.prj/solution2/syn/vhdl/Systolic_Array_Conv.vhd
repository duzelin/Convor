-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Systolic_Array_Conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    stride : IN STD_LOGIC_VECTOR (31 downto 0);
    padding : IN STD_LOGIC_VECTOR (31 downto 0);
    Rin : IN STD_LOGIC_VECTOR (31 downto 0);
    Cin : IN STD_LOGIC_VECTOR (31 downto 0);
    CHin : IN STD_LOGIC_VECTOR (31 downto 0);
    R : IN STD_LOGIC_VECTOR (31 downto 0);
    C : IN STD_LOGIC_VECTOR (31 downto 0);
    CHout : IN STD_LOGIC_VECTOR (31 downto 0);
    K : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of Systolic_Array_Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Systolic_Array_Conv,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.323000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=392,HLS_SYN_FF=44626,HLS_SYN_LUT=53040,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal In_ddr : STD_LOGIC_VECTOR (31 downto 0);
    signal W_ddr : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_ddr : STD_LOGIC_VECTOR (31 downto 0);
    signal p_chin_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_chout_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_r_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_c_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_cin_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_k_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_s_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_p_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_rinp_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_cinp_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal In_buffer_length : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal In_buffer_start : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal In_buffer_end : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Out_buf_row : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal In_buf_row : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Out_buf_cho : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal Out_buf_row_count : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr5_reg_762 : STD_LOGIC_VECTOR (29 downto 0);
    signal W_ddr3_reg_767 : STD_LOGIC_VECTOR (29 downto 0);
    signal In_ddr1_reg_772 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln336_2_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln336_2_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal flush_row_count_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal flush_row_count_reg_782 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_Read_W_buf_fu_311_ap_ready : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_ap_done : STD_LOGIC;
    signal add_ln337_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln337_reg_787 : STD_LOGIC_VECTOR (31 downto 0);
    signal reuse_row_count_fu_560_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal reuse_row_count_reg_792 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln364_fu_568_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln364_reg_797 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_read_row_count_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal new_read_row_count_reg_805 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln340_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_596_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_813 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln346_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln346_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln344_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_buf_cho_load_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Out_buf_row_load_1_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln351_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln358_fu_655_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln358_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln360_fu_694_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln360_reg_841 : STD_LOGIC_VECTOR (63 downto 0);
    signal In_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal In_buffer_ce0 : STD_LOGIC;
    signal In_buffer_we0 : STD_LOGIC;
    signal In_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal In_buffer_ce1 : STD_LOGIC;
    signal In_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_buffer_ce0 : STD_LOGIC;
    signal W_buffer_we0 : STD_LOGIC;
    signal W_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_buffer_ce1 : STD_LOGIC;
    signal W_buffer_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_buffer_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Out_buffer_ce0 : STD_LOGIC;
    signal Out_buffer_we0 : STD_LOGIC;
    signal Out_buffer_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_buffer_ce1 : STD_LOGIC;
    signal Out_buffer_we1 : STD_LOGIC;
    signal grp_PE_array_fu_246_In_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_PE_array_fu_246_In_buf_ce0 : STD_LOGIC;
    signal grp_PE_array_fu_246_In_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_array_fu_246_In_buf_we0 : STD_LOGIC;
    signal grp_PE_array_fu_246_In_buf_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_PE_array_fu_246_In_buf_ce1 : STD_LOGIC;
    signal grp_PE_array_fu_246_In_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_array_fu_246_In_buf_we1 : STD_LOGIC;
    signal grp_PE_array_fu_246_W_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_PE_array_fu_246_W_buf_ce0 : STD_LOGIC;
    signal grp_PE_array_fu_246_W_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_array_fu_246_W_buf_we0 : STD_LOGIC;
    signal grp_PE_array_fu_246_W_buf_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_PE_array_fu_246_W_buf_ce1 : STD_LOGIC;
    signal grp_PE_array_fu_246_W_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_array_fu_246_W_buf_we1 : STD_LOGIC;
    signal grp_PE_array_fu_246_Out_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_PE_array_fu_246_Out_buf_ce0 : STD_LOGIC;
    signal grp_PE_array_fu_246_Out_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_array_fu_246_Out_buf_we0 : STD_LOGIC;
    signal grp_PE_array_fu_246_Out_buf_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_PE_array_fu_246_Out_buf_ce1 : STD_LOGIC;
    signal grp_PE_array_fu_246_Out_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_PE_array_fu_246_Out_buf_we1 : STD_LOGIC;
    signal grp_PE_array_fu_246_ap_start : STD_LOGIC;
    signal grp_PE_array_fu_246_ap_done : STD_LOGIC;
    signal grp_PE_array_fu_246_ap_ready : STD_LOGIC;
    signal grp_PE_array_fu_246_ap_idle : STD_LOGIC;
    signal grp_PE_array_fu_246_ap_continue : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_ap_start : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_ap_done : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_ap_idle : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_ap_ready : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_In_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Read_In_buf_line_fu_275_In_buf_ce0 : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_In_buf_we0 : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_In_buf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWVALID : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WVALID : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WLAST : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARVALID : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_RREADY : STD_LOGIC;
    signal grp_Read_In_buf_line_fu_275_m_axi_In_ddr_BREADY : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_ap_start : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_ap_done : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_ap_idle : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_ap_ready : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_Out_buf_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Write_C_buf_fu_296_Out_buf_ce0 : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_Out_buf_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Write_C_buf_fu_296_Out_buf_ce1 : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_Out_buf_we1 : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_Out_buf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWVALID : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_WVALID : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_WLAST : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARVALID : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_RREADY : STD_LOGIC;
    signal grp_Write_C_buf_fu_296_m_axi_Out_ddr_BREADY : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_ap_start : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_ap_idle : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_W_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_Read_W_buf_fu_311_W_ce0 : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_W_we0 : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_W_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWVALID : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_WVALID : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_WLAST : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARVALID : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_RREADY : STD_LOGIC;
    signal grp_Read_W_buf_fu_311_m_axi_W_ddr_BREADY : STD_LOGIC;
    signal p_0_rec_reg_212 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal reuse_row_count_0_reg_224 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_0_reg_235 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_PE_array_fu_246_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_sync_grp_PE_array_fu_246_ap_ready : STD_LOGIC;
    signal ap_sync_grp_PE_array_fu_246_ap_done : STD_LOGIC;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_PE_array_fu_246_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_PE_array_fu_246_ap_done : STD_LOGIC := '0';
    signal grp_Read_In_buf_line_fu_275_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_Write_C_buf_fu_296_ap_start_reg : STD_LOGIC := '0';
    signal grp_Read_W_buf_fu_311_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln324_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln325_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln332_1_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln365_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln347_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln361_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln362_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln354_fu_734_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln325_fu_428_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln332_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln332_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln332_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln332_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln332_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln332_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln332_1_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln336_fu_488_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln336_fu_488_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln336_1_fu_494_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln336_1_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln336_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln336_1_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln337_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln364_fu_544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln364_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln364_fu_550_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln340_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln344_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln347_fu_615_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln347_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln347_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln358_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln358_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln360_fu_678_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln360_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln360_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln360_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln360_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln365_fu_711_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln365_fu_711_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln365_fu_711_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln365_1_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln365_1_fu_716_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component PE_array IS
    port (
        In_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        In_buf_ce0 : OUT STD_LOGIC;
        In_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        In_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        In_buf_we0 : OUT STD_LOGIC;
        In_buf_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        In_buf_ce1 : OUT STD_LOGIC;
        In_buf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        In_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        In_buf_we1 : OUT STD_LOGIC;
        W_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        W_buf_ce0 : OUT STD_LOGIC;
        W_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_buf_we0 : OUT STD_LOGIC;
        W_buf_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        W_buf_ce1 : OUT STD_LOGIC;
        W_buf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        W_buf_we1 : OUT STD_LOGIC;
        Out_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        Out_buf_ce0 : OUT STD_LOGIC;
        Out_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Out_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_buf_we0 : OUT STD_LOGIC;
        Out_buf_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        Out_buf_ce1 : OUT STD_LOGIC;
        Out_buf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Out_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_buf_we1 : OUT STD_LOGIC;
        row : IN STD_LOGIC_VECTOR (31 downto 0);
        cho : IN STD_LOGIC_VECTOR (31 downto 0);
        p_c_s : IN STD_LOGIC_VECTOR (31 downto 0);
        p_chin_s : IN STD_LOGIC_VECTOR (31 downto 0);
        p_k_s : IN STD_LOGIC_VECTOR (31 downto 0);
        p_s_s : IN STD_LOGIC_VECTOR (31 downto 0);
        In_buffer_start : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cin_s : IN STD_LOGIC_VECTOR (31 downto 0);
        In_buffer_length : IN STD_LOGIC_VECTOR (31 downto 0);
        p_chout_s : IN STD_LOGIC_VECTOR (31 downto 0);
        p_r_s : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_buf_cho : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        row_ap_vld : IN STD_LOGIC;
        cho_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        p_c_s_ap_vld : IN STD_LOGIC;
        p_chin_s_ap_vld : IN STD_LOGIC;
        p_k_s_ap_vld : IN STD_LOGIC;
        p_s_s_ap_vld : IN STD_LOGIC;
        In_buffer_start_ap_vld : IN STD_LOGIC;
        p_cin_s_ap_vld : IN STD_LOGIC;
        In_buffer_length_ap_vld : IN STD_LOGIC;
        p_chout_s_ap_vld : IN STD_LOGIC;
        p_r_s_ap_vld : IN STD_LOGIC;
        Out_buf_cho_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Read_In_buf_line IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        In_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        In_buf_ce0 : OUT STD_LOGIC;
        In_buf_we0 : OUT STD_LOGIC;
        In_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_In_ddr_AWREADY : IN STD_LOGIC;
        m_axi_In_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_In_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_In_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_WVALID : OUT STD_LOGIC;
        m_axi_In_ddr_WREADY : IN STD_LOGIC;
        m_axi_In_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_WLAST : OUT STD_LOGIC;
        m_axi_In_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_In_ddr_ARREADY : IN STD_LOGIC;
        m_axi_In_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_In_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_In_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_In_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_RVALID : IN STD_LOGIC;
        m_axi_In_ddr_RREADY : OUT STD_LOGIC;
        m_axi_In_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_In_ddr_RLAST : IN STD_LOGIC;
        m_axi_In_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_BVALID : IN STD_LOGIC;
        m_axi_In_ddr_BREADY : OUT STD_LOGIC;
        m_axi_In_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_In_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_In_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        In_ddr_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        row : IN STD_LOGIC_VECTOR (31 downto 0);
        p_p_s : IN STD_LOGIC_VECTOR (31 downto 0);
        p_cinp_s : IN STD_LOGIC_VECTOR (31 downto 0);
        p_chin_s : IN STD_LOGIC_VECTOR (31 downto 0);
        In_buffer_end : IN STD_LOGIC_VECTOR (31 downto 0);
        In_buffer_length : IN STD_LOGIC_VECTOR (31 downto 0);
        p_rinp_s : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Write_C_buf IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Out_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        Out_buf_ce0 : OUT STD_LOGIC;
        Out_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Out_buf_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        Out_buf_ce1 : OUT STD_LOGIC;
        Out_buf_we1 : OUT STD_LOGIC;
        Out_buf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_Out_ddr_AWREADY : IN STD_LOGIC;
        m_axi_Out_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Out_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Out_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_WVALID : OUT STD_LOGIC;
        m_axi_Out_ddr_WREADY : IN STD_LOGIC;
        m_axi_Out_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_WLAST : OUT STD_LOGIC;
        m_axi_Out_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_Out_ddr_ARREADY : IN STD_LOGIC;
        m_axi_Out_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Out_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_Out_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_Out_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_RVALID : IN STD_LOGIC;
        m_axi_Out_ddr_RREADY : OUT STD_LOGIC;
        m_axi_Out_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_Out_ddr_RLAST : IN STD_LOGIC;
        m_axi_Out_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_BVALID : IN STD_LOGIC;
        m_axi_Out_ddr_BREADY : OUT STD_LOGIC;
        m_axi_Out_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_Out_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_Out_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        Out_ddr_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        Out_ddr_offset1 : IN STD_LOGIC_VECTOR (63 downto 0);
        row : IN STD_LOGIC_VECTOR (31 downto 0);
        p_c_s : IN STD_LOGIC_VECTOR (31 downto 0);
        p_chout_s : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Read_W_buf IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        W_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        W_ce0 : OUT STD_LOGIC;
        W_we0 : OUT STD_LOGIC;
        W_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_AWVALID : OUT STD_LOGIC;
        m_axi_W_ddr_AWREADY : IN STD_LOGIC;
        m_axi_W_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_WVALID : OUT STD_LOGIC;
        m_axi_W_ddr_WREADY : IN STD_LOGIC;
        m_axi_W_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_WLAST : OUT STD_LOGIC;
        m_axi_W_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_ARVALID : OUT STD_LOGIC;
        m_axi_W_ddr_ARREADY : IN STD_LOGIC;
        m_axi_W_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_W_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_W_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RVALID : IN STD_LOGIC;
        m_axi_W_ddr_RREADY : OUT STD_LOGIC;
        m_axi_W_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_W_ddr_RLAST : IN STD_LOGIC;
        m_axi_W_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_BVALID : IN STD_LOGIC;
        m_axi_W_ddr_BREADY : OUT STD_LOGIC;
        m_axi_W_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_W_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_W_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        W_ddr_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        length_r : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Systolic_Array_Cotde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Systolic_Array_Covdy IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Systolic_Array_Conv_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        In_ddr : OUT STD_LOGIC_VECTOR (31 downto 0);
        W_ddr : OUT STD_LOGIC_VECTOR (31 downto 0);
        Out_ddr : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Systolic_Array_Conv_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    Systolic_Array_Conv_AXILiteS_s_axi_U : component Systolic_Array_Conv_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        In_ddr => In_ddr,
        W_ddr => W_ddr,
        Out_ddr => Out_ddr);

    Systolic_Array_Conv_gmem_m_axi_U : component Systolic_Array_Conv_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWADDR,
        I_AWID => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWID,
        I_AWLEN => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWLEN,
        I_AWSIZE => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWSIZE,
        I_AWLOCK => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWLOCK,
        I_AWCACHE => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWCACHE,
        I_AWQOS => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWQOS,
        I_AWPROT => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWPROT,
        I_AWUSER => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWUSER,
        I_AWBURST => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWBURST,
        I_AWREGION => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WDATA,
        I_WID => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WID,
        I_WUSER => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WUSER,
        I_WLAST => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WLAST,
        I_WSTRB => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    In_buffer_U : component Systolic_Array_Cotde
    generic map (
        DataWidth => 32,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => In_buffer_address0,
        ce0 => In_buffer_ce0,
        we0 => In_buffer_we0,
        d0 => grp_Read_In_buf_line_fu_275_In_buf_d0,
        q0 => In_buffer_q0,
        address1 => grp_PE_array_fu_246_In_buf_address1,
        ce1 => In_buffer_ce1,
        q1 => In_buffer_q1);

    W_buffer_U : component Systolic_Array_Cotde
    generic map (
        DataWidth => 32,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => W_buffer_address0,
        ce0 => W_buffer_ce0,
        we0 => W_buffer_we0,
        d0 => grp_Read_W_buf_fu_311_W_d0,
        q0 => W_buffer_q0,
        address1 => grp_PE_array_fu_246_W_buf_address1,
        ce1 => W_buffer_ce1,
        q1 => W_buffer_q1);

    Out_buffer_U : component Systolic_Array_Covdy
    generic map (
        DataWidth => 32,
        AddressRange => 500,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Out_buffer_address0,
        ce0 => Out_buffer_ce0,
        we0 => Out_buffer_we0,
        d0 => grp_PE_array_fu_246_Out_buf_d0,
        q0 => Out_buffer_q0,
        address1 => grp_Write_C_buf_fu_296_Out_buf_address1,
        ce1 => Out_buffer_ce1,
        we1 => Out_buffer_we1,
        d1 => grp_Write_C_buf_fu_296_Out_buf_d1);

    grp_PE_array_fu_246 : component PE_array
    port map (
        In_buf_address0 => grp_PE_array_fu_246_In_buf_address0,
        In_buf_ce0 => grp_PE_array_fu_246_In_buf_ce0,
        In_buf_d0 => grp_PE_array_fu_246_In_buf_d0,
        In_buf_q0 => In_buffer_q0,
        In_buf_we0 => grp_PE_array_fu_246_In_buf_we0,
        In_buf_address1 => grp_PE_array_fu_246_In_buf_address1,
        In_buf_ce1 => grp_PE_array_fu_246_In_buf_ce1,
        In_buf_d1 => grp_PE_array_fu_246_In_buf_d1,
        In_buf_q1 => In_buffer_q1,
        In_buf_we1 => grp_PE_array_fu_246_In_buf_we1,
        W_buf_address0 => grp_PE_array_fu_246_W_buf_address0,
        W_buf_ce0 => grp_PE_array_fu_246_W_buf_ce0,
        W_buf_d0 => grp_PE_array_fu_246_W_buf_d0,
        W_buf_q0 => W_buffer_q0,
        W_buf_we0 => grp_PE_array_fu_246_W_buf_we0,
        W_buf_address1 => grp_PE_array_fu_246_W_buf_address1,
        W_buf_ce1 => grp_PE_array_fu_246_W_buf_ce1,
        W_buf_d1 => grp_PE_array_fu_246_W_buf_d1,
        W_buf_q1 => W_buffer_q1,
        W_buf_we1 => grp_PE_array_fu_246_W_buf_we1,
        Out_buf_address0 => grp_PE_array_fu_246_Out_buf_address0,
        Out_buf_ce0 => grp_PE_array_fu_246_Out_buf_ce0,
        Out_buf_d0 => grp_PE_array_fu_246_Out_buf_d0,
        Out_buf_q0 => ap_const_lv32_0,
        Out_buf_we0 => grp_PE_array_fu_246_Out_buf_we0,
        Out_buf_address1 => grp_PE_array_fu_246_Out_buf_address1,
        Out_buf_ce1 => grp_PE_array_fu_246_Out_buf_ce1,
        Out_buf_d1 => grp_PE_array_fu_246_Out_buf_d1,
        Out_buf_q1 => ap_const_lv32_0,
        Out_buf_we1 => grp_PE_array_fu_246_Out_buf_we1,
        row => Out_buf_row_load_1_reg_831,
        cho => Out_buf_cho_load_reg_823,
        p_c_s => p_c_s,
        p_chin_s => p_chin_s,
        p_k_s => p_k_s,
        p_s_s => p_s_s,
        In_buffer_start => In_buffer_start,
        p_cin_s => p_cin_s,
        In_buffer_length => In_buffer_length,
        p_chout_s => p_chout_s,
        p_r_s => p_r_s,
        Out_buf_cho => Out_buf_cho,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        row_ap_vld => ap_const_logic_1,
        cho_ap_vld => ap_const_logic_1,
        ap_start => grp_PE_array_fu_246_ap_start,
        p_c_s_ap_vld => ap_const_logic_1,
        p_chin_s_ap_vld => ap_const_logic_1,
        p_k_s_ap_vld => ap_const_logic_1,
        p_s_s_ap_vld => ap_const_logic_1,
        In_buffer_start_ap_vld => ap_const_logic_1,
        p_cin_s_ap_vld => ap_const_logic_1,
        In_buffer_length_ap_vld => ap_const_logic_1,
        p_chout_s_ap_vld => ap_const_logic_1,
        p_r_s_ap_vld => ap_const_logic_1,
        Out_buf_cho_ap_vld => ap_const_logic_1,
        ap_done => grp_PE_array_fu_246_ap_done,
        ap_ready => grp_PE_array_fu_246_ap_ready,
        ap_idle => grp_PE_array_fu_246_ap_idle,
        ap_continue => grp_PE_array_fu_246_ap_continue);

    grp_Read_In_buf_line_fu_275 : component Read_In_buf_line
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Read_In_buf_line_fu_275_ap_start,
        ap_done => grp_Read_In_buf_line_fu_275_ap_done,
        ap_idle => grp_Read_In_buf_line_fu_275_ap_idle,
        ap_ready => grp_Read_In_buf_line_fu_275_ap_ready,
        In_buf_address0 => grp_Read_In_buf_line_fu_275_In_buf_address0,
        In_buf_ce0 => grp_Read_In_buf_line_fu_275_In_buf_ce0,
        In_buf_we0 => grp_Read_In_buf_line_fu_275_In_buf_we0,
        In_buf_d0 => grp_Read_In_buf_line_fu_275_In_buf_d0,
        m_axi_In_ddr_AWVALID => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWVALID,
        m_axi_In_ddr_AWREADY => ap_const_logic_0,
        m_axi_In_ddr_AWADDR => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWADDR,
        m_axi_In_ddr_AWID => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWID,
        m_axi_In_ddr_AWLEN => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWLEN,
        m_axi_In_ddr_AWSIZE => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWSIZE,
        m_axi_In_ddr_AWBURST => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWBURST,
        m_axi_In_ddr_AWLOCK => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWLOCK,
        m_axi_In_ddr_AWCACHE => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWCACHE,
        m_axi_In_ddr_AWPROT => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWPROT,
        m_axi_In_ddr_AWQOS => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWQOS,
        m_axi_In_ddr_AWREGION => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWREGION,
        m_axi_In_ddr_AWUSER => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_AWUSER,
        m_axi_In_ddr_WVALID => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WVALID,
        m_axi_In_ddr_WREADY => ap_const_logic_0,
        m_axi_In_ddr_WDATA => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WDATA,
        m_axi_In_ddr_WSTRB => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WSTRB,
        m_axi_In_ddr_WLAST => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WLAST,
        m_axi_In_ddr_WID => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WID,
        m_axi_In_ddr_WUSER => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_WUSER,
        m_axi_In_ddr_ARVALID => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARVALID,
        m_axi_In_ddr_ARREADY => gmem_ARREADY,
        m_axi_In_ddr_ARADDR => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARADDR,
        m_axi_In_ddr_ARID => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARID,
        m_axi_In_ddr_ARLEN => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARLEN,
        m_axi_In_ddr_ARSIZE => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARSIZE,
        m_axi_In_ddr_ARBURST => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARBURST,
        m_axi_In_ddr_ARLOCK => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARLOCK,
        m_axi_In_ddr_ARCACHE => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARCACHE,
        m_axi_In_ddr_ARPROT => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARPROT,
        m_axi_In_ddr_ARQOS => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARQOS,
        m_axi_In_ddr_ARREGION => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARREGION,
        m_axi_In_ddr_ARUSER => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARUSER,
        m_axi_In_ddr_RVALID => gmem_RVALID,
        m_axi_In_ddr_RREADY => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_RREADY,
        m_axi_In_ddr_RDATA => gmem_RDATA,
        m_axi_In_ddr_RLAST => gmem_RLAST,
        m_axi_In_ddr_RID => gmem_RID,
        m_axi_In_ddr_RUSER => gmem_RUSER,
        m_axi_In_ddr_RRESP => gmem_RRESP,
        m_axi_In_ddr_BVALID => ap_const_logic_0,
        m_axi_In_ddr_BREADY => grp_Read_In_buf_line_fu_275_m_axi_In_ddr_BREADY,
        m_axi_In_ddr_BRESP => ap_const_lv2_0,
        m_axi_In_ddr_BID => ap_const_lv1_0,
        m_axi_In_ddr_BUSER => ap_const_lv1_0,
        In_ddr_offset => In_ddr1_reg_772,
        row => add_ln346_reg_818,
        p_p_s => p_p_s,
        p_cinp_s => p_cinp_s,
        p_chin_s => p_chin_s,
        In_buffer_end => In_buffer_end,
        In_buffer_length => In_buffer_length,
        p_rinp_s => p_rinp_s);

    grp_Write_C_buf_fu_296 : component Write_C_buf
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Write_C_buf_fu_296_ap_start,
        ap_done => grp_Write_C_buf_fu_296_ap_done,
        ap_idle => grp_Write_C_buf_fu_296_ap_idle,
        ap_ready => grp_Write_C_buf_fu_296_ap_ready,
        Out_buf_address0 => grp_Write_C_buf_fu_296_Out_buf_address0,
        Out_buf_ce0 => grp_Write_C_buf_fu_296_Out_buf_ce0,
        Out_buf_q0 => Out_buffer_q0,
        Out_buf_address1 => grp_Write_C_buf_fu_296_Out_buf_address1,
        Out_buf_ce1 => grp_Write_C_buf_fu_296_Out_buf_ce1,
        Out_buf_we1 => grp_Write_C_buf_fu_296_Out_buf_we1,
        Out_buf_d1 => grp_Write_C_buf_fu_296_Out_buf_d1,
        m_axi_Out_ddr_AWVALID => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWVALID,
        m_axi_Out_ddr_AWREADY => gmem_AWREADY,
        m_axi_Out_ddr_AWADDR => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWADDR,
        m_axi_Out_ddr_AWID => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWID,
        m_axi_Out_ddr_AWLEN => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWLEN,
        m_axi_Out_ddr_AWSIZE => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWSIZE,
        m_axi_Out_ddr_AWBURST => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWBURST,
        m_axi_Out_ddr_AWLOCK => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWLOCK,
        m_axi_Out_ddr_AWCACHE => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWCACHE,
        m_axi_Out_ddr_AWPROT => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWPROT,
        m_axi_Out_ddr_AWQOS => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWQOS,
        m_axi_Out_ddr_AWREGION => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWREGION,
        m_axi_Out_ddr_AWUSER => grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWUSER,
        m_axi_Out_ddr_WVALID => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WVALID,
        m_axi_Out_ddr_WREADY => gmem_WREADY,
        m_axi_Out_ddr_WDATA => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WDATA,
        m_axi_Out_ddr_WSTRB => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WSTRB,
        m_axi_Out_ddr_WLAST => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WLAST,
        m_axi_Out_ddr_WID => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WID,
        m_axi_Out_ddr_WUSER => grp_Write_C_buf_fu_296_m_axi_Out_ddr_WUSER,
        m_axi_Out_ddr_ARVALID => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARVALID,
        m_axi_Out_ddr_ARREADY => ap_const_logic_0,
        m_axi_Out_ddr_ARADDR => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARADDR,
        m_axi_Out_ddr_ARID => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARID,
        m_axi_Out_ddr_ARLEN => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARLEN,
        m_axi_Out_ddr_ARSIZE => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARSIZE,
        m_axi_Out_ddr_ARBURST => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARBURST,
        m_axi_Out_ddr_ARLOCK => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARLOCK,
        m_axi_Out_ddr_ARCACHE => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARCACHE,
        m_axi_Out_ddr_ARPROT => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARPROT,
        m_axi_Out_ddr_ARQOS => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARQOS,
        m_axi_Out_ddr_ARREGION => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARREGION,
        m_axi_Out_ddr_ARUSER => grp_Write_C_buf_fu_296_m_axi_Out_ddr_ARUSER,
        m_axi_Out_ddr_RVALID => ap_const_logic_0,
        m_axi_Out_ddr_RREADY => grp_Write_C_buf_fu_296_m_axi_Out_ddr_RREADY,
        m_axi_Out_ddr_RDATA => ap_const_lv32_0,
        m_axi_Out_ddr_RLAST => ap_const_logic_0,
        m_axi_Out_ddr_RID => ap_const_lv1_0,
        m_axi_Out_ddr_RUSER => ap_const_lv1_0,
        m_axi_Out_ddr_RRESP => ap_const_lv2_0,
        m_axi_Out_ddr_BVALID => gmem_BVALID,
        m_axi_Out_ddr_BREADY => grp_Write_C_buf_fu_296_m_axi_Out_ddr_BREADY,
        m_axi_Out_ddr_BRESP => gmem_BRESP,
        m_axi_Out_ddr_BID => gmem_BID,
        m_axi_Out_ddr_BUSER => gmem_BUSER,
        Out_ddr_offset => Out_ddr5_reg_762,
        Out_ddr_offset1 => p_0_rec_reg_212,
        row => select_ln358_reg_836,
        p_c_s => p_c_s,
        p_chout_s => p_chout_s);

    grp_Read_W_buf_fu_311 : component Read_W_buf
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Read_W_buf_fu_311_ap_start,
        ap_done => grp_Read_W_buf_fu_311_ap_done,
        ap_idle => grp_Read_W_buf_fu_311_ap_idle,
        ap_ready => grp_Read_W_buf_fu_311_ap_ready,
        W_address0 => grp_Read_W_buf_fu_311_W_address0,
        W_ce0 => grp_Read_W_buf_fu_311_W_ce0,
        W_we0 => grp_Read_W_buf_fu_311_W_we0,
        W_d0 => grp_Read_W_buf_fu_311_W_d0,
        m_axi_W_ddr_AWVALID => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWVALID,
        m_axi_W_ddr_AWREADY => ap_const_logic_0,
        m_axi_W_ddr_AWADDR => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWADDR,
        m_axi_W_ddr_AWID => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWID,
        m_axi_W_ddr_AWLEN => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWLEN,
        m_axi_W_ddr_AWSIZE => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWSIZE,
        m_axi_W_ddr_AWBURST => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWBURST,
        m_axi_W_ddr_AWLOCK => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWLOCK,
        m_axi_W_ddr_AWCACHE => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWCACHE,
        m_axi_W_ddr_AWPROT => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWPROT,
        m_axi_W_ddr_AWQOS => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWQOS,
        m_axi_W_ddr_AWREGION => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWREGION,
        m_axi_W_ddr_AWUSER => grp_Read_W_buf_fu_311_m_axi_W_ddr_AWUSER,
        m_axi_W_ddr_WVALID => grp_Read_W_buf_fu_311_m_axi_W_ddr_WVALID,
        m_axi_W_ddr_WREADY => ap_const_logic_0,
        m_axi_W_ddr_WDATA => grp_Read_W_buf_fu_311_m_axi_W_ddr_WDATA,
        m_axi_W_ddr_WSTRB => grp_Read_W_buf_fu_311_m_axi_W_ddr_WSTRB,
        m_axi_W_ddr_WLAST => grp_Read_W_buf_fu_311_m_axi_W_ddr_WLAST,
        m_axi_W_ddr_WID => grp_Read_W_buf_fu_311_m_axi_W_ddr_WID,
        m_axi_W_ddr_WUSER => grp_Read_W_buf_fu_311_m_axi_W_ddr_WUSER,
        m_axi_W_ddr_ARVALID => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARVALID,
        m_axi_W_ddr_ARREADY => gmem_ARREADY,
        m_axi_W_ddr_ARADDR => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARADDR,
        m_axi_W_ddr_ARID => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARID,
        m_axi_W_ddr_ARLEN => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARLEN,
        m_axi_W_ddr_ARSIZE => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARSIZE,
        m_axi_W_ddr_ARBURST => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARBURST,
        m_axi_W_ddr_ARLOCK => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARLOCK,
        m_axi_W_ddr_ARCACHE => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARCACHE,
        m_axi_W_ddr_ARPROT => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARPROT,
        m_axi_W_ddr_ARQOS => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARQOS,
        m_axi_W_ddr_ARREGION => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARREGION,
        m_axi_W_ddr_ARUSER => grp_Read_W_buf_fu_311_m_axi_W_ddr_ARUSER,
        m_axi_W_ddr_RVALID => gmem_RVALID,
        m_axi_W_ddr_RREADY => grp_Read_W_buf_fu_311_m_axi_W_ddr_RREADY,
        m_axi_W_ddr_RDATA => gmem_RDATA,
        m_axi_W_ddr_RLAST => gmem_RLAST,
        m_axi_W_ddr_RID => gmem_RID,
        m_axi_W_ddr_RUSER => gmem_RUSER,
        m_axi_W_ddr_RRESP => gmem_RRESP,
        m_axi_W_ddr_BVALID => ap_const_logic_0,
        m_axi_W_ddr_BREADY => grp_Read_W_buf_fu_311_m_axi_W_ddr_BREADY,
        m_axi_W_ddr_BRESP => ap_const_lv2_0,
        m_axi_W_ddr_BID => ap_const_lv1_0,
        m_axi_W_ddr_BUSER => ap_const_lv1_0,
        W_ddr_offset => W_ddr3_reg_767,
        length_r => mul_ln336_2_reg_777);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_PE_array_fu_246_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_PE_array_fu_246_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_sync_reg_grp_PE_array_fu_246_ap_done <= ap_const_logic_0;
                elsif ((grp_PE_array_fu_246_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_PE_array_fu_246_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_PE_array_fu_246_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_PE_array_fu_246_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_sync_reg_grp_PE_array_fu_246_ap_ready <= ap_const_logic_0;
                elsif ((grp_PE_array_fu_246_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_PE_array_fu_246_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_PE_array_fu_246_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_PE_array_fu_246_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_PE_array_fu_246_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln351_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
                    grp_PE_array_fu_246_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_PE_array_fu_246_ap_ready = ap_const_logic_1)) then 
                    grp_PE_array_fu_246_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Read_In_buf_line_fu_275_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Read_In_buf_line_fu_275_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_Read_In_buf_line_fu_275_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Read_In_buf_line_fu_275_ap_ready = ap_const_logic_1)) then 
                    grp_Read_In_buf_line_fu_275_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Read_W_buf_fu_311_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Read_W_buf_fu_311_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_Read_W_buf_fu_311_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Read_W_buf_fu_311_ap_ready = ap_const_logic_1)) then 
                    grp_Read_W_buf_fu_311_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_Write_C_buf_fu_296_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Write_C_buf_fu_296_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln351_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    grp_Write_C_buf_fu_296_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Write_C_buf_fu_296_ap_ready = ap_const_logic_1)) then 
                    grp_Write_C_buf_fu_296_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    In_buffer_end_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                In_buffer_end <= add_ln347_fu_621_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                In_buffer_end <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    In_buffer_start_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln351_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                In_buffer_start <= sub_ln365_fu_722_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                In_buffer_start <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    Out_buf_cho_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                Out_buf_cho <= add_ln354_fu_734_p2;
            elsif (((icmp_ln344_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                Out_buf_cho <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_0_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_235 <= i_reg_813;
            elsif (((icmp_ln340_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_235 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    p_0_rec_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Write_C_buf_fu_296_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                p_0_rec_reg_212 <= add_ln360_reg_841;
            elsif (((grp_Read_W_buf_fu_311_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0_rec_reg_212 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    reuse_row_count_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Write_C_buf_fu_296_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reuse_row_count_0_reg_224 <= reuse_row_count_reg_792;
            elsif (((grp_Read_W_buf_fu_311_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reuse_row_count_0_reg_224 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln351_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                In_buf_row <= add_ln362_fu_700_p2;
                Out_buf_row_count <= select_ln358_fu_655_p3;
                add_ln360_reg_841 <= add_ln360_fu_694_p2;
                select_ln358_reg_836 <= select_ln358_fu_655_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                In_buffer_length <= mul_ln332_1_fu_464_p2;
                In_ddr1_reg_772 <= In_ddr(31 downto 2);
                Out_ddr5_reg_762 <= Out_ddr(31 downto 2);
                W_ddr3_reg_767 <= W_ddr(31 downto 2);
                mul_ln336_2_reg_777 <= mul_ln336_2_fu_500_p2;
                p_chin_s <= CHin;
                p_chout_s <= CHout;
                p_cin_s <= Cin;
                p_cinp_s <= add_ln325_fu_428_p2;
                p_k_s <= K;
                p_p_s <= padding;
                p_rinp_s <= add_ln324_fu_416_p2;
                p_s_s <= stride;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                Out_buf_cho_load_reg_823 <= Out_buf_cho;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Write_C_buf_fu_296_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                Out_buf_row <= add_ln361_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln351_fu_637_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                Out_buf_row_load_1_reg_831 <= Out_buf_row;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_Read_W_buf_fu_311_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln337_reg_787 <= add_ln337_fu_538_p2;
                    flush_row_count_reg_782(31 downto 2) <= flush_row_count_fu_522_p2(31 downto 2);
                p_c_s <= C;
                p_r_s <= R;
                reuse_row_count_reg_792 <= reuse_row_count_fu_560_p3;
                    zext_ln364_reg_797(30 downto 0) <= zext_ln364_fu_568_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln346_reg_818 <= add_ln346_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_reg_813 <= i_fu_596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln340_fu_572_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                new_read_row_count_reg_805 <= new_read_row_count_fu_582_p2;
            end if;
        end if;
    end process;
    flush_row_count_reg_782(1 downto 0) <= "00";
    zext_ln364_reg_797(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, grp_Read_W_buf_fu_311_ap_done, ap_CS_fsm_state4, icmp_ln340_fu_572_p2, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, ap_CS_fsm_state8, icmp_ln351_fu_637_p2, grp_Read_In_buf_line_fu_275_ap_done, grp_Write_C_buf_fu_296_ap_done, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_block_state9_on_subcall_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_Read_W_buf_fu_311_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln340_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln344_fu_591_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_Read_In_buf_line_fu_275_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln351_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state11 => 
                if (((grp_Write_C_buf_fu_296_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    In_buffer_address0_assign_proc : process(grp_PE_array_fu_246_In_buf_address0, grp_Read_In_buf_line_fu_275_In_buf_address0, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            In_buffer_address0 <= grp_Read_In_buf_line_fu_275_In_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            In_buffer_address0 <= grp_PE_array_fu_246_In_buf_address0;
        else 
            In_buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    In_buffer_ce0_assign_proc : process(grp_PE_array_fu_246_In_buf_ce0, grp_Read_In_buf_line_fu_275_In_buf_ce0, ap_CS_fsm_state9, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            In_buffer_ce0 <= grp_Read_In_buf_line_fu_275_In_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            In_buffer_ce0 <= grp_PE_array_fu_246_In_buf_ce0;
        else 
            In_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    In_buffer_ce1_assign_proc : process(grp_PE_array_fu_246_In_buf_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            In_buffer_ce1 <= grp_PE_array_fu_246_In_buf_ce1;
        else 
            In_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    In_buffer_we0_assign_proc : process(grp_Read_In_buf_line_fu_275_In_buf_we0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            In_buffer_we0 <= grp_Read_In_buf_line_fu_275_In_buf_we0;
        else 
            In_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_buffer_address0_assign_proc : process(grp_PE_array_fu_246_Out_buf_address0, grp_Write_C_buf_fu_296_Out_buf_address0, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Out_buffer_address0 <= grp_Write_C_buf_fu_296_Out_buf_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Out_buffer_address0 <= grp_PE_array_fu_246_Out_buf_address0;
        else 
            Out_buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    Out_buffer_ce0_assign_proc : process(grp_PE_array_fu_246_Out_buf_ce0, grp_Write_C_buf_fu_296_Out_buf_ce0, ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Out_buffer_ce0 <= grp_Write_C_buf_fu_296_Out_buf_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Out_buffer_ce0 <= grp_PE_array_fu_246_Out_buf_ce0;
        else 
            Out_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_buffer_ce1_assign_proc : process(grp_Write_C_buf_fu_296_Out_buf_ce1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Out_buffer_ce1 <= grp_Write_C_buf_fu_296_Out_buf_ce1;
        else 
            Out_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Out_buffer_we0_assign_proc : process(grp_PE_array_fu_246_Out_buf_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Out_buffer_we0 <= grp_PE_array_fu_246_Out_buf_we0;
        else 
            Out_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_buffer_we1_assign_proc : process(grp_Write_C_buf_fu_296_Out_buf_we1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Out_buffer_we1 <= grp_Write_C_buf_fu_296_Out_buf_we1;
        else 
            Out_buffer_we1 <= ap_const_logic_0;
        end if; 
    end process;


    W_buffer_address0_assign_proc : process(ap_CS_fsm_state3, grp_PE_array_fu_246_W_buf_address0, grp_Read_W_buf_fu_311_W_address0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W_buffer_address0 <= grp_Read_W_buf_fu_311_W_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            W_buffer_address0 <= grp_PE_array_fu_246_W_buf_address0;
        else 
            W_buffer_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    W_buffer_ce0_assign_proc : process(ap_CS_fsm_state3, grp_PE_array_fu_246_W_buf_ce0, grp_Read_W_buf_fu_311_W_ce0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W_buffer_ce0 <= grp_Read_W_buf_fu_311_W_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            W_buffer_ce0 <= grp_PE_array_fu_246_W_buf_ce0;
        else 
            W_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_buffer_ce1_assign_proc : process(grp_PE_array_fu_246_W_buf_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            W_buffer_ce1 <= grp_PE_array_fu_246_W_buf_ce1;
        else 
            W_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_buffer_we0_assign_proc : process(ap_CS_fsm_state3, grp_Read_W_buf_fu_311_W_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W_buffer_we0 <= grp_Read_W_buf_fu_311_W_we0;
        else 
            W_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln324_fu_416_p2 <= std_logic_vector(unsigned(Rin) + unsigned(padding));
    add_ln325_fu_428_p0 <= Cin;
    add_ln325_fu_428_p2 <= std_logic_vector(signed(add_ln325_fu_428_p0) + signed(padding));
    add_ln332_fu_452_p1 <= K;
    add_ln332_fu_452_p2 <= std_logic_vector(unsigned(sub_ln332_fu_446_p2) + unsigned(add_ln332_fu_452_p1));
    add_ln337_fu_538_p2 <= std_logic_vector(unsigned(sub_ln337_fu_528_p2) + unsigned(p_k_s));
    add_ln346_fu_602_p2 <= std_logic_vector(unsigned(zext_ln344_fu_587_p1) + unsigned(In_buf_row));
    add_ln347_fu_621_p2 <= std_logic_vector(unsigned(mul_ln347_fu_615_p2) + unsigned(In_buffer_end));
    add_ln354_fu_734_p2 <= std_logic_vector(unsigned(Out_buf_cho) + unsigned(ap_const_lv32_4));
    add_ln360_fu_694_p2 <= std_logic_vector(signed(sext_ln360_fu_690_p1) + signed(p_0_rec_reg_212));
    add_ln361_fu_750_p2 <= std_logic_vector(unsigned(Out_buf_row) + unsigned(Out_buf_row_count));
    add_ln362_fu_700_p2 <= std_logic_vector(unsigned(In_buf_row) + unsigned(flush_row_count_reg_782));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state9_on_subcall_done_assign_proc : process(ap_sync_grp_PE_array_fu_246_ap_ready, ap_sync_grp_PE_array_fu_246_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((ap_sync_grp_PE_array_fu_246_ap_ready and ap_sync_grp_PE_array_fu_246_ap_done) = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, icmp_ln340_fu_572_p2)
    begin
        if (((icmp_ln340_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, icmp_ln340_fu_572_p2)
    begin
        if (((icmp_ln340_fu_572_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_PE_array_fu_246_ap_done <= (grp_PE_array_fu_246_ap_done or ap_sync_reg_grp_PE_array_fu_246_ap_done);
    ap_sync_grp_PE_array_fu_246_ap_ready <= (grp_PE_array_fu_246_ap_ready or ap_sync_reg_grp_PE_array_fu_246_ap_ready);
    flush_row_count_fu_522_p2 <= std_logic_vector(shift_left(unsigned(p_s_s),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARADDR, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARADDR, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARADDR <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARADDR <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARBURST, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARBURST, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARBURST <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARBURST <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARBURST;
        else 
            gmem_ARBURST <= "XX";
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARCACHE, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARCACHE, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARCACHE <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARCACHE <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARCACHE;
        else 
            gmem_ARCACHE <= "XXXX";
        end if; 
    end process;


    gmem_ARID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARID, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARID, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARID <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARID <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARID;
        else 
            gmem_ARID <= "X";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARLEN, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARLEN, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARLEN <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARLEN <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARLOCK, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARLOCK, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARLOCK <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARLOCK <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARLOCK;
        else 
            gmem_ARLOCK <= "XX";
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARPROT, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARPROT, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARPROT <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARPROT <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARPROT;
        else 
            gmem_ARPROT <= "XXX";
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARQOS, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARQOS, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARQOS <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARQOS <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARQOS;
        else 
            gmem_ARQOS <= "XXXX";
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARREGION, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARREGION, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARREGION <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARREGION <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARREGION;
        else 
            gmem_ARREGION <= "XXXX";
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARSIZE, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARSIZE, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARSIZE <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARSIZE <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARSIZE;
        else 
            gmem_ARSIZE <= "XXX";
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARUSER, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARUSER, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARUSER <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARUSER <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARUSER;
        else 
            gmem_ARUSER <= "X";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARVALID, grp_Read_W_buf_fu_311_m_axi_W_ddr_ARVALID, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARVALID <= grp_Read_W_buf_fu_311_m_axi_W_ddr_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_ARVALID <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state8, icmp_ln351_fu_637_p2, grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWVALID, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln351_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            gmem_AWVALID <= grp_Write_C_buf_fu_296_m_axi_Out_ddr_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state8, icmp_ln351_fu_637_p2, grp_Write_C_buf_fu_296_m_axi_Out_ddr_BREADY, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln351_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            gmem_BREADY <= grp_Write_C_buf_fu_296_m_axi_Out_ddr_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, icmp_ln344_fu_591_p2, grp_Read_In_buf_line_fu_275_m_axi_In_ddr_RREADY, grp_Read_W_buf_fu_311_m_axi_W_ddr_RREADY, ap_CS_fsm_state6, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_RREADY <= grp_Read_W_buf_fu_311_m_axi_W_ddr_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or ((icmp_ln344_fu_591_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_RREADY <= grp_Read_In_buf_line_fu_275_m_axi_In_ddr_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state8, icmp_ln351_fu_637_p2, grp_Write_C_buf_fu_296_m_axi_Out_ddr_WVALID, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln351_fu_637_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            gmem_WVALID <= grp_Write_C_buf_fu_296_m_axi_Out_ddr_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    grp_PE_array_fu_246_ap_continue_assign_proc : process(ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_PE_array_fu_246_ap_continue <= ap_const_logic_1;
        else 
            grp_PE_array_fu_246_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_PE_array_fu_246_ap_start <= grp_PE_array_fu_246_ap_start_reg;
    grp_Read_In_buf_line_fu_275_ap_start <= grp_Read_In_buf_line_fu_275_ap_start_reg;
    grp_Read_W_buf_fu_311_ap_start <= grp_Read_W_buf_fu_311_ap_start_reg;
    grp_Write_C_buf_fu_296_ap_start <= grp_Write_C_buf_fu_296_ap_start_reg;
    i_fu_596_p2 <= std_logic_vector(unsigned(i_0_reg_235) + unsigned(ap_const_lv31_1));
    icmp_ln340_fu_572_p2 <= "1" when (signed(Out_buf_row) < signed(p_r_s)) else "0";
    icmp_ln344_fu_591_p2 <= "1" when (signed(zext_ln344_fu_587_p1) < signed(new_read_row_count_reg_805)) else "0";
    icmp_ln351_fu_637_p2 <= "1" when (signed(Out_buf_cho) < signed(p_chout_s)) else "0";
    icmp_ln358_fu_649_p2 <= "1" when (signed(sub_ln358_fu_643_p2) > signed(ap_const_lv32_4)) else "0";
    icmp_ln364_fu_554_p2 <= "1" when (signed(sub_ln364_fu_544_p2) > signed(ap_const_lv32_0)) else "0";
    mul_ln332_1_fu_464_p1 <= Cin;
    mul_ln332_1_fu_464_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln332_fu_458_p2) * signed(mul_ln332_1_fu_464_p1))), 32));
    mul_ln332_fu_458_p1 <= CHin;
    mul_ln332_fu_458_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln332_fu_452_p2) * signed(mul_ln332_fu_458_p1))), 32));
    mul_ln336_1_fu_494_p0 <= K;
    mul_ln336_1_fu_494_p1 <= K;
    mul_ln336_1_fu_494_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln336_1_fu_494_p0) * signed(mul_ln336_1_fu_494_p1))), 32));
    mul_ln336_2_fu_500_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln336_fu_488_p2) * signed(mul_ln336_1_fu_494_p2))), 32));
    mul_ln336_fu_488_p0 <= CHout;
    mul_ln336_fu_488_p1 <= CHin;
    mul_ln336_fu_488_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln336_fu_488_p0) * signed(mul_ln336_fu_488_p1))), 32));
    mul_ln347_fu_615_p0 <= p_cinp_s;
    mul_ln347_fu_615_p1 <= p_chin_s;
    mul_ln347_fu_615_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln347_fu_615_p0) * signed(mul_ln347_fu_615_p1))), 32));
    mul_ln360_fu_678_p0 <= p_chout_s;
    mul_ln360_fu_678_p1 <= p_c_s;
    mul_ln360_fu_678_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln360_fu_678_p0) * signed(mul_ln360_fu_678_p1))), 32));
    mul_ln365_1_fu_716_p1 <= p_chin_s;
    mul_ln365_1_fu_716_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln365_fu_711_p2) * signed(mul_ln365_1_fu_716_p1))), 32));
    mul_ln365_fu_711_p0 <= p_cinp_s;
    mul_ln365_fu_711_p1 <= zext_ln364_reg_797(31 - 1 downto 0);
    mul_ln365_fu_711_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln365_fu_711_p0) * signed('0' &mul_ln365_fu_711_p1))), 32));
    new_read_row_count_fu_582_p2 <= std_logic_vector(unsigned(add_ln337_reg_787) - unsigned(zext_ln340_fu_578_p1));
    reuse_row_count_fu_560_p3 <= 
        trunc_ln364_fu_550_p1 when (icmp_ln364_fu_554_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln358_fu_655_p3 <= 
        ap_const_lv32_4 when (icmp_ln358_fu_649_p2(0) = '1') else 
        sub_ln358_fu_643_p2;
        sext_ln360_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln360_fu_684_p2),64));

    shl_ln332_fu_440_p2 <= std_logic_vector(shift_left(unsigned(stride),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln360_fu_684_p2 <= std_logic_vector(shift_left(unsigned(mul_ln360_fu_678_p2),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    sub_ln332_fu_446_p2 <= std_logic_vector(unsigned(shl_ln332_fu_440_p2) - unsigned(stride));
    sub_ln337_fu_528_p2 <= std_logic_vector(unsigned(flush_row_count_fu_522_p2) - unsigned(p_s_s));
    sub_ln358_fu_643_p2 <= std_logic_vector(unsigned(p_r_s) - unsigned(Out_buf_row));
    sub_ln364_fu_544_p2 <= std_logic_vector(unsigned(add_ln337_fu_538_p2) - unsigned(flush_row_count_fu_522_p2));
    sub_ln365_fu_722_p2 <= std_logic_vector(unsigned(In_buffer_end) - unsigned(mul_ln365_1_fu_716_p2));
    trunc_ln364_fu_550_p1 <= sub_ln364_fu_544_p2(31 - 1 downto 0);
    zext_ln340_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reuse_row_count_0_reg_224),32));
    zext_ln344_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_235),32));
    zext_ln364_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reuse_row_count_fu_560_p3),32));
end behav;
