// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Read_In_buf_line (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        In_buf_address0,
        In_buf_ce0,
        In_buf_we0,
        In_buf_d0,
        m_axi_In_ddr_AWVALID,
        m_axi_In_ddr_AWREADY,
        m_axi_In_ddr_AWADDR,
        m_axi_In_ddr_AWID,
        m_axi_In_ddr_AWLEN,
        m_axi_In_ddr_AWSIZE,
        m_axi_In_ddr_AWBURST,
        m_axi_In_ddr_AWLOCK,
        m_axi_In_ddr_AWCACHE,
        m_axi_In_ddr_AWPROT,
        m_axi_In_ddr_AWQOS,
        m_axi_In_ddr_AWREGION,
        m_axi_In_ddr_AWUSER,
        m_axi_In_ddr_WVALID,
        m_axi_In_ddr_WREADY,
        m_axi_In_ddr_WDATA,
        m_axi_In_ddr_WSTRB,
        m_axi_In_ddr_WLAST,
        m_axi_In_ddr_WID,
        m_axi_In_ddr_WUSER,
        m_axi_In_ddr_ARVALID,
        m_axi_In_ddr_ARREADY,
        m_axi_In_ddr_ARADDR,
        m_axi_In_ddr_ARID,
        m_axi_In_ddr_ARLEN,
        m_axi_In_ddr_ARSIZE,
        m_axi_In_ddr_ARBURST,
        m_axi_In_ddr_ARLOCK,
        m_axi_In_ddr_ARCACHE,
        m_axi_In_ddr_ARPROT,
        m_axi_In_ddr_ARQOS,
        m_axi_In_ddr_ARREGION,
        m_axi_In_ddr_ARUSER,
        m_axi_In_ddr_RVALID,
        m_axi_In_ddr_RREADY,
        m_axi_In_ddr_RDATA,
        m_axi_In_ddr_RLAST,
        m_axi_In_ddr_RID,
        m_axi_In_ddr_RUSER,
        m_axi_In_ddr_RRESP,
        m_axi_In_ddr_BVALID,
        m_axi_In_ddr_BREADY,
        m_axi_In_ddr_BRESP,
        m_axi_In_ddr_BID,
        m_axi_In_ddr_BUSER,
        In_ddr_offset,
        row,
        p_p_s,
        p_cinp_s,
        p_chin_s,
        In_buffer_end,
        In_buffer_length,
        p_rinp_s
);

parameter    ap_ST_fsm_state1 = 83'd1;
parameter    ap_ST_fsm_state2 = 83'd2;
parameter    ap_ST_fsm_state3 = 83'd4;
parameter    ap_ST_fsm_state4 = 83'd8;
parameter    ap_ST_fsm_state5 = 83'd16;
parameter    ap_ST_fsm_state6 = 83'd32;
parameter    ap_ST_fsm_state7 = 83'd64;
parameter    ap_ST_fsm_state8 = 83'd128;
parameter    ap_ST_fsm_state9 = 83'd256;
parameter    ap_ST_fsm_state10 = 83'd512;
parameter    ap_ST_fsm_state11 = 83'd1024;
parameter    ap_ST_fsm_state12 = 83'd2048;
parameter    ap_ST_fsm_state13 = 83'd4096;
parameter    ap_ST_fsm_state14 = 83'd8192;
parameter    ap_ST_fsm_state15 = 83'd16384;
parameter    ap_ST_fsm_state16 = 83'd32768;
parameter    ap_ST_fsm_state17 = 83'd65536;
parameter    ap_ST_fsm_state18 = 83'd131072;
parameter    ap_ST_fsm_state19 = 83'd262144;
parameter    ap_ST_fsm_state20 = 83'd524288;
parameter    ap_ST_fsm_state21 = 83'd1048576;
parameter    ap_ST_fsm_state22 = 83'd2097152;
parameter    ap_ST_fsm_state23 = 83'd4194304;
parameter    ap_ST_fsm_state24 = 83'd8388608;
parameter    ap_ST_fsm_state25 = 83'd16777216;
parameter    ap_ST_fsm_state26 = 83'd33554432;
parameter    ap_ST_fsm_state27 = 83'd67108864;
parameter    ap_ST_fsm_state28 = 83'd134217728;
parameter    ap_ST_fsm_state29 = 83'd268435456;
parameter    ap_ST_fsm_state30 = 83'd536870912;
parameter    ap_ST_fsm_state31 = 83'd1073741824;
parameter    ap_ST_fsm_state32 = 83'd2147483648;
parameter    ap_ST_fsm_state33 = 83'd4294967296;
parameter    ap_ST_fsm_state34 = 83'd8589934592;
parameter    ap_ST_fsm_state35 = 83'd17179869184;
parameter    ap_ST_fsm_state36 = 83'd34359738368;
parameter    ap_ST_fsm_state37 = 83'd68719476736;
parameter    ap_ST_fsm_state38 = 83'd137438953472;
parameter    ap_ST_fsm_state39 = 83'd274877906944;
parameter    ap_ST_fsm_state40 = 83'd549755813888;
parameter    ap_ST_fsm_state41 = 83'd1099511627776;
parameter    ap_ST_fsm_state42 = 83'd2199023255552;
parameter    ap_ST_fsm_state43 = 83'd4398046511104;
parameter    ap_ST_fsm_state44 = 83'd8796093022208;
parameter    ap_ST_fsm_state45 = 83'd17592186044416;
parameter    ap_ST_fsm_state46 = 83'd35184372088832;
parameter    ap_ST_fsm_state47 = 83'd70368744177664;
parameter    ap_ST_fsm_state48 = 83'd140737488355328;
parameter    ap_ST_fsm_state49 = 83'd281474976710656;
parameter    ap_ST_fsm_state50 = 83'd562949953421312;
parameter    ap_ST_fsm_state51 = 83'd1125899906842624;
parameter    ap_ST_fsm_state52 = 83'd2251799813685248;
parameter    ap_ST_fsm_state53 = 83'd4503599627370496;
parameter    ap_ST_fsm_state54 = 83'd9007199254740992;
parameter    ap_ST_fsm_state55 = 83'd18014398509481984;
parameter    ap_ST_fsm_state56 = 83'd36028797018963968;
parameter    ap_ST_fsm_state57 = 83'd72057594037927936;
parameter    ap_ST_fsm_state58 = 83'd144115188075855872;
parameter    ap_ST_fsm_state59 = 83'd288230376151711744;
parameter    ap_ST_fsm_state60 = 83'd576460752303423488;
parameter    ap_ST_fsm_state61 = 83'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 83'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 83'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 83'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 83'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 83'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 83'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 83'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 83'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 83'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 83'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 83'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 83'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 83'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 83'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 83'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 83'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 83'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 83'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 83'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 83'd1208925819614629174706176;
parameter    ap_ST_fsm_pp0_stage0 = 83'd2417851639229258349412352;
parameter    ap_ST_fsm_state118 = 83'd4835703278458516698824704;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] In_buf_address0;
output   In_buf_ce0;
output   In_buf_we0;
output  [31:0] In_buf_d0;
output   m_axi_In_ddr_AWVALID;
input   m_axi_In_ddr_AWREADY;
output  [31:0] m_axi_In_ddr_AWADDR;
output  [0:0] m_axi_In_ddr_AWID;
output  [31:0] m_axi_In_ddr_AWLEN;
output  [2:0] m_axi_In_ddr_AWSIZE;
output  [1:0] m_axi_In_ddr_AWBURST;
output  [1:0] m_axi_In_ddr_AWLOCK;
output  [3:0] m_axi_In_ddr_AWCACHE;
output  [2:0] m_axi_In_ddr_AWPROT;
output  [3:0] m_axi_In_ddr_AWQOS;
output  [3:0] m_axi_In_ddr_AWREGION;
output  [0:0] m_axi_In_ddr_AWUSER;
output   m_axi_In_ddr_WVALID;
input   m_axi_In_ddr_WREADY;
output  [31:0] m_axi_In_ddr_WDATA;
output  [3:0] m_axi_In_ddr_WSTRB;
output   m_axi_In_ddr_WLAST;
output  [0:0] m_axi_In_ddr_WID;
output  [0:0] m_axi_In_ddr_WUSER;
output   m_axi_In_ddr_ARVALID;
input   m_axi_In_ddr_ARREADY;
output  [31:0] m_axi_In_ddr_ARADDR;
output  [0:0] m_axi_In_ddr_ARID;
output  [31:0] m_axi_In_ddr_ARLEN;
output  [2:0] m_axi_In_ddr_ARSIZE;
output  [1:0] m_axi_In_ddr_ARBURST;
output  [1:0] m_axi_In_ddr_ARLOCK;
output  [3:0] m_axi_In_ddr_ARCACHE;
output  [2:0] m_axi_In_ddr_ARPROT;
output  [3:0] m_axi_In_ddr_ARQOS;
output  [3:0] m_axi_In_ddr_ARREGION;
output  [0:0] m_axi_In_ddr_ARUSER;
input   m_axi_In_ddr_RVALID;
output   m_axi_In_ddr_RREADY;
input  [31:0] m_axi_In_ddr_RDATA;
input   m_axi_In_ddr_RLAST;
input  [0:0] m_axi_In_ddr_RID;
input  [0:0] m_axi_In_ddr_RUSER;
input  [1:0] m_axi_In_ddr_RRESP;
input   m_axi_In_ddr_BVALID;
output   m_axi_In_ddr_BREADY;
input  [1:0] m_axi_In_ddr_BRESP;
input  [0:0] m_axi_In_ddr_BID;
input  [0:0] m_axi_In_ddr_BUSER;
input  [29:0] In_ddr_offset;
input  [31:0] row;
input  [31:0] p_p_s;
input  [31:0] p_cinp_s;
input  [31:0] p_chin_s;
input  [31:0] In_buffer_end;
input  [31:0] In_buffer_length;
input  [31:0] p_rinp_s;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] In_buf_address0;
reg In_buf_ce0;
reg In_buf_we0;
reg[31:0] In_buf_d0;
reg m_axi_In_ddr_ARVALID;
reg m_axi_In_ddr_RREADY;

(* fsm_encoding = "none" *) reg   [82:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    In_ddr_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    In_ddr_blk_n_R;
wire    ap_CS_fsm_state44;
reg   [63:0] indvar_flatten_reg_186;
reg   [30:0] i_0_reg_197;
reg   [30:0] j_0_reg_208;
wire   [31:0] select_ln234_fu_271_p3;
reg   [31:0] select_ln234_reg_637;
wire   [0:0] icmp_ln234_fu_279_p2;
wire   [0:0] icmp_ln234_1_fu_373_p2;
wire   [31:0] sub_ln245_fu_379_p2;
reg   [31:0] sub_ln245_reg_679;
wire  signed [32:0] sext_ln253_fu_391_p1;
reg  signed [32:0] sext_ln253_reg_684;
wire   [33:0] zext_ln243_1_fu_395_p1;
reg   [33:0] zext_ln243_1_reg_689;
wire   [63:0] mul_ln235_fu_407_p2;
reg   [63:0] mul_ln235_reg_694;
wire   [30:0] i_fu_422_p2;
reg   [30:0] i_reg_702;
wire    ap_CS_fsm_state2;
wire   [0:0] or_ln245_fu_438_p2;
reg   [0:0] or_ln245_reg_707;
wire   [0:0] icmp_ln243_fu_417_p2;
wire  signed [31:0] mul_ln248_fu_444_p2;
reg  signed [31:0] mul_ln248_reg_711;
reg   [31:0] In_ddr_addr_reg_717;
wire   [30:0] j_2_fu_486_p2;
reg   [30:0] j_2_reg_726;
wire    ap_CS_fsm_state10;
wire   [0:0] icmp_ln251_fu_481_p2;
reg   [31:0] In_ddr_addr_read_reg_736;
wire   [30:0] j_1_fu_521_p2;
reg   [30:0] j_1_reg_744;
wire    ap_CS_fsm_state46;
wire   [0:0] icmp_ln246_fu_516_p2;
wire   [0:0] icmp_ln235_fu_556_p2;
reg   [0:0] icmp_ln235_reg_754;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state82_pp0_stage0_iter0;
wire    ap_block_state83_pp0_stage0_iter1;
wire    ap_block_state84_pp0_stage0_iter2;
wire    ap_block_state85_pp0_stage0_iter3;
wire    ap_block_state86_pp0_stage0_iter4;
wire    ap_block_state87_pp0_stage0_iter5;
wire    ap_block_state88_pp0_stage0_iter6;
wire    ap_block_state89_pp0_stage0_iter7;
wire    ap_block_state90_pp0_stage0_iter8;
wire    ap_block_state91_pp0_stage0_iter9;
wire    ap_block_state92_pp0_stage0_iter10;
wire    ap_block_state93_pp0_stage0_iter11;
wire    ap_block_state94_pp0_stage0_iter12;
wire    ap_block_state95_pp0_stage0_iter13;
wire    ap_block_state96_pp0_stage0_iter14;
wire    ap_block_state97_pp0_stage0_iter15;
wire    ap_block_state98_pp0_stage0_iter16;
wire    ap_block_state99_pp0_stage0_iter17;
wire    ap_block_state100_pp0_stage0_iter18;
wire    ap_block_state101_pp0_stage0_iter19;
wire    ap_block_state102_pp0_stage0_iter20;
wire    ap_block_state103_pp0_stage0_iter21;
wire    ap_block_state104_pp0_stage0_iter22;
wire    ap_block_state105_pp0_stage0_iter23;
wire    ap_block_state106_pp0_stage0_iter24;
wire    ap_block_state107_pp0_stage0_iter25;
wire    ap_block_state108_pp0_stage0_iter26;
wire    ap_block_state109_pp0_stage0_iter27;
wire    ap_block_state110_pp0_stage0_iter28;
wire    ap_block_state111_pp0_stage0_iter29;
wire    ap_block_state112_pp0_stage0_iter30;
wire    ap_block_state113_pp0_stage0_iter31;
wire    ap_block_state114_pp0_stage0_iter32;
wire    ap_block_state115_pp0_stage0_iter33;
wire    ap_block_state116_pp0_stage0_iter34;
wire    ap_block_state117_pp0_stage0_iter35;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln235_reg_754_pp0_iter1_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter2_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter3_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter4_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter5_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter6_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter7_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter8_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter9_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter10_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter11_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter12_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter13_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter14_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter15_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter16_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter17_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter18_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter19_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter20_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter21_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter22_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter23_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter24_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter25_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter26_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter27_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter28_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter29_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter30_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter31_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter32_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter33_reg;
reg   [0:0] icmp_ln235_reg_754_pp0_iter34_reg;
wire   [63:0] add_ln235_fu_561_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [30:0] select_ln235_fu_573_p3;
reg   [30:0] select_ln235_reg_763;
wire   [30:0] j_fu_624_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state82;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg   [30:0] i1_0_reg_153;
reg   [30:0] j3_0_reg_164;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state9;
reg   [30:0] j2_0_reg_175;
wire    ap_CS_fsm_state81;
reg   [30:0] ap_phi_mux_i_0_phi_fu_201_p4;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln253_3_fu_507_p1;
wire  signed [63:0] sext_ln248_fu_542_p1;
wire  signed [63:0] sext_ln239_fu_632_p1;
wire  signed [63:0] sext_ln253_4_fu_467_p1;
wire   [31:0] sub_ln234_1_fu_231_p2;
wire   [30:0] lshr_ln234_1_fu_237_p4;
wire   [31:0] zext_ln234_fu_247_p1;
wire   [30:0] lshr_ln234_2_fu_257_p4;
wire   [0:0] tmp_16_fu_223_p3;
wire   [31:0] sub_ln234_2_fu_251_p2;
wire   [31:0] zext_ln234_1_fu_267_p1;
wire  signed [31:0] icmp_ln234_fu_279_p1;
wire   [31:0] add_ln234_fu_305_p2;
wire   [31:0] sub_ln234_3_fu_319_p2;
wire   [30:0] lshr_ln234_4_fu_325_p4;
wire   [31:0] zext_ln234_2_fu_335_p1;
wire   [30:0] lshr_ln234_5_fu_345_p4;
wire   [0:0] tmp_17_fu_311_p3;
wire   [31:0] sub_ln234_4_fu_339_p2;
wire   [31:0] zext_ln234_3_fu_355_p1;
wire   [31:0] select_ln234_1_fu_359_p3;
wire   [31:0] sub_ln234_fu_367_p2;
wire  signed [31:0] icmp_ln234_1_fu_373_p1;
wire  signed [31:0] sub_ln245_fu_379_p0;
wire  signed [31:0] mul_ln253_fu_385_p0;
wire  signed [31:0] mul_ln253_fu_385_p1;
wire   [31:0] mul_ln253_fu_385_p2;
wire  signed [31:0] zext_ln235_fu_399_p0;
wire  signed [31:0] zext_ln235_1_fu_403_p0;
wire   [31:0] mul_ln235_fu_407_p0;
wire   [31:0] mul_ln235_fu_407_p1;
wire   [31:0] zext_ln243_fu_413_p1;
wire  signed [31:0] icmp_ln243_fu_417_p1;
wire   [0:0] icmp_ln245_fu_428_p2;
wire   [0:0] icmp_ln245_1_fu_433_p2;
wire  signed [31:0] mul_ln248_fu_444_p0;
wire   [30:0] mul_ln248_fu_444_p1;
wire  signed [32:0] sext_ln253_1_fu_449_p1;
wire   [32:0] add_ln253_fu_453_p2;
wire  signed [33:0] sext_ln253_2_fu_458_p1;
wire   [33:0] add_ln253_1_fu_462_p2;
wire   [31:0] zext_ln251_fu_477_p1;
wire  signed [31:0] icmp_ln251_fu_481_p1;
wire   [31:0] add_ln253_2_fu_492_p2;
wire   [31:0] grp_fu_502_p0;
wire   [31:0] grp_fu_502_p2;
wire   [31:0] zext_ln246_fu_512_p1;
wire  signed [31:0] icmp_ln246_fu_516_p1;
wire   [31:0] add_ln248_fu_527_p2;
wire   [31:0] grp_fu_537_p0;
wire   [31:0] grp_fu_537_p2;
wire   [31:0] zext_ln237_fu_547_p1;
wire  signed [31:0] icmp_ln237_fu_551_p1;
wire   [0:0] icmp_ln237_fu_551_p2;
wire   [30:0] add_ln235_1_fu_567_p2;
wire  signed [31:0] mul_ln235_1_fu_585_p0;
wire   [30:0] mul_ln235_1_fu_585_p1;
wire   [30:0] select_ln235_1_fu_590_p3;
wire   [31:0] mul_ln235_1_fu_585_p2;
wire   [31:0] zext_ln235_3_fu_598_p1;
wire   [31:0] add_ln239_fu_602_p2;
wire   [31:0] grp_fu_613_p0;
wire   [30:0] add_ln237_fu_618_p2;
wire   [31:0] grp_fu_613_p2;
reg    grp_fu_502_ap_start;
wire    grp_fu_502_ap_done;
reg    grp_fu_502_ce;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
reg    grp_fu_537_ap_start;
wire    grp_fu_537_ap_done;
wire    ap_CS_fsm_state118;
reg   [82:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] mul_ln235_1_fu_585_p10;
wire   [63:0] mul_ln235_fu_407_p00;
wire   [63:0] mul_ln235_fu_407_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 83'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
end

Systolic_Array_Cobkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_Cobkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_502_ap_start),
    .done(grp_fu_502_ap_done),
    .din0(grp_fu_502_p0),
    .din1(In_buffer_length),
    .ce(grp_fu_502_ce),
    .dout(grp_fu_502_p2)
);

Systolic_Array_Cobkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_Cobkb_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_537_ap_start),
    .done(grp_fu_537_ap_done),
    .din0(grp_fu_537_p0),
    .din1(In_buffer_length),
    .ce(1'b1),
    .dout(grp_fu_537_p2)
);

Systolic_Array_Cocud #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_Cocud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_613_p0),
    .din1(In_buffer_length),
    .ce(1'b1),
    .dout(grp_fu_613_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state82) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln234_1_fu_373_p2 == 1'd1) | (icmp_ln234_fu_279_p2 == 1'd1)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state82)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state82);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln234_1_fu_373_p2 == 1'd1) | (icmp_ln234_fu_279_p2 == 1'd1)))) begin
            ap_enable_reg_pp0_iter35 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln234_1_fu_373_p2 == 1'd0) & (icmp_ln234_fu_279_p2 == 1'd0))) begin
        i1_0_reg_153 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & ((or_ln245_reg_707 == 1'd1) | (icmp_ln251_fu_481_p2 == 1'd0)))) begin
        i1_0_reg_153 <= i_reg_702;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln235_reg_754 == 1'd0))) begin
        i_0_reg_197 <= select_ln235_reg_763;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln234_1_fu_373_p2 == 1'd1) | (icmp_ln234_fu_279_p2 == 1'd1)))) begin
        i_0_reg_197 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln235_fu_556_p2 == 1'd0))) begin
        indvar_flatten_reg_186 <= add_ln235_fu_561_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln234_1_fu_373_p2 == 1'd1) | (icmp_ln234_fu_279_p2 == 1'd1)))) begin
        indvar_flatten_reg_186 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln243_fu_417_p2 == 1'd1) & (or_ln245_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j2_0_reg_175 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        j2_0_reg_175 <= j_1_reg_744;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j3_0_reg_164 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        j3_0_reg_164 <= j_2_reg_726;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln235_fu_556_p2 == 1'd0))) begin
        j_0_reg_208 <= j_fu_624_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln234_1_fu_373_p2 == 1'd1) | (icmp_ln234_fu_279_p2 == 1'd1)))) begin
        j_0_reg_208 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (m_axi_In_ddr_RVALID == 1'b1))) begin
        In_ddr_addr_read_reg_736 <= m_axi_In_ddr_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln243_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (or_ln245_fu_438_p2 == 1'd0))) begin
        In_ddr_addr_reg_717 <= sext_ln253_4_fu_467_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_702 <= i_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln235_reg_754 <= icmp_ln235_fu_556_p2;
        icmp_ln235_reg_754_pp0_iter1_reg <= icmp_ln235_reg_754;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln235_reg_754_pp0_iter10_reg <= icmp_ln235_reg_754_pp0_iter9_reg;
        icmp_ln235_reg_754_pp0_iter11_reg <= icmp_ln235_reg_754_pp0_iter10_reg;
        icmp_ln235_reg_754_pp0_iter12_reg <= icmp_ln235_reg_754_pp0_iter11_reg;
        icmp_ln235_reg_754_pp0_iter13_reg <= icmp_ln235_reg_754_pp0_iter12_reg;
        icmp_ln235_reg_754_pp0_iter14_reg <= icmp_ln235_reg_754_pp0_iter13_reg;
        icmp_ln235_reg_754_pp0_iter15_reg <= icmp_ln235_reg_754_pp0_iter14_reg;
        icmp_ln235_reg_754_pp0_iter16_reg <= icmp_ln235_reg_754_pp0_iter15_reg;
        icmp_ln235_reg_754_pp0_iter17_reg <= icmp_ln235_reg_754_pp0_iter16_reg;
        icmp_ln235_reg_754_pp0_iter18_reg <= icmp_ln235_reg_754_pp0_iter17_reg;
        icmp_ln235_reg_754_pp0_iter19_reg <= icmp_ln235_reg_754_pp0_iter18_reg;
        icmp_ln235_reg_754_pp0_iter20_reg <= icmp_ln235_reg_754_pp0_iter19_reg;
        icmp_ln235_reg_754_pp0_iter21_reg <= icmp_ln235_reg_754_pp0_iter20_reg;
        icmp_ln235_reg_754_pp0_iter22_reg <= icmp_ln235_reg_754_pp0_iter21_reg;
        icmp_ln235_reg_754_pp0_iter23_reg <= icmp_ln235_reg_754_pp0_iter22_reg;
        icmp_ln235_reg_754_pp0_iter24_reg <= icmp_ln235_reg_754_pp0_iter23_reg;
        icmp_ln235_reg_754_pp0_iter25_reg <= icmp_ln235_reg_754_pp0_iter24_reg;
        icmp_ln235_reg_754_pp0_iter26_reg <= icmp_ln235_reg_754_pp0_iter25_reg;
        icmp_ln235_reg_754_pp0_iter27_reg <= icmp_ln235_reg_754_pp0_iter26_reg;
        icmp_ln235_reg_754_pp0_iter28_reg <= icmp_ln235_reg_754_pp0_iter27_reg;
        icmp_ln235_reg_754_pp0_iter29_reg <= icmp_ln235_reg_754_pp0_iter28_reg;
        icmp_ln235_reg_754_pp0_iter2_reg <= icmp_ln235_reg_754_pp0_iter1_reg;
        icmp_ln235_reg_754_pp0_iter30_reg <= icmp_ln235_reg_754_pp0_iter29_reg;
        icmp_ln235_reg_754_pp0_iter31_reg <= icmp_ln235_reg_754_pp0_iter30_reg;
        icmp_ln235_reg_754_pp0_iter32_reg <= icmp_ln235_reg_754_pp0_iter31_reg;
        icmp_ln235_reg_754_pp0_iter33_reg <= icmp_ln235_reg_754_pp0_iter32_reg;
        icmp_ln235_reg_754_pp0_iter34_reg <= icmp_ln235_reg_754_pp0_iter33_reg;
        icmp_ln235_reg_754_pp0_iter3_reg <= icmp_ln235_reg_754_pp0_iter2_reg;
        icmp_ln235_reg_754_pp0_iter4_reg <= icmp_ln235_reg_754_pp0_iter3_reg;
        icmp_ln235_reg_754_pp0_iter5_reg <= icmp_ln235_reg_754_pp0_iter4_reg;
        icmp_ln235_reg_754_pp0_iter6_reg <= icmp_ln235_reg_754_pp0_iter5_reg;
        icmp_ln235_reg_754_pp0_iter7_reg <= icmp_ln235_reg_754_pp0_iter6_reg;
        icmp_ln235_reg_754_pp0_iter8_reg <= icmp_ln235_reg_754_pp0_iter7_reg;
        icmp_ln235_reg_754_pp0_iter9_reg <= icmp_ln235_reg_754_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        j_1_reg_744 <= j_1_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (or_ln245_reg_707 == 1'd0))) begin
        j_2_reg_726 <= j_2_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln234_1_fu_373_p2 == 1'd1) | (icmp_ln234_fu_279_p2 == 1'd1)))) begin
        mul_ln235_reg_694 <= mul_ln235_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln243_fu_417_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln248_reg_711 <= mul_ln248_fu_444_p2;
        or_ln245_reg_707 <= or_ln245_fu_438_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        select_ln234_reg_637 <= select_ln234_fu_271_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln235_fu_556_p2 == 1'd0))) begin
        select_ln235_reg_763 <= select_ln235_fu_573_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln234_1_fu_373_p2 == 1'd0) & (icmp_ln234_fu_279_p2 == 1'd0))) begin
        sext_ln253_reg_684 <= sext_ln253_fu_391_p1;
        sub_ln245_reg_679 <= sub_ln245_fu_379_p2;
        zext_ln243_1_reg_689[29 : 0] <= zext_ln243_1_fu_395_p1[29 : 0];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter35 == 1'b1))) begin
        In_buf_address0 = sext_ln239_fu_632_p1;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        In_buf_address0 = sext_ln248_fu_542_p1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        In_buf_address0 = sext_ln253_3_fu_507_p1;
    end else begin
        In_buf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state45) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter35 == 1'b1)))) begin
        In_buf_ce0 = 1'b1;
    end else begin
        In_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter35 == 1'b1)))) begin
        In_buf_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        In_buf_d0 = In_ddr_addr_read_reg_736;
    end else begin
        In_buf_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state45) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter35 == 1'b1) & (icmp_ln235_reg_754_pp0_iter34_reg == 1'd0)))) begin
        In_buf_we0 = 1'b1;
    end else begin
        In_buf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        In_ddr_blk_n_AR = m_axi_In_ddr_ARREADY;
    end else begin
        In_ddr_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        In_ddr_blk_n_R = m_axi_In_ddr_RVALID;
    end else begin
        In_ddr_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln235_fu_556_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state82 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state82 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state118) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln235_reg_754 == 1'd0))) begin
        ap_phi_mux_i_0_phi_fu_201_p4 = select_ln235_reg_763;
    end else begin
        ap_phi_mux_i_0_phi_fu_201_p4 = i_0_reg_197;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state118)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln251_fu_481_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10) & (or_ln245_reg_707 == 1'd0))) begin
        grp_fu_502_ap_start = 1'b1;
    end else begin
        grp_fu_502_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state44))) begin
        grp_fu_502_ce = 1'b1;
    end else begin
        grp_fu_502_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln246_fu_516_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        grp_fu_537_ap_start = 1'b1;
    end else begin
        grp_fu_537_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (m_axi_In_ddr_ARREADY == 1'b1))) begin
        m_axi_In_ddr_ARVALID = 1'b1;
    end else begin
        m_axi_In_ddr_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state44) & (m_axi_In_ddr_RVALID == 1'b1))) begin
        m_axi_In_ddr_RREADY = 1'b1;
    end else begin
        m_axi_In_ddr_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln234_1_fu_373_p2 == 1'd1) | (icmp_ln234_fu_279_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln234_1_fu_373_p2 == 1'd0) & (icmp_ln234_fu_279_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln243_fu_417_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end else if (((icmp_ln243_fu_417_p2 == 1'd1) & (or_ln245_fu_438_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (m_axi_In_ddr_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & ((or_ln245_reg_707 == 1'd1) | (icmp_ln251_fu_481_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (m_axi_In_ddr_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (icmp_ln246_fu_516_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln235_fu_556_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter34 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter35 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter34 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter35 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln235_fu_556_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state118;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln234_fu_305_p2 = (p_p_s + 32'd2);

assign add_ln235_1_fu_567_p2 = (ap_phi_mux_i_0_phi_fu_201_p4 + 31'd1);

assign add_ln235_fu_561_p2 = (indvar_flatten_reg_186 + 64'd1);

assign add_ln237_fu_618_p2 = (j_0_reg_208 + 31'd1);

assign add_ln239_fu_602_p2 = (mul_ln235_1_fu_585_p2 + zext_ln235_3_fu_598_p1);

assign add_ln248_fu_527_p2 = ($signed(mul_ln248_reg_711) + $signed(zext_ln246_fu_512_p1));

assign add_ln253_1_fu_462_p2 = ($signed(zext_ln243_1_reg_689) + $signed(sext_ln253_2_fu_458_p1));

assign add_ln253_2_fu_492_p2 = ($signed(mul_ln248_reg_711) + $signed(zext_ln251_fu_477_p1));

assign add_ln253_fu_453_p2 = ($signed(sext_ln253_reg_684) + $signed(sext_ln253_1_fu_449_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state100_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state101_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state102_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state103_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state104_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state105_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state106_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state90_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state91_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state92_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state94_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state95_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state96_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state97_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state98_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state99_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_502_p0 = (add_ln253_2_fu_492_p2 + In_buffer_end);

assign grp_fu_537_p0 = (add_ln248_fu_527_p2 + In_buffer_end);

assign grp_fu_613_p0 = (add_ln239_fu_602_p2 + In_buffer_end);

assign i_fu_422_p2 = (i1_0_reg_153 + 31'd1);

assign icmp_ln234_1_fu_373_p1 = row;

assign icmp_ln234_1_fu_373_p2 = (($signed(sub_ln234_fu_367_p2) < $signed(icmp_ln234_1_fu_373_p1)) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_279_p1 = row;

assign icmp_ln234_fu_279_p2 = (($signed(select_ln234_fu_271_p3) > $signed(icmp_ln234_fu_279_p1)) ? 1'b1 : 1'b0);

assign icmp_ln235_fu_556_p2 = ((indvar_flatten_reg_186 == mul_ln235_reg_694) ? 1'b1 : 1'b0);

assign icmp_ln237_fu_551_p1 = p_chin_s;

assign icmp_ln237_fu_551_p2 = (($signed(zext_ln237_fu_547_p1) < $signed(icmp_ln237_fu_551_p1)) ? 1'b1 : 1'b0);

assign icmp_ln243_fu_417_p1 = p_cinp_s;

assign icmp_ln243_fu_417_p2 = (($signed(zext_ln243_fu_413_p1) < $signed(icmp_ln243_fu_417_p1)) ? 1'b1 : 1'b0);

assign icmp_ln245_1_fu_433_p2 = (($signed(zext_ln243_fu_413_p1) > $signed(sub_ln245_reg_679)) ? 1'b1 : 1'b0);

assign icmp_ln245_fu_428_p2 = (($signed(zext_ln243_fu_413_p1) < $signed(select_ln234_reg_637)) ? 1'b1 : 1'b0);

assign icmp_ln246_fu_516_p1 = p_chin_s;

assign icmp_ln246_fu_516_p2 = (($signed(zext_ln246_fu_512_p1) < $signed(icmp_ln246_fu_516_p1)) ? 1'b1 : 1'b0);

assign icmp_ln251_fu_481_p1 = p_chin_s;

assign icmp_ln251_fu_481_p2 = (($signed(zext_ln251_fu_477_p1) < $signed(icmp_ln251_fu_481_p1)) ? 1'b1 : 1'b0);

assign j_1_fu_521_p2 = (j2_0_reg_175 + 31'd1);

assign j_2_fu_486_p2 = (j3_0_reg_164 + 31'd1);

assign j_fu_624_p3 = ((icmp_ln237_fu_551_p2[0:0] === 1'b1) ? add_ln237_fu_618_p2 : 31'd1);

assign lshr_ln234_1_fu_237_p4 = {{sub_ln234_1_fu_231_p2[31:1]}};

assign lshr_ln234_2_fu_257_p4 = {{p_p_s[31:1]}};

assign lshr_ln234_4_fu_325_p4 = {{sub_ln234_3_fu_319_p2[31:1]}};

assign lshr_ln234_5_fu_345_p4 = {{add_ln234_fu_305_p2[31:1]}};

assign m_axi_In_ddr_ARADDR = In_ddr_addr_reg_717;

assign m_axi_In_ddr_ARBURST = 2'd0;

assign m_axi_In_ddr_ARCACHE = 4'd0;

assign m_axi_In_ddr_ARID = 1'd0;

assign m_axi_In_ddr_ARLEN = p_chin_s;

assign m_axi_In_ddr_ARLOCK = 2'd0;

assign m_axi_In_ddr_ARPROT = 3'd0;

assign m_axi_In_ddr_ARQOS = 4'd0;

assign m_axi_In_ddr_ARREGION = 4'd0;

assign m_axi_In_ddr_ARSIZE = 3'd0;

assign m_axi_In_ddr_ARUSER = 1'd0;

assign m_axi_In_ddr_AWADDR = 32'd0;

assign m_axi_In_ddr_AWBURST = 2'd0;

assign m_axi_In_ddr_AWCACHE = 4'd0;

assign m_axi_In_ddr_AWID = 1'd0;

assign m_axi_In_ddr_AWLEN = 32'd0;

assign m_axi_In_ddr_AWLOCK = 2'd0;

assign m_axi_In_ddr_AWPROT = 3'd0;

assign m_axi_In_ddr_AWQOS = 4'd0;

assign m_axi_In_ddr_AWREGION = 4'd0;

assign m_axi_In_ddr_AWSIZE = 3'd0;

assign m_axi_In_ddr_AWUSER = 1'd0;

assign m_axi_In_ddr_AWVALID = 1'b0;

assign m_axi_In_ddr_BREADY = 1'b0;

assign m_axi_In_ddr_WDATA = 32'd0;

assign m_axi_In_ddr_WID = 1'd0;

assign m_axi_In_ddr_WLAST = 1'b0;

assign m_axi_In_ddr_WSTRB = 4'd0;

assign m_axi_In_ddr_WUSER = 1'd0;

assign m_axi_In_ddr_WVALID = 1'b0;

assign mul_ln235_1_fu_585_p0 = p_chin_s;

assign mul_ln235_1_fu_585_p1 = mul_ln235_1_fu_585_p10;

assign mul_ln235_1_fu_585_p10 = select_ln235_fu_573_p3;

assign mul_ln235_1_fu_585_p2 = ($signed(mul_ln235_1_fu_585_p0) * $signed({{1'b0}, {mul_ln235_1_fu_585_p1}}));

assign mul_ln235_fu_407_p0 = mul_ln235_fu_407_p00;

assign mul_ln235_fu_407_p00 = $unsigned(zext_ln235_1_fu_403_p0);

assign mul_ln235_fu_407_p1 = mul_ln235_fu_407_p10;

assign mul_ln235_fu_407_p10 = $unsigned(zext_ln235_fu_399_p0);

assign mul_ln235_fu_407_p2 = (mul_ln235_fu_407_p0 * mul_ln235_fu_407_p1);

assign mul_ln248_fu_444_p0 = p_chin_s;

assign mul_ln248_fu_444_p1 = zext_ln243_fu_413_p1;

assign mul_ln248_fu_444_p2 = ($signed(mul_ln248_fu_444_p0) * $signed({{1'b0}, {mul_ln248_fu_444_p1}}));

assign mul_ln253_fu_385_p0 = row;

assign mul_ln253_fu_385_p1 = p_cinp_s;

assign mul_ln253_fu_385_p2 = ($signed(mul_ln253_fu_385_p0) * $signed(mul_ln253_fu_385_p1));

assign or_ln245_fu_438_p2 = (icmp_ln245_fu_428_p2 | icmp_ln245_1_fu_433_p2);

assign select_ln234_1_fu_359_p3 = ((tmp_17_fu_311_p3[0:0] === 1'b1) ? sub_ln234_4_fu_339_p2 : zext_ln234_3_fu_355_p1);

assign select_ln234_fu_271_p3 = ((tmp_16_fu_223_p3[0:0] === 1'b1) ? sub_ln234_2_fu_251_p2 : zext_ln234_1_fu_267_p1);

assign select_ln235_1_fu_590_p3 = ((icmp_ln237_fu_551_p2[0:0] === 1'b1) ? j_0_reg_208 : 31'd0);

assign select_ln235_fu_573_p3 = ((icmp_ln237_fu_551_p2[0:0] === 1'b1) ? ap_phi_mux_i_0_phi_fu_201_p4 : add_ln235_1_fu_567_p2);

assign sext_ln239_fu_632_p1 = $signed(grp_fu_613_p2);

assign sext_ln248_fu_542_p1 = $signed(grp_fu_537_p2);

assign sext_ln253_1_fu_449_p1 = mul_ln248_fu_444_p2;

assign sext_ln253_2_fu_458_p1 = $signed(add_ln253_fu_453_p2);

assign sext_ln253_3_fu_507_p1 = $signed(grp_fu_502_p2);

assign sext_ln253_4_fu_467_p1 = $signed(add_ln253_1_fu_462_p2);

assign sext_ln253_fu_391_p1 = $signed(mul_ln253_fu_385_p2);

assign sub_ln234_1_fu_231_p2 = (32'd0 - p_p_s);

assign sub_ln234_2_fu_251_p2 = (32'd0 - zext_ln234_fu_247_p1);

assign sub_ln234_3_fu_319_p2 = ($signed(32'd4294967294) - $signed(p_p_s));

assign sub_ln234_4_fu_339_p2 = (32'd0 - zext_ln234_2_fu_335_p1);

assign sub_ln234_fu_367_p2 = (p_rinp_s - select_ln234_1_fu_359_p3);

assign sub_ln245_fu_379_p0 = p_cinp_s;

assign sub_ln245_fu_379_p2 = ($signed(sub_ln245_fu_379_p0) - $signed(select_ln234_1_fu_359_p3));

assign tmp_16_fu_223_p3 = p_p_s[32'd31];

assign tmp_17_fu_311_p3 = add_ln234_fu_305_p2[32'd31];

assign zext_ln234_1_fu_267_p1 = lshr_ln234_2_fu_257_p4;

assign zext_ln234_2_fu_335_p1 = lshr_ln234_4_fu_325_p4;

assign zext_ln234_3_fu_355_p1 = lshr_ln234_5_fu_345_p4;

assign zext_ln234_fu_247_p1 = lshr_ln234_1_fu_237_p4;

assign zext_ln235_1_fu_403_p0 = p_chin_s;

assign zext_ln235_3_fu_598_p1 = select_ln235_1_fu_590_p3;

assign zext_ln235_fu_399_p0 = p_cinp_s;

assign zext_ln237_fu_547_p1 = j_0_reg_208;

assign zext_ln243_1_fu_395_p1 = In_ddr_offset;

assign zext_ln243_fu_413_p1 = i1_0_reg_153;

assign zext_ln246_fu_512_p1 = j2_0_reg_175;

assign zext_ln251_fu_477_p1 = j3_0_reg_164;

always @ (posedge ap_clk) begin
    zext_ln243_1_reg_689[33:30] <= 4'b0000;
end

endmodule //Read_In_buf_line
