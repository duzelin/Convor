// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module PE_array_entry141 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        row_dout,
        row_empty_n,
        row_read,
        cho_dout,
        cho_empty_n,
        cho_read,
        row_out_din,
        row_out_full_n,
        row_out_write,
        row_out1_din,
        row_out1_full_n,
        row_out1_write,
        row_out2_din,
        row_out2_full_n,
        row_out2_write,
        row_out3_din,
        row_out3_full_n,
        row_out3_write,
        cho_out_din,
        cho_out_full_n,
        cho_out_write,
        cho_out4_din,
        cho_out4_full_n,
        cho_out4_write,
        cho_out5_din,
        cho_out5_full_n,
        cho_out5_write,
        cho_out6_din,
        cho_out6_full_n,
        cho_out6_write,
        cho_out7_din,
        cho_out7_full_n,
        cho_out7_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] row_dout;
input   row_empty_n;
output   row_read;
input  [31:0] cho_dout;
input   cho_empty_n;
output   cho_read;
output  [31:0] row_out_din;
input   row_out_full_n;
output   row_out_write;
output  [31:0] row_out1_din;
input   row_out1_full_n;
output   row_out1_write;
output  [31:0] row_out2_din;
input   row_out2_full_n;
output   row_out2_write;
output  [31:0] row_out3_din;
input   row_out3_full_n;
output   row_out3_write;
output  [31:0] cho_out_din;
input   cho_out_full_n;
output   cho_out_write;
output  [31:0] cho_out4_din;
input   cho_out4_full_n;
output   cho_out4_write;
output  [31:0] cho_out5_din;
input   cho_out5_full_n;
output   cho_out5_write;
output  [31:0] cho_out6_din;
input   cho_out6_full_n;
output   cho_out6_write;
output  [31:0] cho_out7_din;
input   cho_out7_full_n;
output   cho_out7_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg row_read;
reg cho_read;
reg row_out_write;
reg row_out1_write;
reg row_out2_write;
reg row_out3_write;
reg cho_out_write;
reg cho_out4_write;
reg cho_out5_write;
reg cho_out6_write;
reg cho_out7_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    row_blk_n;
reg    cho_blk_n;
reg    row_out_blk_n;
reg    row_out1_blk_n;
reg    row_out2_blk_n;
reg    row_out3_blk_n;
reg    cho_out_blk_n;
reg    cho_out4_blk_n;
reg    cho_out5_blk_n;
reg    cho_out6_blk_n;
reg    cho_out7_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_blk_n = cho_empty_n;
    end else begin
        cho_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out4_blk_n = cho_out4_full_n;
    end else begin
        cho_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out4_write = 1'b1;
    end else begin
        cho_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out5_blk_n = cho_out5_full_n;
    end else begin
        cho_out5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out5_write = 1'b1;
    end else begin
        cho_out5_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out6_blk_n = cho_out6_full_n;
    end else begin
        cho_out6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out6_write = 1'b1;
    end else begin
        cho_out6_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out7_blk_n = cho_out7_full_n;
    end else begin
        cho_out7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out7_write = 1'b1;
    end else begin
        cho_out7_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out_blk_n = cho_out_full_n;
    end else begin
        cho_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_out_write = 1'b1;
    end else begin
        cho_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_read = 1'b1;
    end else begin
        cho_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_blk_n = row_empty_n;
    end else begin
        row_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out1_blk_n = row_out1_full_n;
    end else begin
        row_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out1_write = 1'b1;
    end else begin
        row_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out2_blk_n = row_out2_full_n;
    end else begin
        row_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out2_write = 1'b1;
    end else begin
        row_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out3_blk_n = row_out3_full_n;
    end else begin
        row_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out3_write = 1'b1;
    end else begin
        row_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out_blk_n = row_out_full_n;
    end else begin
        row_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_out_write = 1'b1;
    end else begin
        row_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_read = 1'b1;
    end else begin
        row_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((cho_out7_full_n == 1'b0) | (cho_out6_full_n == 1'b0) | (cho_out5_full_n == 1'b0) | (real_start == 1'b0) | (cho_out4_full_n == 1'b0) | (cho_out_full_n == 1'b0) | (row_out3_full_n == 1'b0) | (row_out2_full_n == 1'b0) | (row_out1_full_n == 1'b0) | (row_out_full_n == 1'b0) | (cho_empty_n == 1'b0) | (row_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign cho_out4_din = cho_dout;

assign cho_out5_din = cho_dout;

assign cho_out6_din = cho_dout;

assign cho_out7_din = cho_dout;

assign cho_out_din = cho_dout;

assign row_out1_din = row_dout;

assign row_out2_din = row_dout;

assign row_out3_din = row_dout;

assign row_out_din = row_dout;

assign start_out = real_start;

endmodule //PE_array_entry141
