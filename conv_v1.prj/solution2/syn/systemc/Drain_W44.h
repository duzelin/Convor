// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Drain_W44_HH_
#define _Drain_W44_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Drain_W44 : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > W_next_V418_dout;
    sc_in< sc_logic > W_next_V418_empty_n;
    sc_out< sc_logic > W_next_V418_read;
    sc_in< sc_lv<32> > p_c_s_dout;
    sc_in< sc_logic > p_c_s_empty_n;
    sc_out< sc_logic > p_c_s_read;
    sc_in< sc_lv<32> > p_chin_s_dout;
    sc_in< sc_logic > p_chin_s_empty_n;
    sc_out< sc_logic > p_chin_s_read;
    sc_in< sc_lv<32> > p_k_s_dout;
    sc_in< sc_logic > p_k_s_empty_n;
    sc_out< sc_logic > p_k_s_read;


    // Module declarations
    Drain_W44(sc_module_name name);
    SC_HAS_PROCESS(Drain_W44);

    ~Drain_W44();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > W_next_V418_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln164_reg_163;
    sc_signal< sc_logic > p_c_s_blk_n;
    sc_signal< sc_logic > p_chin_s_blk_n;
    sc_signal< sc_logic > p_k_s_blk_n;
    sc_signal< sc_lv<128> > indvar_flatten31_reg_82;
    sc_signal< sc_lv<32> > p_c_read_reg_138;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > p_chin_read_reg_143;
    sc_signal< sc_lv<32> > p_k_read_reg_148;
    sc_signal< sc_lv<96> > bound4_fu_109_p2;
    sc_signal< sc_lv<96> > bound4_reg_153;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<128> > bound16_fu_121_p2;
    sc_signal< sc_lv<128> > bound16_reg_158;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > icmp_ln164_fu_127_p2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<128> > add_ln164_fu_132_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state4;
    sc_signal< sc_lv<32> > bound_fu_96_p0;
    sc_signal< sc_lv<64> > cast_fu_93_p1;
    sc_signal< sc_lv<32> > bound_fu_96_p1;
    sc_signal< sc_lv<64> > bound_fu_96_p2;
    sc_signal< sc_lv<64> > bound4_fu_109_p0;
    sc_signal< sc_lv<32> > bound4_fu_109_p1;
    sc_signal< sc_lv<96> > bound16_fu_121_p0;
    sc_signal< sc_lv<32> > bound16_fu_121_p1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<128> > bound16_fu_121_p00;
    sc_signal< sc_lv<128> > bound16_fu_121_p10;
    sc_signal< sc_lv<96> > bound4_fu_109_p00;
    sc_signal< sc_lv<96> > bound4_fu_109_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<128> ap_const_lv128_lc_1;
    static const sc_lv<128> ap_const_lv128_lc_2;
    static const sc_lv<32> ap_const_lv32_4;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_W_next_V418_blk_n();
    void thread_W_next_V418_read();
    void thread_add_ln164_fu_132_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state4_pp0_stage0_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_bound16_fu_121_p0();
    void thread_bound16_fu_121_p00();
    void thread_bound16_fu_121_p1();
    void thread_bound16_fu_121_p10();
    void thread_bound16_fu_121_p2();
    void thread_bound4_fu_109_p0();
    void thread_bound4_fu_109_p00();
    void thread_bound4_fu_109_p1();
    void thread_bound4_fu_109_p10();
    void thread_bound4_fu_109_p2();
    void thread_bound_fu_96_p0();
    void thread_bound_fu_96_p1();
    void thread_bound_fu_96_p2();
    void thread_cast_fu_93_p1();
    void thread_icmp_ln164_fu_127_p2();
    void thread_p_c_s_blk_n();
    void thread_p_c_s_read();
    void thread_p_chin_s_blk_n();
    void thread_p_chin_s_read();
    void thread_p_k_s_blk_n();
    void thread_p_k_s_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
