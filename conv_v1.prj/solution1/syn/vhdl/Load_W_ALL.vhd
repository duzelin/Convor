-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Load_W_ALL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    cho_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cho_empty_n : IN STD_LOGIC;
    cho_read : OUT STD_LOGIC;
    W_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_buf_ce0 : OUT STD_LOGIC;
    W_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_0_V_full_n : IN STD_LOGIC;
    W_next_0_0_V_write : OUT STD_LOGIC;
    W_next_0_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_1_V_full_n : IN STD_LOGIC;
    W_next_0_1_V_write : OUT STD_LOGIC;
    W_next_0_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_2_V_full_n : IN STD_LOGIC;
    W_next_0_2_V_write : OUT STD_LOGIC;
    W_next_0_3_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_3_V_full_n : IN STD_LOGIC;
    W_next_0_3_V_write : OUT STD_LOGIC;
    p_c_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_c_s_empty_n : IN STD_LOGIC;
    p_c_s_read : OUT STD_LOGIC;
    p_chin_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_chin_s_empty_n : IN STD_LOGIC;
    p_chin_s_read : OUT STD_LOGIC;
    p_k_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k_s_empty_n : IN STD_LOGIC;
    p_k_s_read : OUT STD_LOGIC );
end;


architecture behav of Load_W_ALL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal cho_blk_n : STD_LOGIC;
    signal W_next_0_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln182_reg_449 : STD_LOGIC_VECTOR (1 downto 0);
    signal W_next_0_1_V_blk_n : STD_LOGIC;
    signal W_next_0_2_V_blk_n : STD_LOGIC;
    signal W_next_0_3_V_blk_n : STD_LOGIC;
    signal p_c_s_blk_n : STD_LOGIC;
    signal p_chin_s_blk_n : STD_LOGIC;
    signal p_k_s_blk_n : STD_LOGIC;
    signal cho_read_reg_355 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_c_read_reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_chin_read_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_read_reg_370 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln78_fu_204_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_reg_379 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_3_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_3_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_fu_223_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_reg_392 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal chi_fu_238_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal chi_reg_400 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln78_1_fu_254_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_1_reg_405 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln71_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kr_fu_267_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal kr_reg_413 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln78_2_fu_277_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_2_reg_418 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln73_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kc_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kc_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln78_1_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_1_reg_431 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln75_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_fu_312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal o_reg_439 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln78_3_fu_333_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_3_reg_444 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln77_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln182_fu_337_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal col_0_i_i_reg_149 : STD_LOGIC_VECTOR (30 downto 0);
    signal chi_0_i_i_reg_160 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln69_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kr_0_i_i_reg_171 : STD_LOGIC_VECTOR (30 downto 0);
    signal kc_0_i_i_reg_182 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_0_i_i_reg_193 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal sext_ln78_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln78_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_3_fu_208_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_3_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln69_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln71_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_fu_244_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln78_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_1_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln73_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln78_2_fu_273_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln77_fu_293_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln77_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln78_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_4_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_5_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln78_2_fu_341_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_3_fu_345_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln69_fu_218_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    chi_0_i_i_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln73_fu_262_p2 = ap_const_lv1_0))) then 
                chi_0_i_i_reg_160 <= chi_reg_400;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln69_fu_218_p2 = ap_const_lv1_1))) then 
                chi_0_i_i_reg_160 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    col_0_i_i_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln71_fu_233_p2 = ap_const_lv1_0))) then 
                col_0_i_i_reg_149 <= col_reg_392;
            elsif ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_0_i_i_reg_149 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    kc_0_i_i_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln77_fu_306_p2 = ap_const_lv1_1))) then 
                kc_0_i_i_reg_182 <= kc_reg_426;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln73_fu_262_p2 = ap_const_lv1_1))) then 
                kc_0_i_i_reg_182 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    kr_0_i_i_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln75_fu_282_p2 = ap_const_lv1_1))) then 
                kr_0_i_i_reg_171 <= kr_reg_413;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln71_fu_233_p2 = ap_const_lv1_1))) then 
                kr_0_i_i_reg_171 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    o_0_i_i_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((trunc_ln182_reg_449 = ap_const_lv2_1) and (ap_const_logic_0 = W_next_0_1_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_0) and (ap_const_logic_0 = W_next_0_0_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_3) and (ap_const_logic_0 = W_next_0_3_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_2) and (ap_const_logic_0 = W_next_0_2_V_full_n)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                o_0_i_i_reg_193 <= o_reg_439;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln75_fu_282_p2 = ap_const_lv1_0))) then 
                o_0_i_i_reg_193 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln75_fu_282_p2 = ap_const_lv1_0))) then
                add_ln78_1_reg_431 <= add_ln78_1_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                chi_reg_400 <= chi_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cho_read_reg_355 <= cho_dout;
                mul_ln78_3_reg_384 <= mul_ln78_3_fu_208_p2;
                p_c_read_reg_360 <= p_c_s_dout;
                p_chin_read_reg_365 <= p_chin_s_dout;
                p_k_read_reg_370 <= p_k_s_dout;
                trunc_ln78_reg_379 <= trunc_ln78_fu_204_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                col_reg_392 <= col_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kc_reg_426 <= kc_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kr_reg_413 <= kr_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln73_fu_262_p2 = ap_const_lv1_1))) then
                mul_ln78_2_reg_418 <= mul_ln78_2_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                o_reg_439 <= o_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln77_fu_306_p2 = ap_const_lv1_0))) then
                trunc_ln182_reg_449 <= trunc_ln182_fu_337_p1;
                trunc_ln78_3_reg_444 <= trunc_ln78_3_fu_333_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln71_fu_233_p2 = ap_const_lv1_1))) then
                trunc_ln78_1_reg_405 <= trunc_ln78_1_fu_254_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, cho_empty_n, W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n, ap_CS_fsm_state8, trunc_ln182_reg_449, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln71_fu_233_p2, ap_CS_fsm_state4, icmp_ln73_fu_262_p2, ap_CS_fsm_state5, icmp_ln75_fu_282_p2, ap_CS_fsm_state6, icmp_ln77_fu_306_p2, icmp_ln69_fu_218_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln69_fu_218_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln71_fu_233_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln73_fu_262_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln75_fu_282_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln77_fu_306_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if ((not((((trunc_ln182_reg_449 = ap_const_lv2_1) and (ap_const_logic_0 = W_next_0_1_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_0) and (ap_const_logic_0 = W_next_0_0_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_3) and (ap_const_logic_0 = W_next_0_3_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_2) and (ap_const_logic_0 = W_next_0_2_V_full_n)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    W_buf_address0 <= sext_ln78_fu_350_p1(9 - 1 downto 0);

    W_buf_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            W_buf_ce0 <= ap_const_logic_1;
        else 
            W_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_next_0_0_V_blk_n_assign_proc : process(W_next_0_0_V_full_n, ap_CS_fsm_state8, trunc_ln182_reg_449)
    begin
        if (((trunc_ln182_reg_449 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            W_next_0_0_V_blk_n <= W_next_0_0_V_full_n;
        else 
            W_next_0_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    W_next_0_0_V_din <= W_buf_q0;

    W_next_0_0_V_write_assign_proc : process(W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, ap_CS_fsm_state8, trunc_ln182_reg_449)
    begin
        if ((not((((trunc_ln182_reg_449 = ap_const_lv2_1) and (ap_const_logic_0 = W_next_0_1_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_0) and (ap_const_logic_0 = W_next_0_0_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_3) and (ap_const_logic_0 = W_next_0_3_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_2) and (ap_const_logic_0 = W_next_0_2_V_full_n)))) and (trunc_ln182_reg_449 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            W_next_0_0_V_write <= ap_const_logic_1;
        else 
            W_next_0_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    W_next_0_1_V_blk_n_assign_proc : process(W_next_0_1_V_full_n, ap_CS_fsm_state8, trunc_ln182_reg_449)
    begin
        if (((trunc_ln182_reg_449 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            W_next_0_1_V_blk_n <= W_next_0_1_V_full_n;
        else 
            W_next_0_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    W_next_0_1_V_din <= W_buf_q0;

    W_next_0_1_V_write_assign_proc : process(W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, ap_CS_fsm_state8, trunc_ln182_reg_449)
    begin
        if ((not((((trunc_ln182_reg_449 = ap_const_lv2_1) and (ap_const_logic_0 = W_next_0_1_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_0) and (ap_const_logic_0 = W_next_0_0_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_3) and (ap_const_logic_0 = W_next_0_3_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_2) and (ap_const_logic_0 = W_next_0_2_V_full_n)))) and (trunc_ln182_reg_449 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            W_next_0_1_V_write <= ap_const_logic_1;
        else 
            W_next_0_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    W_next_0_2_V_blk_n_assign_proc : process(W_next_0_2_V_full_n, ap_CS_fsm_state8, trunc_ln182_reg_449)
    begin
        if (((trunc_ln182_reg_449 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            W_next_0_2_V_blk_n <= W_next_0_2_V_full_n;
        else 
            W_next_0_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    W_next_0_2_V_din <= W_buf_q0;

    W_next_0_2_V_write_assign_proc : process(W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, ap_CS_fsm_state8, trunc_ln182_reg_449)
    begin
        if ((not((((trunc_ln182_reg_449 = ap_const_lv2_1) and (ap_const_logic_0 = W_next_0_1_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_0) and (ap_const_logic_0 = W_next_0_0_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_3) and (ap_const_logic_0 = W_next_0_3_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_2) and (ap_const_logic_0 = W_next_0_2_V_full_n)))) and (trunc_ln182_reg_449 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            W_next_0_2_V_write <= ap_const_logic_1;
        else 
            W_next_0_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    W_next_0_3_V_blk_n_assign_proc : process(W_next_0_3_V_full_n, ap_CS_fsm_state8, trunc_ln182_reg_449)
    begin
        if (((trunc_ln182_reg_449 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            W_next_0_3_V_blk_n <= W_next_0_3_V_full_n;
        else 
            W_next_0_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    W_next_0_3_V_din <= W_buf_q0;

    W_next_0_3_V_write_assign_proc : process(W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, ap_CS_fsm_state8, trunc_ln182_reg_449)
    begin
        if ((not((((trunc_ln182_reg_449 = ap_const_lv2_1) and (ap_const_logic_0 = W_next_0_1_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_0) and (ap_const_logic_0 = W_next_0_0_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_3) and (ap_const_logic_0 = W_next_0_3_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_2) and (ap_const_logic_0 = W_next_0_2_V_full_n)))) and (trunc_ln182_reg_449 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            W_next_0_3_V_write <= ap_const_logic_1;
        else 
            W_next_0_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln78_1_fu_297_p2 <= std_logic_vector(unsigned(trunc_ln77_fu_293_p1) + unsigned(mul_ln78_2_reg_418));
    add_ln78_2_fu_341_p2 <= std_logic_vector(unsigned(trunc_ln78_3_reg_444) + unsigned(trunc_ln78_1_reg_405));
    add_ln78_3_fu_345_p2 <= std_logic_vector(unsigned(add_ln78_2_fu_341_p2) + unsigned(add_ln78_1_reg_431));
    add_ln78_fu_318_p2 <= std_logic_vector(unsigned(cho_read_reg_355) + unsigned(zext_ln77_fu_302_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
                ap_block_state1 <= ((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state8_assign_proc : process(W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, trunc_ln182_reg_449)
    begin
                ap_block_state8 <= (((trunc_ln182_reg_449 = ap_const_lv2_1) and (ap_const_logic_0 = W_next_0_1_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_0) and (ap_const_logic_0 = W_next_0_0_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_3) and (ap_const_logic_0 = W_next_0_3_V_full_n)) or ((trunc_ln182_reg_449 = ap_const_lv2_2) and (ap_const_logic_0 = W_next_0_2_V_full_n)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln69_fu_218_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln69_fu_218_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    chi_fu_238_p2 <= std_logic_vector(unsigned(chi_0_i_i_reg_160) + unsigned(ap_const_lv31_1));

    cho_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cho_blk_n <= cho_empty_n;
        else 
            cho_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cho_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
        if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cho_read <= ap_const_logic_1;
        else 
            cho_read <= ap_const_logic_0;
        end if; 
    end process;

    col_fu_223_p2 <= std_logic_vector(unsigned(col_0_i_i_reg_149) + unsigned(ap_const_lv31_1));
    icmp_ln69_fu_218_p2 <= "1" when (signed(zext_ln69_fu_214_p1) < signed(p_c_read_reg_360)) else "0";
    icmp_ln71_fu_233_p2 <= "1" when (signed(zext_ln71_fu_229_p1) < signed(p_chin_read_reg_365)) else "0";
    icmp_ln73_fu_262_p2 <= "1" when (signed(zext_ln73_fu_258_p1) < signed(p_k_read_reg_370)) else "0";
    icmp_ln75_fu_282_p2 <= "1" when (kc_0_i_i_reg_182 = p_k_read_reg_370) else "0";
    icmp_ln77_fu_306_p2 <= "1" when (o_0_i_i_reg_193 = ap_const_lv3_4) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln69_fu_218_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln69_fu_218_p2 = ap_const_lv1_0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    kc_fu_287_p2 <= std_logic_vector(unsigned(kc_0_i_i_reg_182) + unsigned(ap_const_lv32_1));
    kr_fu_267_p2 <= std_logic_vector(unsigned(kr_0_i_i_reg_171) + unsigned(ap_const_lv31_1));
    mul_ln78_1_fu_249_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln78_fu_244_p2) * signed(p_k_read_reg_370))), 32));
    mul_ln78_2_fu_277_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln78_2_fu_273_p1) * signed(trunc_ln78_reg_379))), 10));
    mul_ln78_3_fu_208_p0 <= p_chin_s_dout;
    mul_ln78_3_fu_208_p1 <= p_k_s_dout;
    mul_ln78_3_fu_208_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln78_3_fu_208_p0) * signed(mul_ln78_3_fu_208_p1))), 32));
    mul_ln78_4_fu_323_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_k_read_reg_370) * signed(add_ln78_fu_318_p2))), 32));
    mul_ln78_5_fu_328_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln78_4_fu_323_p2) * signed(mul_ln78_3_reg_384))), 32));
    mul_ln78_fu_244_p1 <= zext_ln71_fu_229_p1(31 - 1 downto 0);
    mul_ln78_fu_244_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_k_read_reg_370) * signed('0' &mul_ln78_fu_244_p1))), 32));
    o_fu_312_p2 <= std_logic_vector(unsigned(o_0_i_i_reg_193) + unsigned(ap_const_lv3_1));

    p_c_s_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_s_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_c_s_blk_n <= p_c_s_empty_n;
        else 
            p_c_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_c_s_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
        if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_c_s_read <= ap_const_logic_1;
        else 
            p_c_s_read <= ap_const_logic_0;
        end if; 
    end process;


    p_chin_s_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_chin_s_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_chin_s_blk_n <= p_chin_s_empty_n;
        else 
            p_chin_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_chin_s_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
        if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_chin_s_read <= ap_const_logic_1;
        else 
            p_chin_s_read <= ap_const_logic_0;
        end if; 
    end process;


    p_k_s_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_s_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_s_blk_n <= p_k_s_empty_n;
        else 
            p_k_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_k_s_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
        if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_s_read <= ap_const_logic_1;
        else 
            p_k_s_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln78_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln78_3_fu_345_p2),64));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln182_fu_337_p1 <= o_0_i_i_reg_193(2 - 1 downto 0);
    trunc_ln77_fu_293_p1 <= kc_0_i_i_reg_182(10 - 1 downto 0);
    trunc_ln78_1_fu_254_p1 <= mul_ln78_1_fu_249_p2(10 - 1 downto 0);
    trunc_ln78_2_fu_273_p1 <= kr_0_i_i_reg_171(10 - 1 downto 0);
    trunc_ln78_3_fu_333_p1 <= mul_ln78_5_fu_328_p2(10 - 1 downto 0);
    trunc_ln78_fu_204_p0 <= p_k_s_dout;
    trunc_ln78_fu_204_p1 <= trunc_ln78_fu_204_p0(10 - 1 downto 0);
    zext_ln69_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_i_i_reg_149),32));
    zext_ln71_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chi_0_i_i_reg_160),32));
    zext_ln73_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_0_i_i_reg_171),32));
    zext_ln77_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(o_0_i_i_reg_193),32));
end behav;
