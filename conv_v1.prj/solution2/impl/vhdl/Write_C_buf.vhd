-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Write_C_buf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Out_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    Out_buf_ce0 : OUT STD_LOGIC;
    Out_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Out_buf_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    Out_buf_ce1 : OUT STD_LOGIC;
    Out_buf_we1 : OUT STD_LOGIC;
    Out_buf_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_AWREADY : IN STD_LOGIC;
    m_axi_Out_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_WVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_WREADY : IN STD_LOGIC;
    m_axi_Out_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_WLAST : OUT STD_LOGIC;
    m_axi_Out_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_ARREADY : IN STD_LOGIC;
    m_axi_Out_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_RVALID : IN STD_LOGIC;
    m_axi_Out_ddr_RREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_RLAST : IN STD_LOGIC;
    m_axi_Out_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BVALID : IN STD_LOGIC;
    m_axi_Out_ddr_BREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Out_ddr_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    Out_ddr_offset1 : IN STD_LOGIC_VECTOR (63 downto 0);
    row : IN STD_LOGIC_VECTOR (31 downto 0);
    p_c_s : IN STD_LOGIC_VECTOR (31 downto 0);
    p_chout_s : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Write_C_buf is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Out_ddr_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln297_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln297_reg_460_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln297_reg_460_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln297_reg_460_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_rec_reg_183 : STD_LOGIC_VECTOR (63 downto 0);
    signal cho_0_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_217_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_411 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_fu_223_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_reg_416 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln293_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln293_fu_241_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln293_reg_425 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln293_fu_247_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln293_reg_430 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln293_1_fu_261_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln293_1_reg_435 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln293_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln293_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln293_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln293_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln299_fu_278_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln299_reg_450 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_1_idx8_fu_282_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1_idx8_reg_455 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln297_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln297_reg_460_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln297_reg_460_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln297_reg_460_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln297_reg_460_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln299_2_fu_298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Out_ddr_addr_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_ddr_addr_reg_469_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln299_1_fu_348_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln299_1_reg_475 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln301_1_fu_374_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln301_1_reg_480 : STD_LOGIC_VECTOR (9 downto 0);
    signal cho_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_buf_load_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_394_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal indvar_flatten_reg_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_0_reg_149 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_reg_160 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_1_idx_reg_171 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln299_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln301_fu_390_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_309_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal cast1_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_217_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln295_fu_227_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln295_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln295_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln293_1_fu_255_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln293_fu_273_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln293_fu_273_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln297_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln299_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln299_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln299_2_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln299_2_fu_329_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln299_3_fu_338_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln299_1_fu_325_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln299_fu_342_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln299_1_fu_333_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln301_fu_354_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln301_fu_354_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln301_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln301_1_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln301_1_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln301_fu_368_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln301_fu_364_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_217_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_217_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln293_fu_273_p10 : STD_LOGIC_VECTOR (31 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln293_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((icmp_ln293_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                c_0_reg_160 <= c_fu_394_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_160 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    cho_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln297_fu_292_p2 = ap_const_lv1_1))) then 
                cho_0_reg_194 <= cho_fu_380_p2;
            elsif (((icmp_ln293_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                cho_0_reg_194 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                indvar_flatten_reg_138 <= add_ln293_reg_425;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_138 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_1_idx_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_1_idx_reg_171 <= p_1_idx8_reg_455;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_1_idx_reg_171 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_2_rec_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln297_fu_292_p2 = ap_const_lv1_1))) then 
                p_2_rec_reg_183 <= add_ln299_2_fu_298_p2;
            elsif (((icmp_ln293_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_2_rec_reg_183 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    r_0_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                r_0_reg_149 <= select_ln293_1_reg_435;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_149 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln297_reg_460_pp0_iter1_reg = ap_const_lv1_1))) then
                Out_buf_load_reg_495 <= Out_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln297_fu_292_p2 = ap_const_lv1_1))) then
                Out_ddr_addr_reg_469 <= sum_fu_309_p2(32 - 1 downto 0);
                add_ln299_1_reg_475 <= add_ln299_1_fu_348_p2;
                add_ln301_1_reg_480 <= add_ln301_1_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                Out_ddr_addr_reg_469_pp0_iter1_reg <= Out_ddr_addr_reg_469;
                icmp_ln297_reg_460 <= icmp_ln297_fu_292_p2;
                icmp_ln297_reg_460_pp0_iter1_reg <= icmp_ln297_reg_460;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln293_reg_425 <= add_ln293_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound_reg_411 <= bound_fu_217_p2;
                    sext_reg_416(29 downto 0) <= sext_fu_223_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln297_reg_460_pp0_iter2_reg <= icmp_ln297_reg_460_pp0_iter1_reg;
                icmp_ln297_reg_460_pp0_iter3_reg <= icmp_ln297_reg_460_pp0_iter2_reg;
                icmp_ln297_reg_460_pp0_iter4_reg <= icmp_ln297_reg_460_pp0_iter3_reg;
                icmp_ln297_reg_460_pp0_iter5_reg <= icmp_ln297_reg_460_pp0_iter4_reg;
                icmp_ln297_reg_460_pp0_iter6_reg <= icmp_ln297_reg_460_pp0_iter5_reg;
                icmp_ln297_reg_460_pp0_iter7_reg <= icmp_ln297_reg_460_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_fu_236_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln293_reg_445 <= mul_ln293_fu_273_p2;
                select_ln293_1_reg_435 <= select_ln293_1_fu_261_p3;
                select_ln293_reg_430 <= select_ln293_fu_247_p3;
                trunc_ln299_reg_450 <= trunc_ln299_fu_278_p1;
                    zext_ln293_reg_440(2 downto 0) <= zext_ln293_fu_269_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_1_idx8_reg_455 <= p_1_idx8_fu_282_p2;
            end if;
        end if;
    end process;
    sext_reg_416(63 downto 30) <= "0000000000000000000000000000000000";
    zext_ln293_reg_440(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter8, icmp_ln293_fu_236_p2, ap_CS_fsm_state2, ap_enable_reg_pp0_iter0, icmp_ln297_fu_292_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln293_fu_236_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln297_fu_292_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln297_fu_292_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    Out_buf_address0 <= sext_ln299_fu_386_p1(9 - 1 downto 0);
    Out_buf_address1 <= sext_ln301_fu_390_p1(9 - 1 downto 0);

    Out_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_buf_ce0 <= ap_const_logic_1;
        else 
            Out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Out_buf_ce1 <= ap_const_logic_1;
        else 
            Out_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Out_buf_d1 <= ap_const_lv32_0;

    Out_buf_we1_assign_proc : process(icmp_ln297_reg_460, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln297_reg_460 = ap_const_lv1_1))) then 
            Out_buf_we1 <= ap_const_logic_1;
        else 
            Out_buf_we1 <= ap_const_logic_0;
        end if; 
    end process;


    Out_ddr_blk_n_AW_assign_proc : process(m_axi_Out_ddr_AWREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln297_reg_460_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln297_reg_460_pp0_iter1_reg = ap_const_lv1_1))) then 
            Out_ddr_blk_n_AW <= m_axi_Out_ddr_AWREADY;
        else 
            Out_ddr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    Out_ddr_blk_n_B_assign_proc : process(m_axi_Out_ddr_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln297_reg_460_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln297_reg_460_pp0_iter7_reg = ap_const_lv1_1))) then 
            Out_ddr_blk_n_B <= m_axi_Out_ddr_BVALID;
        else 
            Out_ddr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    Out_ddr_blk_n_W_assign_proc : process(m_axi_Out_ddr_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln297_reg_460_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln297_reg_460_pp0_iter2_reg = ap_const_lv1_1))) then 
            Out_ddr_blk_n_W <= m_axi_Out_ddr_WREADY;
        else 
            Out_ddr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    add_ln293_1_fu_255_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(r_0_reg_149));
    add_ln293_fu_241_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_138) + unsigned(ap_const_lv64_1));
    add_ln299_1_fu_348_p2 <= std_logic_vector(unsigned(add_ln299_fu_342_p2) + unsigned(mul_ln299_1_fu_333_p2));
    add_ln299_2_fu_298_p2 <= std_logic_vector(unsigned(p_2_rec_reg_183) + unsigned(ap_const_lv64_1));
    add_ln299_fu_342_p2 <= std_logic_vector(unsigned(trunc_ln299_3_fu_338_p1) + unsigned(trunc_ln299_1_fu_325_p1));
    add_ln301_1_fu_374_p2 <= std_logic_vector(unsigned(add_ln301_fu_368_p2) + unsigned(trunc_ln301_fu_364_p1));
    add_ln301_fu_368_p2 <= std_logic_vector(unsigned(trunc_ln299_3_fu_338_p1) + unsigned(mul_ln299_1_fu_333_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(3);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_Out_ddr_BVALID, ap_enable_reg_pp0_iter8, icmp_ln297_reg_460_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_Out_ddr_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln297_reg_460_pp0_iter7_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_Out_ddr_BVALID, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, icmp_ln297_reg_460_pp0_iter7_reg, ap_block_state5_io, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((m_axi_Out_ddr_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln297_reg_460_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_Out_ddr_BVALID, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, icmp_ln297_reg_460_pp0_iter7_reg, ap_block_state5_io, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_io)) or ((m_axi_Out_ddr_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln297_reg_460_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_io)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter8_assign_proc : process(m_axi_Out_ddr_BVALID, icmp_ln297_reg_460_pp0_iter7_reg)
    begin
                ap_block_state11_pp0_stage0_iter8 <= ((m_axi_Out_ddr_BVALID = ap_const_logic_0) and (icmp_ln297_reg_460_pp0_iter7_reg = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(m_axi_Out_ddr_AWREADY, icmp_ln297_reg_460_pp0_iter1_reg)
    begin
                ap_block_state5_io <= ((m_axi_Out_ddr_AWREADY = ap_const_logic_0) and (icmp_ln297_reg_460_pp0_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_io_assign_proc : process(m_axi_Out_ddr_WREADY, icmp_ln297_reg_460_pp0_iter2_reg)
    begin
                ap_block_state6_io <= ((m_axi_Out_ddr_WREADY = ap_const_logic_0) and (icmp_ln297_reg_460_pp0_iter2_reg = ap_const_lv1_1));
    end process;

        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln297_fu_292_p2)
    begin
        if ((icmp_ln297_fu_292_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln293_fu_236_p2, ap_CS_fsm_state2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln293_fu_236_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln293_fu_236_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln293_fu_236_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_217_p0 <= bound_fu_217_p00(32 - 1 downto 0);
    bound_fu_217_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast1_fu_213_p0),64));
    bound_fu_217_p1 <= bound_fu_217_p10(32 - 1 downto 0);
    bound_fu_217_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row),64));
    bound_fu_217_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_217_p0) * unsigned(bound_fu_217_p1), 64));
    c_fu_394_p2 <= std_logic_vector(unsigned(select_ln293_reg_430) + unsigned(ap_const_lv31_1));
    cast1_fu_213_p0 <= p_c_s;
    cho_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(cho_0_reg_194));
    icmp_ln293_fu_236_p2 <= "1" when (indvar_flatten_reg_138 = bound_reg_411) else "0";
    icmp_ln295_fu_231_p1 <= p_c_s;
    icmp_ln295_fu_231_p2 <= "1" when (signed(zext_ln295_fu_227_p1) < signed(icmp_ln295_fu_231_p1)) else "0";
    icmp_ln297_fu_292_p1 <= p_chout_s;
    icmp_ln297_fu_292_p2 <= "1" when (signed(cho_0_reg_194) < signed(icmp_ln297_fu_292_p1)) else "0";
    m_axi_Out_ddr_ARADDR <= ap_const_lv32_0;
    m_axi_Out_ddr_ARBURST <= ap_const_lv2_0;
    m_axi_Out_ddr_ARCACHE <= ap_const_lv4_0;
    m_axi_Out_ddr_ARID <= ap_const_lv1_0;
    m_axi_Out_ddr_ARLEN <= ap_const_lv32_0;
    m_axi_Out_ddr_ARLOCK <= ap_const_lv2_0;
    m_axi_Out_ddr_ARPROT <= ap_const_lv3_0;
    m_axi_Out_ddr_ARQOS <= ap_const_lv4_0;
    m_axi_Out_ddr_ARREGION <= ap_const_lv4_0;
    m_axi_Out_ddr_ARSIZE <= ap_const_lv3_0;
    m_axi_Out_ddr_ARUSER <= ap_const_lv1_0;
    m_axi_Out_ddr_ARVALID <= ap_const_logic_0;
    m_axi_Out_ddr_AWADDR <= Out_ddr_addr_reg_469_pp0_iter1_reg;
    m_axi_Out_ddr_AWBURST <= ap_const_lv2_0;
    m_axi_Out_ddr_AWCACHE <= ap_const_lv4_0;
    m_axi_Out_ddr_AWID <= ap_const_lv1_0;
    m_axi_Out_ddr_AWLEN <= ap_const_lv32_1;
    m_axi_Out_ddr_AWLOCK <= ap_const_lv2_0;
    m_axi_Out_ddr_AWPROT <= ap_const_lv3_0;
    m_axi_Out_ddr_AWQOS <= ap_const_lv4_0;
    m_axi_Out_ddr_AWREGION <= ap_const_lv4_0;
    m_axi_Out_ddr_AWSIZE <= ap_const_lv3_0;
    m_axi_Out_ddr_AWUSER <= ap_const_lv1_0;

    m_axi_Out_ddr_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln297_reg_460_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln297_reg_460_pp0_iter1_reg = ap_const_lv1_1))) then 
            m_axi_Out_ddr_AWVALID <= ap_const_logic_1;
        else 
            m_axi_Out_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_Out_ddr_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln297_reg_460_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln297_reg_460_pp0_iter7_reg = ap_const_lv1_1))) then 
            m_axi_Out_ddr_BREADY <= ap_const_logic_1;
        else 
            m_axi_Out_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Out_ddr_RREADY <= ap_const_logic_0;
    m_axi_Out_ddr_WDATA <= Out_buf_load_reg_495;
    m_axi_Out_ddr_WID <= ap_const_lv1_0;
    m_axi_Out_ddr_WLAST <= ap_const_logic_0;
    m_axi_Out_ddr_WSTRB <= ap_const_lv4_F;
    m_axi_Out_ddr_WUSER <= ap_const_lv1_0;

    m_axi_Out_ddr_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln297_reg_460_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln297_reg_460_pp0_iter2_reg = ap_const_lv1_1))) then 
            m_axi_Out_ddr_WVALID <= ap_const_logic_1;
        else 
            m_axi_Out_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln293_fu_273_p0 <= p_c_s;
    mul_ln293_fu_273_p1 <= mul_ln293_fu_273_p10(3 - 1 downto 0);
    mul_ln293_fu_273_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln293_1_fu_261_p3),32));
    mul_ln293_fu_273_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln293_fu_273_p0) * signed('0' &mul_ln293_fu_273_p1))), 32));
    mul_ln299_1_fu_333_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln299_2_fu_329_p1) * signed(trunc_ln299_reg_450))), 10));
    mul_ln299_fu_320_p1 <= p_chout_s;
    mul_ln299_fu_320_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln293_reg_445) * signed(mul_ln299_fu_320_p1))), 32));
    mul_ln301_1_fu_359_p1 <= p_c_s;
    mul_ln301_1_fu_359_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln301_fu_354_p2) * signed(mul_ln301_1_fu_359_p1))), 32));
    mul_ln301_fu_354_p0 <= p_chout_s;
    mul_ln301_fu_354_p1 <= zext_ln293_reg_440(3 - 1 downto 0);
    mul_ln301_fu_354_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln301_fu_354_p0) * signed('0' &mul_ln301_fu_354_p1))), 32));
    p_1_idx8_fu_282_p2 <= std_logic_vector(unsigned(p_2_rec_reg_183) + unsigned(p_1_idx_reg_171));
    select_ln293_1_fu_261_p3 <= 
        r_0_reg_149 when (icmp_ln295_fu_231_p2(0) = '1') else 
        add_ln293_1_fu_255_p2;
    select_ln293_fu_247_p3 <= 
        c_0_reg_160 when (icmp_ln295_fu_231_p2(0) = '1') else 
        ap_const_lv31_0;
    sext_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Out_ddr_offset),64));
        sext_ln299_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln299_1_reg_475),64));

        sext_ln301_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln301_1_reg_480),64));

    sum1_fu_304_p2 <= std_logic_vector(unsigned(Out_ddr_offset1) + unsigned(p_1_idx8_fu_282_p2));
    sum_fu_309_p2 <= std_logic_vector(unsigned(sum1_fu_304_p2) + unsigned(sext_reg_416));
    trunc_ln299_1_fu_325_p1 <= mul_ln299_fu_320_p2(10 - 1 downto 0);
    trunc_ln299_2_fu_329_p0 <= p_chout_s;
    trunc_ln299_2_fu_329_p1 <= trunc_ln299_2_fu_329_p0(10 - 1 downto 0);
    trunc_ln299_3_fu_338_p1 <= cho_0_reg_194(10 - 1 downto 0);
    trunc_ln299_fu_278_p1 <= select_ln293_fu_247_p3(10 - 1 downto 0);
    trunc_ln301_fu_364_p1 <= mul_ln301_1_fu_359_p2(10 - 1 downto 0);
    zext_ln293_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln293_1_fu_261_p3),32));
    zext_ln295_fu_227_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_160),32));
end behav;
