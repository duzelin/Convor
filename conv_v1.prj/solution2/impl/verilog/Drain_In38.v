// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Drain_In38 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        In_pre_V19_dout,
        In_pre_V19_empty_n,
        In_pre_V19_read,
        p_c_s_dout,
        p_c_s_empty_n,
        p_c_s_read,
        p_chin_s_dout,
        p_chin_s_empty_n,
        p_chin_s_read,
        p_k_s_dout,
        p_k_s_empty_n,
        p_k_s_read
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] In_pre_V19_dout;
input   In_pre_V19_empty_n;
output   In_pre_V19_read;
input  [31:0] p_c_s_dout;
input   p_c_s_empty_n;
output   p_c_s_read;
input  [31:0] p_chin_s_dout;
input   p_chin_s_empty_n;
output   p_chin_s_read;
input  [31:0] p_k_s_dout;
input   p_k_s_empty_n;
output   p_k_s_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg In_pre_V19_read;
reg p_c_s_read;
reg p_chin_s_read;
reg p_k_s_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    In_pre_V19_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln147_reg_163;
reg    p_c_s_blk_n;
reg    p_chin_s_blk_n;
reg    p_k_s_blk_n;
reg   [127:0] indvar_flatten31_reg_82;
reg   [31:0] p_c_read_reg_138;
reg    ap_block_state1;
reg   [31:0] p_chin_read_reg_143;
reg   [31:0] p_k_read_reg_148;
wire   [95:0] bound4_fu_109_p2;
reg   [95:0] bound4_reg_153;
wire    ap_CS_fsm_state2;
wire   [127:0] bound16_fu_121_p2;
reg   [127:0] bound16_reg_158;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln147_fu_127_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [127:0] add_ln147_fu_132_p2;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire   [31:0] bound_fu_96_p0;
wire   [63:0] cast_fu_93_p1;
wire   [31:0] bound_fu_96_p1;
wire   [63:0] bound_fu_96_p2;
wire   [63:0] bound4_fu_109_p0;
wire   [31:0] bound4_fu_109_p1;
wire   [95:0] bound16_fu_121_p0;
wire   [31:0] bound16_fu_121_p1;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [127:0] bound16_fu_121_p00;
wire   [127:0] bound16_fu_121_p10;
wire   [95:0] bound4_fu_109_p00;
wire   [95:0] bound4_fu_109_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln147_fu_127_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten31_reg_82 <= add_ln147_fu_132_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten31_reg_82 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound16_reg_158 <= bound16_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound4_reg_153 <= bound4_fu_109_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln147_reg_163 <= icmp_ln147_fu_127_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_read_reg_138 <= p_c_s_dout;
        p_chin_read_reg_143 <= p_chin_s_dout;
        p_k_read_reg_148 <= p_k_s_dout;
    end
end

always @ (*) begin
    if (((icmp_ln147_reg_163 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        In_pre_V19_blk_n = In_pre_V19_empty_n;
    end else begin
        In_pre_V19_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln147_reg_163 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        In_pre_V19_read = 1'b1;
    end else begin
        In_pre_V19_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln147_fu_127_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_s_blk_n = p_c_s_empty_n;
    end else begin
        p_c_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_s_read = 1'b1;
    end else begin
        p_c_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_s_blk_n = p_chin_s_empty_n;
    end else begin
        p_chin_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_s_read = 1'b1;
    end else begin
        p_chin_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_s_blk_n = p_k_s_empty_n;
    end else begin
        p_k_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_s_read = 1'b1;
    end else begin
        p_k_s_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln147_fu_127_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln147_fu_127_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln147_fu_132_p2 = (indvar_flatten31_reg_82 + 128'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln147_reg_163 == 1'd0) & (1'b0 == In_pre_V19_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln147_reg_163 == 1'd0) & (1'b0 == In_pre_V19_empty_n) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((icmp_ln147_reg_163 == 1'd0) & (1'b0 == In_pre_V19_empty_n));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound16_fu_121_p0 = bound16_fu_121_p00;

assign bound16_fu_121_p00 = bound4_reg_153;

assign bound16_fu_121_p1 = bound16_fu_121_p10;

assign bound16_fu_121_p10 = p_c_read_reg_138;

assign bound16_fu_121_p2 = (bound16_fu_121_p0 * bound16_fu_121_p1);

assign bound4_fu_109_p0 = bound4_fu_109_p00;

assign bound4_fu_109_p00 = bound_fu_96_p2;

assign bound4_fu_109_p1 = bound4_fu_109_p10;

assign bound4_fu_109_p10 = p_chin_read_reg_143;

assign bound4_fu_109_p2 = (bound4_fu_109_p0 * bound4_fu_109_p1);

assign bound_fu_96_p0 = cast_fu_93_p1;

assign bound_fu_96_p1 = cast_fu_93_p1;

assign bound_fu_96_p2 = (bound_fu_96_p0 * bound_fu_96_p1);

assign cast_fu_93_p1 = p_k_read_reg_148;

assign icmp_ln147_fu_127_p2 = ((indvar_flatten31_reg_82 == bound16_reg_158) ? 1'b1 : 1'b0);

endmodule //Drain_In38
