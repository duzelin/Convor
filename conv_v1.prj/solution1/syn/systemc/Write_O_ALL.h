// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Write_O_ALL_HH_
#define _Write_O_ALL_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Write_O_ALL : public sc_module {
    // Port declarations 69
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > Out_buf_address0;
    sc_out< sc_logic > Out_buf_ce0;
    sc_out< sc_logic > Out_buf_we0;
    sc_out< sc_lv<32> > Out_buf_d0;
    sc_in< sc_lv<32> > O_0_0_V_dout;
    sc_in< sc_logic > O_0_0_V_empty_n;
    sc_out< sc_logic > O_0_0_V_read;
    sc_in< sc_lv<32> > O_0_1_V_dout;
    sc_in< sc_logic > O_0_1_V_empty_n;
    sc_out< sc_logic > O_0_1_V_read;
    sc_in< sc_lv<32> > O_0_2_V_dout;
    sc_in< sc_logic > O_0_2_V_empty_n;
    sc_out< sc_logic > O_0_2_V_read;
    sc_in< sc_lv<32> > O_0_3_V_dout;
    sc_in< sc_logic > O_0_3_V_empty_n;
    sc_out< sc_logic > O_0_3_V_read;
    sc_in< sc_lv<32> > O_1_0_V_dout;
    sc_in< sc_logic > O_1_0_V_empty_n;
    sc_out< sc_logic > O_1_0_V_read;
    sc_in< sc_lv<32> > O_1_1_V_dout;
    sc_in< sc_logic > O_1_1_V_empty_n;
    sc_out< sc_logic > O_1_1_V_read;
    sc_in< sc_lv<32> > O_1_2_V_dout;
    sc_in< sc_logic > O_1_2_V_empty_n;
    sc_out< sc_logic > O_1_2_V_read;
    sc_in< sc_lv<32> > O_1_3_V_dout;
    sc_in< sc_logic > O_1_3_V_empty_n;
    sc_out< sc_logic > O_1_3_V_read;
    sc_in< sc_lv<32> > O_2_0_V_dout;
    sc_in< sc_logic > O_2_0_V_empty_n;
    sc_out< sc_logic > O_2_0_V_read;
    sc_in< sc_lv<32> > O_2_1_V_dout;
    sc_in< sc_logic > O_2_1_V_empty_n;
    sc_out< sc_logic > O_2_1_V_read;
    sc_in< sc_lv<32> > O_2_2_V_dout;
    sc_in< sc_logic > O_2_2_V_empty_n;
    sc_out< sc_logic > O_2_2_V_read;
    sc_in< sc_lv<32> > O_2_3_V_dout;
    sc_in< sc_logic > O_2_3_V_empty_n;
    sc_out< sc_logic > O_2_3_V_read;
    sc_in< sc_lv<32> > O_3_0_V_dout;
    sc_in< sc_logic > O_3_0_V_empty_n;
    sc_out< sc_logic > O_3_0_V_read;
    sc_in< sc_lv<32> > O_3_1_V_dout;
    sc_in< sc_logic > O_3_1_V_empty_n;
    sc_out< sc_logic > O_3_1_V_read;
    sc_in< sc_lv<32> > O_3_2_V_dout;
    sc_in< sc_logic > O_3_2_V_empty_n;
    sc_out< sc_logic > O_3_2_V_read;
    sc_in< sc_lv<32> > O_3_3_V_dout;
    sc_in< sc_logic > O_3_3_V_empty_n;
    sc_out< sc_logic > O_3_3_V_read;
    sc_in< sc_lv<32> > cho_dout;
    sc_in< sc_logic > cho_empty_n;
    sc_out< sc_logic > cho_read;
    sc_in< sc_lv<32> > p_c_s_dout;
    sc_in< sc_logic > p_c_s_empty_n;
    sc_out< sc_logic > p_c_s_read;
    sc_in< sc_lv<32> > p_chout_s_dout;
    sc_in< sc_logic > p_chout_s_empty_n;
    sc_out< sc_logic > p_chout_s_read;
    sc_in< sc_lv<32> > Out_buf_cho;


    // Module declarations
    Write_O_ALL(sc_module_name name);
    SC_HAS_PROCESS(Write_O_ALL);

    ~Write_O_ALL();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > O_0_0_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln106_fu_366_p2;
    sc_signal< sc_lv<2> > trunc_ln149_reg_458;
    sc_signal< sc_lv<2> > trunc_ln149_1_fu_382_p1;
    sc_signal< sc_logic > O_0_1_V_blk_n;
    sc_signal< sc_logic > O_0_2_V_blk_n;
    sc_signal< sc_logic > O_0_3_V_blk_n;
    sc_signal< sc_logic > O_1_0_V_blk_n;
    sc_signal< sc_logic > O_1_1_V_blk_n;
    sc_signal< sc_logic > O_1_2_V_blk_n;
    sc_signal< sc_logic > O_1_3_V_blk_n;
    sc_signal< sc_logic > O_2_0_V_blk_n;
    sc_signal< sc_logic > O_2_1_V_blk_n;
    sc_signal< sc_logic > O_2_2_V_blk_n;
    sc_signal< sc_logic > O_2_3_V_blk_n;
    sc_signal< sc_logic > O_3_0_V_blk_n;
    sc_signal< sc_logic > O_3_1_V_blk_n;
    sc_signal< sc_logic > O_3_2_V_blk_n;
    sc_signal< sc_logic > O_3_3_V_blk_n;
    sc_signal< sc_logic > cho_blk_n;
    sc_signal< sc_logic > p_c_s_blk_n;
    sc_signal< sc_logic > p_chout_s_blk_n;
    sc_signal< sc_lv<32> > p_chout_read_reg_420;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<10> > trunc_ln103_fu_308_p1;
    sc_signal< sc_lv<10> > trunc_ln103_reg_426;
    sc_signal< sc_lv<32> > p_c_read_reg_431;
    sc_signal< sc_lv<32> > zext_ln103_fu_312_p1;
    sc_signal< sc_lv<32> > zext_ln103_reg_437;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<31> > col_fu_321_p2;
    sc_signal< sc_lv<31> > col_reg_445;
    sc_signal< sc_lv<3> > i_fu_337_p2;
    sc_signal< sc_lv<3> > i_reg_453;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<2> > trunc_ln149_fu_343_p1;
    sc_signal< sc_lv<1> > icmp_ln105_fu_331_p2;
    sc_signal< sc_lv<10> > add_ln108_fu_361_p2;
    sc_signal< sc_lv<10> > add_ln108_reg_462;
    sc_signal< sc_lv<3> > j_fu_372_p2;
    sc_signal< bool > ap_predicate_op61_read_state4;
    sc_signal< bool > ap_predicate_op63_read_state4;
    sc_signal< bool > ap_predicate_op65_read_state4;
    sc_signal< bool > ap_predicate_op67_read_state4;
    sc_signal< bool > ap_predicate_op70_read_state4;
    sc_signal< bool > ap_predicate_op72_read_state4;
    sc_signal< bool > ap_predicate_op74_read_state4;
    sc_signal< bool > ap_predicate_op76_read_state4;
    sc_signal< bool > ap_predicate_op79_read_state4;
    sc_signal< bool > ap_predicate_op81_read_state4;
    sc_signal< bool > ap_predicate_op83_read_state4;
    sc_signal< bool > ap_predicate_op85_read_state4;
    sc_signal< bool > ap_predicate_op88_read_state4;
    sc_signal< bool > ap_predicate_op90_read_state4;
    sc_signal< bool > ap_predicate_op92_read_state4;
    sc_signal< bool > ap_predicate_op94_read_state4;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<31> > col_0_i_i_reg_221;
    sc_signal< sc_lv<3> > i_0_i_i_reg_232;
    sc_signal< sc_lv<1> > icmp_ln103_fu_316_p2;
    sc_signal< sc_lv<3> > j_0_i_i_reg_243;
    sc_signal< sc_lv<32> > ap_phi_mux_O_temp_phi_fu_257_p32;
    sc_signal< sc_lv<64> > sext_ln108_fu_415_p1;
    sc_signal< sc_lv<3> > mul_ln108_fu_347_p1;
    sc_signal< sc_lv<32> > mul_ln108_fu_347_p2;
    sc_signal< sc_lv<32> > mul_ln108_1_fu_352_p2;
    sc_signal< sc_lv<10> > trunc_ln108_fu_357_p1;
    sc_signal< sc_lv<32> > sub_ln108_fu_390_p2;
    sc_signal< sc_lv<32> > mul_ln108_2_fu_395_p2;
    sc_signal< sc_lv<10> > trunc_ln108_1_fu_400_p1;
    sc_signal< sc_lv<10> > zext_ln148_fu_378_p1;
    sc_signal< sc_lv<10> > add_ln108_1_fu_404_p2;
    sc_signal< sc_lv<10> > add_ln108_2_fu_410_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_lv<32> > mul_ln108_fu_347_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_O_0_0_V_blk_n();
    void thread_O_0_0_V_read();
    void thread_O_0_1_V_blk_n();
    void thread_O_0_1_V_read();
    void thread_O_0_2_V_blk_n();
    void thread_O_0_2_V_read();
    void thread_O_0_3_V_blk_n();
    void thread_O_0_3_V_read();
    void thread_O_1_0_V_blk_n();
    void thread_O_1_0_V_read();
    void thread_O_1_1_V_blk_n();
    void thread_O_1_1_V_read();
    void thread_O_1_2_V_blk_n();
    void thread_O_1_2_V_read();
    void thread_O_1_3_V_blk_n();
    void thread_O_1_3_V_read();
    void thread_O_2_0_V_blk_n();
    void thread_O_2_0_V_read();
    void thread_O_2_1_V_blk_n();
    void thread_O_2_1_V_read();
    void thread_O_2_2_V_blk_n();
    void thread_O_2_2_V_read();
    void thread_O_2_3_V_blk_n();
    void thread_O_2_3_V_read();
    void thread_O_3_0_V_blk_n();
    void thread_O_3_0_V_read();
    void thread_O_3_1_V_blk_n();
    void thread_O_3_1_V_read();
    void thread_O_3_2_V_blk_n();
    void thread_O_3_2_V_read();
    void thread_O_3_3_V_blk_n();
    void thread_O_3_3_V_read();
    void thread_Out_buf_address0();
    void thread_Out_buf_ce0();
    void thread_Out_buf_d0();
    void thread_Out_buf_we0();
    void thread_add_ln108_1_fu_404_p2();
    void thread_add_ln108_2_fu_410_p2();
    void thread_add_ln108_fu_361_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_block_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_O_temp_phi_fu_257_p32();
    void thread_ap_predicate_op61_read_state4();
    void thread_ap_predicate_op63_read_state4();
    void thread_ap_predicate_op65_read_state4();
    void thread_ap_predicate_op67_read_state4();
    void thread_ap_predicate_op70_read_state4();
    void thread_ap_predicate_op72_read_state4();
    void thread_ap_predicate_op74_read_state4();
    void thread_ap_predicate_op76_read_state4();
    void thread_ap_predicate_op79_read_state4();
    void thread_ap_predicate_op81_read_state4();
    void thread_ap_predicate_op83_read_state4();
    void thread_ap_predicate_op85_read_state4();
    void thread_ap_predicate_op88_read_state4();
    void thread_ap_predicate_op90_read_state4();
    void thread_ap_predicate_op92_read_state4();
    void thread_ap_predicate_op94_read_state4();
    void thread_ap_ready();
    void thread_cho_blk_n();
    void thread_cho_read();
    void thread_col_fu_321_p2();
    void thread_i_fu_337_p2();
    void thread_icmp_ln103_fu_316_p2();
    void thread_icmp_ln105_fu_331_p2();
    void thread_icmp_ln106_fu_366_p2();
    void thread_j_fu_372_p2();
    void thread_mul_ln108_1_fu_352_p2();
    void thread_mul_ln108_2_fu_395_p2();
    void thread_mul_ln108_fu_347_p1();
    void thread_mul_ln108_fu_347_p10();
    void thread_mul_ln108_fu_347_p2();
    void thread_p_c_s_blk_n();
    void thread_p_c_s_read();
    void thread_p_chout_s_blk_n();
    void thread_p_chout_s_read();
    void thread_sext_ln108_fu_415_p1();
    void thread_sub_ln108_fu_390_p2();
    void thread_trunc_ln103_fu_308_p1();
    void thread_trunc_ln108_1_fu_400_p1();
    void thread_trunc_ln108_fu_357_p1();
    void thread_trunc_ln149_1_fu_382_p1();
    void thread_trunc_ln149_fu_343_p1();
    void thread_zext_ln103_fu_312_p1();
    void thread_zext_ln148_fu_378_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
