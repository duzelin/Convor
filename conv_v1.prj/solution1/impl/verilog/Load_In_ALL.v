// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Load_In_ALL (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        In_buf_address0,
        In_buf_ce0,
        In_buf_q0,
        In_next_0_0_V_din,
        In_next_0_0_V_full_n,
        In_next_0_0_V_write,
        In_next_1_0_V_din,
        In_next_1_0_V_full_n,
        In_next_1_0_V_write,
        In_next_2_0_V_din,
        In_next_2_0_V_full_n,
        In_next_2_0_V_write,
        In_next_3_0_V_din,
        In_next_3_0_V_full_n,
        In_next_3_0_V_write,
        p_c_out_din,
        p_c_out_full_n,
        p_c_out_write,
        p_c_out1_din,
        p_c_out1_full_n,
        p_c_out1_write,
        p_chin_out_din,
        p_chin_out_full_n,
        p_chin_out_write,
        p_chin_out2_din,
        p_chin_out2_full_n,
        p_chin_out2_write,
        p_k_out_din,
        p_k_out_full_n,
        p_k_out_write,
        p_k_out3_din,
        p_k_out3_full_n,
        p_k_out3_write,
        p_c_s,
        p_chin_s,
        p_k_s,
        p_s_s,
        In_buffer_start,
        p_cin_s,
        In_buffer_length
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [8:0] In_buf_address0;
output   In_buf_ce0;
input  [31:0] In_buf_q0;
output  [31:0] In_next_0_0_V_din;
input   In_next_0_0_V_full_n;
output   In_next_0_0_V_write;
output  [31:0] In_next_1_0_V_din;
input   In_next_1_0_V_full_n;
output   In_next_1_0_V_write;
output  [31:0] In_next_2_0_V_din;
input   In_next_2_0_V_full_n;
output   In_next_2_0_V_write;
output  [31:0] In_next_3_0_V_din;
input   In_next_3_0_V_full_n;
output   In_next_3_0_V_write;
output  [31:0] p_c_out_din;
input   p_c_out_full_n;
output   p_c_out_write;
output  [31:0] p_c_out1_din;
input   p_c_out1_full_n;
output   p_c_out1_write;
output  [31:0] p_chin_out_din;
input   p_chin_out_full_n;
output   p_chin_out_write;
output  [31:0] p_chin_out2_din;
input   p_chin_out2_full_n;
output   p_chin_out2_write;
output  [31:0] p_k_out_din;
input   p_k_out_full_n;
output   p_k_out_write;
output  [31:0] p_k_out3_din;
input   p_k_out3_full_n;
output   p_k_out3_write;
input  [31:0] p_c_s;
input  [31:0] p_chin_s;
input  [31:0] p_k_s;
input  [31:0] p_s_s;
input  [31:0] In_buffer_start;
input  [31:0] p_cin_s;
input  [31:0] In_buffer_length;

reg ap_done;
reg ap_idle;
reg start_write;
reg In_buf_ce0;
reg In_next_0_0_V_write;
reg In_next_1_0_V_write;
reg In_next_2_0_V_write;
reg In_next_3_0_V_write;
reg p_c_out_write;
reg p_c_out1_write;
reg p_chin_out_write;
reg p_chin_out2_write;
reg p_k_out_write;
reg p_k_out3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    In_next_0_0_V_blk_n;
wire    ap_CS_fsm_state43;
reg   [1:0] trunc_ln182_reg_488;
reg    In_next_1_0_V_blk_n;
reg    In_next_2_0_V_blk_n;
reg    In_next_3_0_V_blk_n;
reg    p_c_out_blk_n;
reg    p_c_out1_blk_n;
reg    p_chin_out_blk_n;
reg    p_chin_out2_blk_n;
reg    p_k_out_blk_n;
reg    p_k_out3_blk_n;
reg    ap_block_state1;
wire   [31:0] zext_ln32_fu_259_p1;
reg   [31:0] zext_ln32_reg_428;
wire    ap_CS_fsm_state2;
wire   [30:0] col_fu_268_p2;
reg   [30:0] col_reg_436;
wire   [31:0] zext_ln34_fu_274_p1;
reg   [31:0] zext_ln34_reg_441;
wire    ap_CS_fsm_state3;
wire   [30:0] chi_fu_283_p2;
reg   [30:0] chi_reg_449;
wire   [31:0] zext_ln36_fu_289_p1;
reg   [31:0] zext_ln36_reg_454;
wire    ap_CS_fsm_state4;
wire   [30:0] kr_fu_298_p2;
reg   [30:0] kr_reg_462;
wire   [31:0] kc_fu_309_p2;
reg   [31:0] kc_reg_470;
wire    ap_CS_fsm_state5;
wire   [2:0] r_fu_325_p2;
reg   [2:0] r_reg_478;
wire    ap_CS_fsm_state6;
wire  signed [31:0] tmp_i_i_fu_367_p2;
reg  signed [31:0] tmp_i_i_reg_483;
wire   [0:0] icmp_ln40_fu_319_p2;
wire   [1:0] trunc_ln182_fu_373_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state42;
reg   [30:0] col_0_i_i_reg_185;
wire   [0:0] icmp_ln34_fu_278_p2;
reg   [30:0] chi_0_i_i_reg_196;
wire   [0:0] icmp_ln32_fu_263_p2;
wire   [0:0] icmp_ln36_fu_293_p2;
reg   [30:0] kr_0_i_i_reg_207;
wire   [0:0] icmp_ln38_fu_304_p2;
reg   [31:0] kc_0_i_i_reg_218;
reg   [2:0] r_0_i_i_reg_230;
reg    ap_block_state43;
wire  signed [63:0] sext_ln43_fu_406_p1;
wire  signed [31:0] icmp_ln34_fu_278_p1;
wire  signed [31:0] mul_ln41_fu_335_p0;
wire   [2:0] mul_ln41_fu_335_p1;
wire   [31:0] mul_ln41_fu_335_p2;
wire  signed [31:0] mul_ln42_fu_346_p0;
wire   [30:0] mul_ln42_fu_346_p1;
wire  signed [31:0] mul_ln43_fu_355_p0;
wire  signed [31:0] r_in_fu_341_p2;
wire   [31:0] mul_ln42_fu_346_p2;
wire   [31:0] mul_ln43_fu_355_p2;
wire   [31:0] tmp1_fu_361_p2;
wire  signed [31:0] tmp1_i_i_fu_381_p0;
wire   [31:0] tmp1_i_i_fu_381_p2;
wire   [31:0] add_ln43_fu_385_p2;
wire   [31:0] grp_fu_400_p0;
wire   [31:0] grp_fu_400_p2;
reg    grp_fu_400_ap_start;
wire    grp_fu_400_ap_done;
reg   [42:0] ap_NS_fsm;
wire   [31:0] mul_ln41_fu_335_p10;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 43'd1;
end

Systolic_Array_Cobkb #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Systolic_Array_Cobkb_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_400_ap_start),
    .done(grp_fu_400_ap_done),
    .din0(grp_fu_400_p0),
    .din1(In_buffer_length),
    .ce(1'b1),
    .dout(grp_fu_400_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln32_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        chi_0_i_i_reg_196 <= chi_reg_449;
    end else if (((icmp_ln32_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        chi_0_i_i_reg_196 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln34_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_0_i_i_reg_185 <= col_reg_436;
    end else if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_0_i_i_reg_185 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        kc_0_i_i_reg_218 <= kc_reg_470;
    end else if (((icmp_ln36_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        kc_0_i_i_reg_218 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln38_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        kr_0_i_i_reg_207 <= kr_reg_462;
    end else if (((icmp_ln34_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        kr_0_i_i_reg_207 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b0 == In_next_3_0_V_full_n) & (trunc_ln182_reg_488 == 2'd3)) | ((1'b0 == In_next_2_0_V_full_n) & (trunc_ln182_reg_488 == 2'd2)) | ((1'b0 == In_next_1_0_V_full_n) & (trunc_ln182_reg_488 == 2'd1)) | ((1'b0 == In_next_0_0_V_full_n) & (trunc_ln182_reg_488 == 2'd0))) & (1'b1 == ap_CS_fsm_state43))) begin
        r_0_i_i_reg_230 <= r_reg_478;
    end else if (((icmp_ln38_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        r_0_i_i_reg_230 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        chi_reg_449 <= chi_fu_283_p2;
        zext_ln34_reg_441[30 : 0] <= zext_ln34_fu_274_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        col_reg_436 <= col_fu_268_p2;
        zext_ln32_reg_428[30 : 0] <= zext_ln32_fu_259_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kc_reg_470 <= kc_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kr_reg_462 <= kr_fu_298_p2;
        zext_ln36_reg_454[30 : 0] <= zext_ln36_fu_289_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_reg_478 <= r_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln40_fu_319_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_i_i_reg_483 <= tmp_i_i_fu_367_p2;
        trunc_ln182_reg_488 <= trunc_ln182_fu_373_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        In_buf_ce0 = 1'b1;
    end else begin
        In_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (trunc_ln182_reg_488 == 2'd0))) begin
        In_next_0_0_V_blk_n = In_next_0_0_V_full_n;
    end else begin
        In_next_0_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == In_next_3_0_V_full_n) & (trunc_ln182_reg_488 == 2'd3)) | ((1'b0 == In_next_2_0_V_full_n) & (trunc_ln182_reg_488 == 2'd2)) | ((1'b0 == In_next_1_0_V_full_n) & (trunc_ln182_reg_488 == 2'd1)) | ((1'b0 == In_next_0_0_V_full_n) & (trunc_ln182_reg_488 == 2'd0))) & (1'b1 == ap_CS_fsm_state43) & (trunc_ln182_reg_488 == 2'd0))) begin
        In_next_0_0_V_write = 1'b1;
    end else begin
        In_next_0_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (trunc_ln182_reg_488 == 2'd1))) begin
        In_next_1_0_V_blk_n = In_next_1_0_V_full_n;
    end else begin
        In_next_1_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == In_next_3_0_V_full_n) & (trunc_ln182_reg_488 == 2'd3)) | ((1'b0 == In_next_2_0_V_full_n) & (trunc_ln182_reg_488 == 2'd2)) | ((1'b0 == In_next_1_0_V_full_n) & (trunc_ln182_reg_488 == 2'd1)) | ((1'b0 == In_next_0_0_V_full_n) & (trunc_ln182_reg_488 == 2'd0))) & (1'b1 == ap_CS_fsm_state43) & (trunc_ln182_reg_488 == 2'd1))) begin
        In_next_1_0_V_write = 1'b1;
    end else begin
        In_next_1_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (trunc_ln182_reg_488 == 2'd2))) begin
        In_next_2_0_V_blk_n = In_next_2_0_V_full_n;
    end else begin
        In_next_2_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == In_next_3_0_V_full_n) & (trunc_ln182_reg_488 == 2'd3)) | ((1'b0 == In_next_2_0_V_full_n) & (trunc_ln182_reg_488 == 2'd2)) | ((1'b0 == In_next_1_0_V_full_n) & (trunc_ln182_reg_488 == 2'd1)) | ((1'b0 == In_next_0_0_V_full_n) & (trunc_ln182_reg_488 == 2'd0))) & (1'b1 == ap_CS_fsm_state43) & (trunc_ln182_reg_488 == 2'd2))) begin
        In_next_2_0_V_write = 1'b1;
    end else begin
        In_next_2_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (trunc_ln182_reg_488 == 2'd3))) begin
        In_next_3_0_V_blk_n = In_next_3_0_V_full_n;
    end else begin
        In_next_3_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((1'b0 == In_next_3_0_V_full_n) & (trunc_ln182_reg_488 == 2'd3)) | ((1'b0 == In_next_2_0_V_full_n) & (trunc_ln182_reg_488 == 2'd2)) | ((1'b0 == In_next_1_0_V_full_n) & (trunc_ln182_reg_488 == 2'd1)) | ((1'b0 == In_next_0_0_V_full_n) & (trunc_ln182_reg_488 == 2'd0))) & (1'b1 == ap_CS_fsm_state43) & (trunc_ln182_reg_488 == 2'd3))) begin
        In_next_3_0_V_write = 1'b1;
    end else begin
        In_next_3_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_400_ap_start = 1'b1;
    end else begin
        grp_fu_400_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_out1_blk_n = p_c_out1_full_n;
    end else begin
        p_c_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_out1_write = 1'b1;
    end else begin
        p_c_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_out_blk_n = p_c_out_full_n;
    end else begin
        p_c_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_out_write = 1'b1;
    end else begin
        p_c_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_out2_blk_n = p_chin_out2_full_n;
    end else begin
        p_chin_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_out2_write = 1'b1;
    end else begin
        p_chin_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_out_blk_n = p_chin_out_full_n;
    end else begin
        p_chin_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_out_write = 1'b1;
    end else begin
        p_chin_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out3_blk_n = p_k_out3_full_n;
    end else begin
        p_k_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out3_write = 1'b1;
    end else begin
        p_k_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_blk_n = p_k_out_full_n;
    end else begin
        p_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_out_write = 1'b1;
    end else begin
        p_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln32_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln34_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln36_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln38_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln40_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if ((~(((1'b0 == In_next_3_0_V_full_n) & (trunc_ln182_reg_488 == 2'd3)) | ((1'b0 == In_next_2_0_V_full_n) & (trunc_ln182_reg_488 == 2'd2)) | ((1'b0 == In_next_1_0_V_full_n) & (trunc_ln182_reg_488 == 2'd1)) | ((1'b0 == In_next_0_0_V_full_n) & (trunc_ln182_reg_488 == 2'd0))) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign In_buf_address0 = sext_ln43_fu_406_p1;

assign In_next_0_0_V_din = In_buf_q0;

assign In_next_1_0_V_din = In_buf_q0;

assign In_next_2_0_V_din = In_buf_q0;

assign In_next_3_0_V_din = In_buf_q0;

assign add_ln43_fu_385_p2 = (tmp1_i_i_fu_381_p2 + zext_ln34_reg_441);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (p_k_out3_full_n == 1'b0) | (p_k_out_full_n == 1'b0) | (p_chin_out2_full_n == 1'b0) | (p_chin_out_full_n == 1'b0) | (p_c_out1_full_n == 1'b0) | (p_c_out_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state43 = (((1'b0 == In_next_3_0_V_full_n) & (trunc_ln182_reg_488 == 2'd3)) | ((1'b0 == In_next_2_0_V_full_n) & (trunc_ln182_reg_488 == 2'd2)) | ((1'b0 == In_next_1_0_V_full_n) & (trunc_ln182_reg_488 == 2'd1)) | ((1'b0 == In_next_0_0_V_full_n) & (trunc_ln182_reg_488 == 2'd0)));
end

assign ap_ready = internal_ap_ready;

assign chi_fu_283_p2 = (chi_0_i_i_reg_196 + 31'd1);

assign col_fu_268_p2 = (col_0_i_i_reg_185 + 31'd1);

assign grp_fu_400_p0 = (add_ln43_fu_385_p2 + In_buffer_start);

assign icmp_ln32_fu_263_p2 = (($signed(zext_ln32_fu_259_p1) < $signed(p_c_s)) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_278_p1 = p_chin_s;

assign icmp_ln34_fu_278_p2 = (($signed(zext_ln34_fu_274_p1) < $signed(icmp_ln34_fu_278_p1)) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_293_p2 = (($signed(zext_ln36_fu_289_p1) < $signed(p_k_s)) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_304_p2 = ((kc_0_i_i_reg_218 == p_k_s) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_319_p2 = ((r_0_i_i_reg_230 == 3'd4) ? 1'b1 : 1'b0);

assign kc_fu_309_p2 = (kc_0_i_i_reg_218 + 32'd1);

assign kr_fu_298_p2 = (kr_0_i_i_reg_207 + 31'd1);

assign mul_ln41_fu_335_p0 = p_s_s;

assign mul_ln41_fu_335_p1 = mul_ln41_fu_335_p10;

assign mul_ln41_fu_335_p10 = r_0_i_i_reg_230;

assign mul_ln41_fu_335_p2 = ($signed(mul_ln41_fu_335_p0) * $signed({{1'b0}, {mul_ln41_fu_335_p1}}));

assign mul_ln42_fu_346_p0 = p_s_s;

assign mul_ln42_fu_346_p1 = zext_ln32_reg_428;

assign mul_ln42_fu_346_p2 = ($signed(mul_ln42_fu_346_p0) * $signed({{1'b0}, {mul_ln42_fu_346_p1}}));

assign mul_ln43_fu_355_p0 = p_cin_s;

assign mul_ln43_fu_355_p2 = ($signed(mul_ln43_fu_355_p0) * $signed(r_in_fu_341_p2));

assign p_c_out1_din = p_c_s;

assign p_c_out_din = p_c_s;

assign p_chin_out2_din = p_chin_s;

assign p_chin_out_din = p_chin_s;

assign p_k_out3_din = p_k_s;

assign p_k_out_din = p_k_s;

assign r_fu_325_p2 = (r_0_i_i_reg_230 + 3'd1);

assign r_in_fu_341_p2 = (mul_ln41_fu_335_p2 + zext_ln36_reg_454);

assign sext_ln43_fu_406_p1 = $signed(grp_fu_400_p2);

assign start_out = real_start;

assign tmp1_fu_361_p2 = (mul_ln42_fu_346_p2 + mul_ln43_fu_355_p2);

assign tmp1_i_i_fu_381_p0 = p_chin_s;

assign tmp1_i_i_fu_381_p2 = ($signed(tmp1_i_i_fu_381_p0) * $signed(tmp_i_i_reg_483));

assign tmp_i_i_fu_367_p2 = (tmp1_fu_361_p2 + kc_0_i_i_reg_218);

assign trunc_ln182_fu_373_p1 = r_0_i_i_reg_230[1:0];

assign zext_ln32_fu_259_p1 = col_0_i_i_reg_185;

assign zext_ln34_fu_274_p1 = chi_0_i_i_reg_196;

assign zext_ln36_fu_289_p1 = kr_0_i_i_reg_207;

always @ (posedge ap_clk) begin
    zext_ln32_reg_428[31] <= 1'b0;
    zext_ln34_reg_441[31] <= 1'b0;
    zext_ln36_reg_454[31] <= 1'b0;
end

endmodule //Load_In_ALL
