// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Drain_W43_HH_
#define _Drain_W43_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Drain_W43 : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > W_next_V417_dout;
    sc_in< sc_logic > W_next_V417_empty_n;
    sc_out< sc_logic > W_next_V417_read;
    sc_in< sc_lv<32> > p_c_s_dout;
    sc_in< sc_logic > p_c_s_empty_n;
    sc_out< sc_logic > p_c_s_read;
    sc_in< sc_lv<32> > p_chin_s_dout;
    sc_in< sc_logic > p_chin_s_empty_n;
    sc_out< sc_logic > p_chin_s_read;
    sc_in< sc_lv<32> > p_k_s_dout;
    sc_in< sc_logic > p_k_s_empty_n;
    sc_out< sc_logic > p_k_s_read;


    // Module declarations
    Drain_W43(sc_module_name name);
    SC_HAS_PROCESS(Drain_W43);

    ~Drain_W43();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > W_next_V417_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln170_fu_167_p2;
    sc_signal< sc_logic > p_c_s_blk_n;
    sc_signal< sc_logic > p_chin_s_blk_n;
    sc_signal< sc_logic > p_k_s_blk_n;
    sc_signal< sc_lv<32> > p_c_read_reg_178;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > p_chin_read_reg_183;
    sc_signal< sc_lv<32> > p_k_read_reg_188;
    sc_signal< sc_lv<31> > col_fu_131_p2;
    sc_signal< sc_lv<31> > col_reg_197;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<31> > chi_fu_146_p2;
    sc_signal< sc_lv<31> > chi_reg_205;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<31> > kr_fu_161_p2;
    sc_signal< sc_lv<31> > kr_reg_213;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > kc_fu_172_p2;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<31> > col_0_i_i_reg_78;
    sc_signal< sc_lv<1> > icmp_ln166_fu_141_p2;
    sc_signal< sc_lv<31> > chi_0_i_i_reg_89;
    sc_signal< sc_lv<1> > icmp_ln164_fu_126_p2;
    sc_signal< sc_lv<1> > icmp_ln168_fu_156_p2;
    sc_signal< sc_lv<31> > kr_0_i_i_reg_100;
    sc_signal< sc_lv<32> > kc_0_i_i_reg_111;
    sc_signal< sc_lv<32> > zext_ln164_fu_122_p1;
    sc_signal< sc_lv<32> > zext_ln166_fu_137_p1;
    sc_signal< sc_lv<32> > zext_ln168_fu_152_p1;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<31> ap_const_lv31_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_W_next_V417_blk_n();
    void thread_W_next_V417_read();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_block_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_chi_fu_146_p2();
    void thread_col_fu_131_p2();
    void thread_icmp_ln164_fu_126_p2();
    void thread_icmp_ln166_fu_141_p2();
    void thread_icmp_ln168_fu_156_p2();
    void thread_icmp_ln170_fu_167_p2();
    void thread_kc_fu_172_p2();
    void thread_kr_fu_161_p2();
    void thread_p_c_s_blk_n();
    void thread_p_c_s_read();
    void thread_p_chin_s_blk_n();
    void thread_p_chin_s_read();
    void thread_p_k_s_blk_n();
    void thread_p_k_s_read();
    void thread_zext_ln164_fu_122_p1();
    void thread_zext_ln166_fu_137_p1();
    void thread_zext_ln168_fu_152_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
