-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Write_C_buf is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Out_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    Out_buf_ce0 : OUT STD_LOGIC;
    Out_buf_we0 : OUT STD_LOGIC;
    Out_buf_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Out_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_AWVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_AWREADY : IN STD_LOGIC;
    m_axi_Out_ddr_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_WVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_WREADY : IN STD_LOGIC;
    m_axi_Out_ddr_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_WLAST : OUT STD_LOGIC;
    m_axi_Out_ddr_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_ARVALID : OUT STD_LOGIC;
    m_axi_Out_ddr_ARREADY : IN STD_LOGIC;
    m_axi_Out_ddr_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Out_ddr_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Out_ddr_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_RVALID : IN STD_LOGIC;
    m_axi_Out_ddr_RREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Out_ddr_RLAST : IN STD_LOGIC;
    m_axi_Out_ddr_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BVALID : IN STD_LOGIC;
    m_axi_Out_ddr_BREADY : OUT STD_LOGIC;
    m_axi_Out_ddr_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Out_ddr_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Out_ddr_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Out_ddr_offset : IN STD_LOGIC_VECTOR (29 downto 0);
    Out_ddr_offset1 : IN STD_LOGIC_VECTOR (63 downto 0);
    row : IN STD_LOGIC_VECTOR (31 downto 0);
    p_c_s : IN STD_LOGIC_VECTOR (31 downto 0);
    p_chout_s : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Write_C_buf is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Out_ddr_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal Out_ddr_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal Out_ddr_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sext_fu_180_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_reg_373 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln293_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln293_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_198_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_386 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln299_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln299_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln293_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_218_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal c_reg_399 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln299_fu_224_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln299_reg_404 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln295_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Out_ddr_addr_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln299_2_fu_263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln299_2_reg_418 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln297_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln301_1_fu_328_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln301_1_reg_428 : STD_LOGIC_VECTOR (9 downto 0);
    signal cho_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cho_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal Out_buf_load_reg_438 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_reg_132 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_reg_143 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_2_rec_reg_154 : STD_LOGIC_VECTOR (63 downto 0);
    signal cho_0_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln299_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln301_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_242_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0_idx_fu_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_1_idx8_fu_231_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln299_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln299_fu_204_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln295_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln295_fu_213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_fu_237_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln297_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln299_1_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln299_1_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln299_2_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln299_2_fu_278_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln299_3_fu_287_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln299_1_fu_274_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln299_fu_291_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln299_2_fu_282_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln299_1_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln301_fu_308_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln301_fu_308_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln301_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln301_1_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln301_1_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln301_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln301_fu_318_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln293_fu_193_p2 = ap_const_lv1_1))) then 
                c_0_reg_143 <= ap_const_lv31_0;
            elsif (((icmp_ln297_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_143 <= c_reg_399;
            end if; 
        end if;
    end process;

    cho_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_Out_ddr_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                cho_0_reg_165 <= cho_reg_433;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln295_fu_213_p2 = ap_const_lv1_1))) then 
                cho_0_reg_165 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_0_idx_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln297_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0_idx_fu_72 <= p_1_idx8_fu_231_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_idx_fu_72 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    p_2_rec_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_Out_ddr_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                p_2_rec_reg_154 <= add_ln299_2_reg_418;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln295_fu_213_p2 = ap_const_lv1_1))) then 
                p_2_rec_reg_154 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    r_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln295_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_132 <= r_reg_386;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_132 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_Out_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                Out_buf_load_reg_438 <= Out_buf_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Out_ddr_addr_reg_409 <= sum_fu_242_p2(32 - 1 downto 0);
                add_ln299_2_reg_418 <= add_ln299_2_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln297_fu_257_p2 = ap_const_lv1_1))) then
                add_ln301_1_reg_428 <= add_ln301_1_fu_328_p2;
                cho_reg_433 <= cho_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_399 <= c_fu_218_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln293_fu_193_p2 = ap_const_lv1_1))) then
                mul_ln299_reg_391 <= mul_ln299_fu_204_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_386 <= r_fu_198_p2;
                    zext_ln293_reg_378(2 downto 0) <= zext_ln293_fu_189_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    sext_reg_373(29 downto 0) <= sext_fu_180_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln295_fu_213_p2 = ap_const_lv1_1))) then
                trunc_ln299_reg_404 <= trunc_ln299_fu_224_p1;
            end if;
        end if;
    end process;
    sext_reg_373(63 downto 30) <= "0000000000000000000000000000000000";
    zext_ln293_reg_378(31 downto 3) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_Out_ddr_AWREADY, m_axi_Out_ddr_WREADY, m_axi_Out_ddr_BVALID, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state2, icmp_ln293_fu_193_p2, ap_CS_fsm_state3, icmp_ln295_fu_213_p2, ap_CS_fsm_state4, icmp_ln297_fu_257_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln293_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln295_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln297_fu_257_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_Out_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_Out_ddr_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((m_axi_Out_ddr_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    Out_buf_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state4, sext_ln299_fu_303_p1, sext_ln301_fu_345_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Out_buf_address0 <= sext_ln301_fu_345_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Out_buf_address0 <= sext_ln299_fu_303_p1(9 - 1 downto 0);
        else 
            Out_buf_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    Out_buf_ce0_assign_proc : process(m_axi_Out_ddr_AWREADY, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((m_axi_Out_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            Out_buf_ce0 <= ap_const_logic_1;
        else 
            Out_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Out_buf_d0 <= ap_const_lv32_0;

    Out_buf_we0_assign_proc : process(m_axi_Out_ddr_AWREADY, ap_CS_fsm_state5)
    begin
        if (((m_axi_Out_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            Out_buf_we0 <= ap_const_logic_1;
        else 
            Out_buf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Out_ddr_blk_n_AW_assign_proc : process(m_axi_Out_ddr_AWREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Out_ddr_blk_n_AW <= m_axi_Out_ddr_AWREADY;
        else 
            Out_ddr_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    Out_ddr_blk_n_B_assign_proc : process(m_axi_Out_ddr_BVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Out_ddr_blk_n_B <= m_axi_Out_ddr_BVALID;
        else 
            Out_ddr_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    Out_ddr_blk_n_W_assign_proc : process(m_axi_Out_ddr_WREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Out_ddr_blk_n_W <= m_axi_Out_ddr_WREADY;
        else 
            Out_ddr_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    add_ln299_1_fu_297_p2 <= std_logic_vector(unsigned(add_ln299_fu_291_p2) + unsigned(mul_ln299_2_fu_282_p2));
    add_ln299_2_fu_263_p2 <= std_logic_vector(unsigned(p_2_rec_reg_154) + unsigned(ap_const_lv64_1));
    add_ln299_fu_291_p2 <= std_logic_vector(unsigned(trunc_ln299_3_fu_287_p1) + unsigned(trunc_ln299_1_fu_274_p1));
    add_ln301_1_fu_328_p2 <= std_logic_vector(unsigned(add_ln301_fu_322_p2) + unsigned(trunc_ln301_fu_318_p1));
    add_ln301_fu_322_p2 <= std_logic_vector(unsigned(trunc_ln299_3_fu_287_p1) + unsigned(mul_ln299_2_fu_282_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln293_fu_193_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln293_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln293_fu_193_p2)
    begin
        if (((icmp_ln293_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_218_p2 <= std_logic_vector(unsigned(c_0_reg_143) + unsigned(ap_const_lv31_1));
    cho_fu_334_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(cho_0_reg_165));
    icmp_ln293_fu_193_p2 <= "1" when (signed(zext_ln293_fu_189_p1) < signed(row)) else "0";
    icmp_ln295_fu_213_p1 <= p_c_s;
    icmp_ln295_fu_213_p2 <= "1" when (signed(zext_ln295_fu_209_p1) < signed(icmp_ln295_fu_213_p1)) else "0";
    icmp_ln297_fu_257_p1 <= p_chout_s;
    icmp_ln297_fu_257_p2 <= "1" when (signed(cho_0_reg_165) < signed(icmp_ln297_fu_257_p1)) else "0";
    m_axi_Out_ddr_ARADDR <= ap_const_lv32_0;
    m_axi_Out_ddr_ARBURST <= ap_const_lv2_0;
    m_axi_Out_ddr_ARCACHE <= ap_const_lv4_0;
    m_axi_Out_ddr_ARID <= ap_const_lv1_0;
    m_axi_Out_ddr_ARLEN <= ap_const_lv32_0;
    m_axi_Out_ddr_ARLOCK <= ap_const_lv2_0;
    m_axi_Out_ddr_ARPROT <= ap_const_lv3_0;
    m_axi_Out_ddr_ARQOS <= ap_const_lv4_0;
    m_axi_Out_ddr_ARREGION <= ap_const_lv4_0;
    m_axi_Out_ddr_ARSIZE <= ap_const_lv3_0;
    m_axi_Out_ddr_ARUSER <= ap_const_lv1_0;
    m_axi_Out_ddr_ARVALID <= ap_const_logic_0;
    m_axi_Out_ddr_AWADDR <= Out_ddr_addr_reg_409;
    m_axi_Out_ddr_AWBURST <= ap_const_lv2_0;
    m_axi_Out_ddr_AWCACHE <= ap_const_lv4_0;
    m_axi_Out_ddr_AWID <= ap_const_lv1_0;
    m_axi_Out_ddr_AWLEN <= ap_const_lv32_1;
    m_axi_Out_ddr_AWLOCK <= ap_const_lv2_0;
    m_axi_Out_ddr_AWPROT <= ap_const_lv3_0;
    m_axi_Out_ddr_AWQOS <= ap_const_lv4_0;
    m_axi_Out_ddr_AWREGION <= ap_const_lv4_0;
    m_axi_Out_ddr_AWSIZE <= ap_const_lv3_0;
    m_axi_Out_ddr_AWUSER <= ap_const_lv1_0;

    m_axi_Out_ddr_AWVALID_assign_proc : process(m_axi_Out_ddr_AWREADY, ap_CS_fsm_state5)
    begin
        if (((m_axi_Out_ddr_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            m_axi_Out_ddr_AWVALID <= ap_const_logic_1;
        else 
            m_axi_Out_ddr_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_Out_ddr_BREADY_assign_proc : process(m_axi_Out_ddr_BVALID, ap_CS_fsm_state11)
    begin
        if (((m_axi_Out_ddr_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            m_axi_Out_ddr_BREADY <= ap_const_logic_1;
        else 
            m_axi_Out_ddr_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Out_ddr_RREADY <= ap_const_logic_0;
    m_axi_Out_ddr_WDATA <= Out_buf_load_reg_438;
    m_axi_Out_ddr_WID <= ap_const_lv1_0;
    m_axi_Out_ddr_WLAST <= ap_const_logic_0;
    m_axi_Out_ddr_WSTRB <= ap_const_lv4_F;
    m_axi_Out_ddr_WUSER <= ap_const_lv1_0;

    m_axi_Out_ddr_WVALID_assign_proc : process(m_axi_Out_ddr_WREADY, ap_CS_fsm_state6)
    begin
        if (((m_axi_Out_ddr_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_axi_Out_ddr_WVALID <= ap_const_logic_1;
        else 
            m_axi_Out_ddr_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln299_1_fu_269_p1 <= p_chout_s;
    mul_ln299_1_fu_269_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln299_reg_391) * signed(mul_ln299_1_fu_269_p1))), 32));
    mul_ln299_2_fu_282_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln299_2_fu_278_p1) * signed(trunc_ln299_reg_404))), 10));
    mul_ln299_fu_204_p0 <= p_c_s;
    mul_ln299_fu_204_p1 <= zext_ln293_fu_189_p1(3 - 1 downto 0);
    mul_ln299_fu_204_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln299_fu_204_p0) * signed('0' &mul_ln299_fu_204_p1))), 32));
    mul_ln301_1_fu_313_p1 <= p_c_s;
    mul_ln301_1_fu_313_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln301_fu_308_p2) * signed(mul_ln301_1_fu_313_p1))), 32));
    mul_ln301_fu_308_p0 <= p_chout_s;
    mul_ln301_fu_308_p1 <= zext_ln293_reg_378(3 - 1 downto 0);
    mul_ln301_fu_308_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln301_fu_308_p0) * signed('0' &mul_ln301_fu_308_p1))), 32));
    p_1_idx8_fu_231_p2 <= std_logic_vector(unsigned(p_2_rec_reg_154) + unsigned(p_0_idx_fu_72));
    r_fu_198_p2 <= std_logic_vector(unsigned(r_0_reg_132) + unsigned(ap_const_lv3_1));
    sext_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Out_ddr_offset),64));
        sext_ln299_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln299_1_fu_297_p2),64));

        sext_ln301_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln301_1_reg_428),64));

    sum1_fu_237_p2 <= std_logic_vector(unsigned(p_1_idx8_fu_231_p2) + unsigned(Out_ddr_offset1));
    sum_fu_242_p2 <= std_logic_vector(unsigned(sum1_fu_237_p2) + unsigned(sext_reg_373));
    trunc_ln299_1_fu_274_p1 <= mul_ln299_1_fu_269_p2(10 - 1 downto 0);
    trunc_ln299_2_fu_278_p0 <= p_chout_s;
    trunc_ln299_2_fu_278_p1 <= trunc_ln299_2_fu_278_p0(10 - 1 downto 0);
    trunc_ln299_3_fu_287_p1 <= cho_0_reg_165(10 - 1 downto 0);
    trunc_ln299_fu_224_p1 <= c_0_reg_143(10 - 1 downto 0);
    trunc_ln301_fu_318_p1 <= mul_ln301_1_fu_313_p2(10 - 1 downto 0);
    zext_ln293_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_132),32));
    zext_ln295_fu_209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_143),32));
end behav;
