-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Load_In_ALL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    In_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    In_buf_ce0 : OUT STD_LOGIC;
    In_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    In_next_0_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    In_next_0_0_V_full_n : IN STD_LOGIC;
    In_next_0_0_V_write : OUT STD_LOGIC;
    In_next_1_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    In_next_1_0_V_full_n : IN STD_LOGIC;
    In_next_1_0_V_write : OUT STD_LOGIC;
    In_next_2_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    In_next_2_0_V_full_n : IN STD_LOGIC;
    In_next_2_0_V_write : OUT STD_LOGIC;
    In_next_3_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    In_next_3_0_V_full_n : IN STD_LOGIC;
    In_next_3_0_V_write : OUT STD_LOGIC;
    p_c_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_c_out_full_n : IN STD_LOGIC;
    p_c_out_write : OUT STD_LOGIC;
    p_c_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_c_out1_full_n : IN STD_LOGIC;
    p_c_out1_write : OUT STD_LOGIC;
    p_chin_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_chin_out_full_n : IN STD_LOGIC;
    p_chin_out_write : OUT STD_LOGIC;
    p_chin_out2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_chin_out2_full_n : IN STD_LOGIC;
    p_chin_out2_write : OUT STD_LOGIC;
    p_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_k_out_full_n : IN STD_LOGIC;
    p_k_out_write : OUT STD_LOGIC;
    p_k_out3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_k_out3_full_n : IN STD_LOGIC;
    p_k_out3_write : OUT STD_LOGIC;
    p_c_s : IN STD_LOGIC_VECTOR (31 downto 0);
    p_chin_s : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k_s : IN STD_LOGIC_VECTOR (31 downto 0);
    p_s_s : IN STD_LOGIC_VECTOR (31 downto 0);
    In_buffer_start : IN STD_LOGIC_VECTOR (31 downto 0);
    p_cin_s : IN STD_LOGIC_VECTOR (31 downto 0);
    In_buffer_length : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Load_In_ALL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal In_next_0_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal trunc_ln182_reg_488 : STD_LOGIC_VECTOR (1 downto 0);
    signal In_next_1_0_V_blk_n : STD_LOGIC;
    signal In_next_2_0_V_blk_n : STD_LOGIC;
    signal In_next_3_0_V_blk_n : STD_LOGIC;
    signal p_c_out_blk_n : STD_LOGIC;
    signal p_c_out1_blk_n : STD_LOGIC;
    signal p_chin_out_blk_n : STD_LOGIC;
    signal p_chin_out2_blk_n : STD_LOGIC;
    signal p_k_out_blk_n : STD_LOGIC;
    signal p_k_out3_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln32_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln32_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal col_fu_268_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal col_reg_436 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln34_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal chi_fu_283_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal chi_reg_449 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln36_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln36_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kr_fu_298_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal kr_reg_462 : STD_LOGIC_VECTOR (30 downto 0);
    signal kc_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kc_reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal r_fu_325_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_478 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_i_i_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln40_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln182_fu_373_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal col_0_i_i_reg_185 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln34_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal chi_0_i_i_reg_196 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln32_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kr_0_i_i_reg_207 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln38_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kc_0_i_i_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_0_i_i_reg_230 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state43 : BOOLEAN;
    signal sext_ln43_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln34_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_335_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln41_fu_335_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln41_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_fu_346_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_fu_346_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln43_fu_355_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_in_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_fu_355_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_i_i_fu_381_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_i_i_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_400_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_400_ap_start : STD_LOGIC;
    signal grp_fu_400_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);
    signal mul_ln41_fu_335_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component Systolic_Array_Cobkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Systolic_Array_Cobkb_U34 : component Systolic_Array_Cobkb
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_400_ap_start,
        done => grp_fu_400_ap_done,
        din0 => grp_fu_400_p0,
        din1 => In_buffer_length,
        ce => ap_const_logic_1,
        dout => grp_fu_400_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln32_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    chi_0_i_i_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                chi_0_i_i_reg_196 <= chi_reg_449;
            elsif (((icmp_ln32_fu_263_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                chi_0_i_i_reg_196 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    col_0_i_i_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                col_0_i_i_reg_185 <= col_reg_436;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_0_i_i_reg_185 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    kc_0_i_i_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                kc_0_i_i_reg_218 <= kc_reg_470;
            elsif (((icmp_ln36_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                kc_0_i_i_reg_218 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    kr_0_i_i_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln38_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                kr_0_i_i_reg_207 <= kr_reg_462;
            elsif (((icmp_ln34_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                kr_0_i_i_reg_207 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    r_0_i_i_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_0 = In_next_3_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_3)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_2)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_1)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                r_0_i_i_reg_230 <= r_reg_478;
            elsif (((icmp_ln38_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                r_0_i_i_reg_230 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                chi_reg_449 <= chi_fu_283_p2;
                    zext_ln34_reg_441(30 downto 0) <= zext_ln34_fu_274_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                col_reg_436 <= col_fu_268_p2;
                    zext_ln32_reg_428(30 downto 0) <= zext_ln32_fu_259_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kc_reg_470 <= kc_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kr_reg_462 <= kr_fu_298_p2;
                    zext_ln36_reg_454(30 downto 0) <= zext_ln36_fu_289_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                r_reg_478 <= r_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln40_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_i_i_reg_483 <= tmp_i_i_fu_367_p2;
                trunc_ln182_reg_488 <= trunc_ln182_fu_373_p1;
            end if;
        end if;
    end process;
    zext_ln32_reg_428(31) <= '0';
    zext_ln34_reg_441(31) <= '0';
    zext_ln36_reg_454(31) <= '0';

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n, ap_CS_fsm_state43, trunc_ln182_reg_488, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, icmp_ln40_fu_319_p2, icmp_ln34_fu_278_p2, icmp_ln32_fu_263_p2, icmp_ln36_fu_293_p2, icmp_ln38_fu_304_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln32_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln34_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln36_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln38_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln40_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if ((not((((ap_const_logic_0 = In_next_3_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_3)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_2)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_1)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    In_buf_address0 <= sext_ln43_fu_406_p1(9 - 1 downto 0);

    In_buf_ce0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            In_buf_ce0 <= ap_const_logic_1;
        else 
            In_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    In_next_0_0_V_blk_n_assign_proc : process(In_next_0_0_V_full_n, ap_CS_fsm_state43, trunc_ln182_reg_488)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln182_reg_488 = ap_const_lv2_0))) then 
            In_next_0_0_V_blk_n <= In_next_0_0_V_full_n;
        else 
            In_next_0_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    In_next_0_0_V_din <= In_buf_q0;

    In_next_0_0_V_write_assign_proc : process(In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, ap_CS_fsm_state43, trunc_ln182_reg_488)
    begin
        if ((not((((ap_const_logic_0 = In_next_3_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_3)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_2)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_1)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln182_reg_488 = ap_const_lv2_0))) then 
            In_next_0_0_V_write <= ap_const_logic_1;
        else 
            In_next_0_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    In_next_1_0_V_blk_n_assign_proc : process(In_next_1_0_V_full_n, ap_CS_fsm_state43, trunc_ln182_reg_488)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln182_reg_488 = ap_const_lv2_1))) then 
            In_next_1_0_V_blk_n <= In_next_1_0_V_full_n;
        else 
            In_next_1_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    In_next_1_0_V_din <= In_buf_q0;

    In_next_1_0_V_write_assign_proc : process(In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, ap_CS_fsm_state43, trunc_ln182_reg_488)
    begin
        if ((not((((ap_const_logic_0 = In_next_3_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_3)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_2)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_1)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln182_reg_488 = ap_const_lv2_1))) then 
            In_next_1_0_V_write <= ap_const_logic_1;
        else 
            In_next_1_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    In_next_2_0_V_blk_n_assign_proc : process(In_next_2_0_V_full_n, ap_CS_fsm_state43, trunc_ln182_reg_488)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln182_reg_488 = ap_const_lv2_2))) then 
            In_next_2_0_V_blk_n <= In_next_2_0_V_full_n;
        else 
            In_next_2_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    In_next_2_0_V_din <= In_buf_q0;

    In_next_2_0_V_write_assign_proc : process(In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, ap_CS_fsm_state43, trunc_ln182_reg_488)
    begin
        if ((not((((ap_const_logic_0 = In_next_3_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_3)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_2)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_1)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln182_reg_488 = ap_const_lv2_2))) then 
            In_next_2_0_V_write <= ap_const_logic_1;
        else 
            In_next_2_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    In_next_3_0_V_blk_n_assign_proc : process(In_next_3_0_V_full_n, ap_CS_fsm_state43, trunc_ln182_reg_488)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln182_reg_488 = ap_const_lv2_3))) then 
            In_next_3_0_V_blk_n <= In_next_3_0_V_full_n;
        else 
            In_next_3_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    In_next_3_0_V_din <= In_buf_q0;

    In_next_3_0_V_write_assign_proc : process(In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, ap_CS_fsm_state43, trunc_ln182_reg_488)
    begin
        if ((not((((ap_const_logic_0 = In_next_3_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_3)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_2)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_1)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_0)))) and (ap_const_logic_1 = ap_CS_fsm_state43) and (trunc_ln182_reg_488 = ap_const_lv2_3))) then 
            In_next_3_0_V_write <= ap_const_logic_1;
        else 
            In_next_3_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln43_fu_385_p2 <= std_logic_vector(unsigned(tmp1_i_i_fu_381_p2) + unsigned(zext_ln34_reg_441));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0));
    end process;


    ap_block_state43_assign_proc : process(In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, trunc_ln182_reg_488)
    begin
                ap_block_state43 <= (((ap_const_logic_0 = In_next_3_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_3)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_2)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_1)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (trunc_ln182_reg_488 = ap_const_lv2_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln32_fu_263_p2)
    begin
        if (((icmp_ln32_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    chi_fu_283_p2 <= std_logic_vector(unsigned(chi_0_i_i_reg_196) + unsigned(ap_const_lv31_1));
    col_fu_268_p2 <= std_logic_vector(unsigned(col_0_i_i_reg_185) + unsigned(ap_const_lv31_1));

    grp_fu_400_ap_start_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_400_ap_start <= ap_const_logic_1;
        else 
            grp_fu_400_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_400_p0 <= std_logic_vector(unsigned(add_ln43_fu_385_p2) + unsigned(In_buffer_start));
    icmp_ln32_fu_263_p2 <= "1" when (signed(zext_ln32_fu_259_p1) < signed(p_c_s)) else "0";
    icmp_ln34_fu_278_p1 <= p_chin_s;
    icmp_ln34_fu_278_p2 <= "1" when (signed(zext_ln34_fu_274_p1) < signed(icmp_ln34_fu_278_p1)) else "0";
    icmp_ln36_fu_293_p2 <= "1" when (signed(zext_ln36_fu_289_p1) < signed(p_k_s)) else "0";
    icmp_ln38_fu_304_p2 <= "1" when (kc_0_i_i_reg_218 = p_k_s) else "0";
    icmp_ln40_fu_319_p2 <= "1" when (r_0_i_i_reg_230 = ap_const_lv3_4) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln32_fu_263_p2)
    begin
        if (((icmp_ln32_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    kc_fu_309_p2 <= std_logic_vector(unsigned(kc_0_i_i_reg_218) + unsigned(ap_const_lv32_1));
    kr_fu_298_p2 <= std_logic_vector(unsigned(kr_0_i_i_reg_207) + unsigned(ap_const_lv31_1));
    mul_ln41_fu_335_p0 <= p_s_s;
    mul_ln41_fu_335_p1 <= mul_ln41_fu_335_p10(3 - 1 downto 0);
    mul_ln41_fu_335_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_i_i_reg_230),32));
    mul_ln41_fu_335_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln41_fu_335_p0) * signed('0' &mul_ln41_fu_335_p1))), 32));
    mul_ln42_fu_346_p0 <= p_s_s;
    mul_ln42_fu_346_p1 <= zext_ln32_reg_428(31 - 1 downto 0);
    mul_ln42_fu_346_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln42_fu_346_p0) * signed('0' &mul_ln42_fu_346_p1))), 32));
    mul_ln43_fu_355_p0 <= p_cin_s;
    mul_ln43_fu_355_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln43_fu_355_p0) * signed(r_in_fu_341_p2))), 32));

    p_c_out1_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_out1_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_c_out1_blk_n <= p_c_out1_full_n;
        else 
            p_c_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_c_out1_din <= p_c_s;

    p_c_out1_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_c_out1_write <= ap_const_logic_1;
        else 
            p_c_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    p_c_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_c_out_blk_n <= p_c_out_full_n;
        else 
            p_c_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_c_out_din <= p_c_s;

    p_c_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_c_out_write <= ap_const_logic_1;
        else 
            p_c_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_chin_out2_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_chin_out2_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_chin_out2_blk_n <= p_chin_out2_full_n;
        else 
            p_chin_out2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_chin_out2_din <= p_chin_s;

    p_chin_out2_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_chin_out2_write <= ap_const_logic_1;
        else 
            p_chin_out2_write <= ap_const_logic_0;
        end if; 
    end process;


    p_chin_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_chin_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_chin_out_blk_n <= p_chin_out_full_n;
        else 
            p_chin_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_chin_out_din <= p_chin_s;

    p_chin_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_chin_out_write <= ap_const_logic_1;
        else 
            p_chin_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_k_out3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_out3_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out3_blk_n <= p_k_out3_full_n;
        else 
            p_k_out3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_k_out3_din <= p_k_s;

    p_k_out3_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out3_write <= ap_const_logic_1;
        else 
            p_k_out3_write <= ap_const_logic_0;
        end if; 
    end process;


    p_k_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out_blk_n <= p_k_out_full_n;
        else 
            p_k_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_k_out_din <= p_k_s;

    p_k_out_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_out_write <= ap_const_logic_1;
        else 
            p_k_out_write <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_325_p2 <= std_logic_vector(unsigned(r_0_i_i_reg_230) + unsigned(ap_const_lv3_1));
    r_in_fu_341_p2 <= std_logic_vector(unsigned(mul_ln41_fu_335_p2) + unsigned(zext_ln36_reg_454));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln43_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_400_p2),64));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_361_p2 <= std_logic_vector(unsigned(mul_ln42_fu_346_p2) + unsigned(mul_ln43_fu_355_p2));
    tmp1_i_i_fu_381_p0 <= p_chin_s;
    tmp1_i_i_fu_381_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp1_i_i_fu_381_p0) * signed(tmp_i_i_reg_483))), 32));
    tmp_i_i_fu_367_p2 <= std_logic_vector(unsigned(tmp1_fu_361_p2) + unsigned(kc_0_i_i_reg_218));
    trunc_ln182_fu_373_p1 <= r_0_i_i_reg_230(2 - 1 downto 0);
    zext_ln32_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_0_i_i_reg_185),32));
    zext_ln34_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chi_0_i_i_reg_196),32));
    zext_ln36_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_0_i_i_reg_207),32));
end behav;
