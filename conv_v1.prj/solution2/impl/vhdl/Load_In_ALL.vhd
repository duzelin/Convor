-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Load_In_ALL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    In_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    In_buf_ce0 : OUT STD_LOGIC;
    In_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    In_buf_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    In_buf_ce1 : OUT STD_LOGIC;
    In_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    In_next_0_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    In_next_0_0_V_full_n : IN STD_LOGIC;
    In_next_0_0_V_write : OUT STD_LOGIC;
    In_next_1_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    In_next_1_0_V_full_n : IN STD_LOGIC;
    In_next_1_0_V_write : OUT STD_LOGIC;
    In_next_2_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    In_next_2_0_V_full_n : IN STD_LOGIC;
    In_next_2_0_V_write : OUT STD_LOGIC;
    In_next_3_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    In_next_3_0_V_full_n : IN STD_LOGIC;
    In_next_3_0_V_write : OUT STD_LOGIC;
    p_c_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_c_out_full_n : IN STD_LOGIC;
    p_c_out_write : OUT STD_LOGIC;
    p_c_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_c_out1_full_n : IN STD_LOGIC;
    p_c_out1_write : OUT STD_LOGIC;
    p_chin_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_chin_out_full_n : IN STD_LOGIC;
    p_chin_out_write : OUT STD_LOGIC;
    p_chin_out2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_chin_out2_full_n : IN STD_LOGIC;
    p_chin_out2_write : OUT STD_LOGIC;
    p_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_k_out_full_n : IN STD_LOGIC;
    p_k_out_write : OUT STD_LOGIC;
    p_k_out3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    p_k_out3_full_n : IN STD_LOGIC;
    p_k_out3_write : OUT STD_LOGIC;
    p_c_s : IN STD_LOGIC_VECTOR (31 downto 0);
    p_chin_s : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k_s : IN STD_LOGIC_VECTOR (31 downto 0);
    p_s_s : IN STD_LOGIC_VECTOR (31 downto 0);
    In_buffer_start : IN STD_LOGIC_VECTOR (31 downto 0);
    p_cin_s : IN STD_LOGIC_VECTOR (31 downto 0);
    In_buffer_length : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Load_In_ALL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal In_next_0_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln32_reg_758 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal In_next_1_0_V_blk_n : STD_LOGIC;
    signal In_next_2_0_V_blk_n : STD_LOGIC;
    signal In_next_3_0_V_blk_n : STD_LOGIC;
    signal p_c_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_c_out1_blk_n : STD_LOGIC;
    signal p_chin_out_blk_n : STD_LOGIC;
    signal p_chin_out2_blk_n : STD_LOGIC;
    signal p_k_out_blk_n : STD_LOGIC;
    signal p_k_out3_blk_n : STD_LOGIC;
    signal indvar_flatten47_reg_209 : STD_LOGIC_VECTOR (127 downto 0);
    signal col_0_i_i_reg_220 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten17_reg_231 : STD_LOGIC_VECTOR (95 downto 0);
    signal chi_0_i_i_reg_242 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal kr_0_i_i_reg_264 : STD_LOGIC_VECTOR (30 downto 0);
    signal kc_0_i_i_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bound_fu_298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_730 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_fu_312_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_reg_736 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound22_fu_331_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound22_reg_742 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal icmp_ln38_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_747 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_reg_758_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_758_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_352_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln32_reg_762 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln34_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_767 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_363_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln32_reg_772 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln32_1_fu_377_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln32_1_reg_778 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln32_3_fu_406_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_3_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_452_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln36_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln36_1_fu_460_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln36_1_reg_798 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln42_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln42_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_i_i_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_i_i_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_1_fu_510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_1_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_2_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_2_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_i_i_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_1_fu_564_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_1_reg_829 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln34_1_fu_570_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln34_1_reg_834 : STD_LOGIC_VECTOR (95 downto 0);
    signal select_ln34_1_fu_581_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln34_1_reg_839 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal In_buffer_length_loa_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_3_fu_651_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_3_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_4_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_4_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal kc_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kc_reg_872 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln36_2_fu_672_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln36_2_reg_877 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln34_3_fu_678_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal select_ln34_3_reg_882 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal tmp_76_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten47_phi_fu_213_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_mux_col_0_i_i_phi_fu_224_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_indvar_flatten17_phi_fu_235_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_phi_mux_chi_0_i_i_phi_fu_246_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_257_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_kr_0_i_i_phi_fu_268_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_kc_0_i_i_phi_fu_279_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln43_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_1_fu_697_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln43_2_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sext_ln43_3_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal bound_fu_298_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cast_fu_294_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cast2_fu_304_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_312_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound22_fu_331_p0 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound22_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_1_fu_371_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln38_1_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_2_fu_394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_419_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln34_2_fu_427_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_1_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kr_fu_434_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln42_fu_476_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln42_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_fu_486_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln36_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_fu_486_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_1_fu_510_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_fu_516_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_1_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_2_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_1_fu_534_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_1_fu_534_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln41_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln41_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln41_2_fu_546_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_3_fu_552_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln43_3_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal chi_fu_576_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp1_0_i_i_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_fu_587_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_0_i_i_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln43_fu_599_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_615_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_1_i_i_fu_625_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_1_i_i_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_636_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_i_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_2_i_i_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_2_i_i_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_3_i_i_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_3_i_i_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_615_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_615_ce : STD_LOGIC;
    signal grp_fu_636_ce : STD_LOGIC;
    signal grp_fu_684_ce : STD_LOGIC;
    signal grp_fu_688_ce : STD_LOGIC;
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound22_fu_331_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound22_fu_331_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound4_fu_312_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_fu_312_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln42_fu_476_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component Systolic_Array_Cocud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Systolic_Array_Cocud_U35 : component Systolic_Array_Cocud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_615_p0,
        din1 => In_buffer_length,
        ce => grp_fu_615_ce,
        dout => grp_fu_615_p2);

    Systolic_Array_Cocud_U36 : component Systolic_Array_Cocud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_636_p0,
        din1 => In_buffer_length,
        ce => grp_fu_636_ce,
        dout => grp_fu_636_p2);

    Systolic_Array_Cocud_U37 : component Systolic_Array_Cocud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln43_3_reg_862,
        din1 => In_buffer_length_loa_reg_849,
        ce => grp_fu_684_ce,
        dout => grp_fu_684_p2);

    Systolic_Array_Cocud_U38 : component Systolic_Array_Cocud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln43_4_reg_867,
        din1 => In_buffer_length_loa_reg_849,
        ce => grp_fu_688_ce,
        dout => grp_fu_688_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                elsif ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    chi_0_i_i_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0))) then 
                chi_0_i_i_reg_242 <= select_ln34_1_reg_839;
            elsif ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                chi_0_i_i_reg_242 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    col_0_i_i_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0))) then 
                col_0_i_i_reg_220 <= select_ln32_1_reg_778;
            elsif ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_0_i_i_reg_220 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0))) then 
                indvar_flatten17_reg_231 <= select_ln34_3_reg_882;
            elsif ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten17_reg_231 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    indvar_flatten47_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0))) then 
                indvar_flatten47_reg_209 <= add_ln32_reg_762;
            elsif ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten47_reg_209 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0))) then 
                indvar_flatten_reg_253 <= select_ln36_2_reg_877;
            elsif ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_253 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    kc_0_i_i_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0))) then 
                kc_0_i_i_reg_275 <= kc_reg_872;
            elsif ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                kc_0_i_i_reg_275 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    kr_0_i_i_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0))) then 
                kr_0_i_i_reg_264 <= select_ln36_1_reg_798;
            elsif ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                kr_0_i_i_reg_264 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln32_reg_758 = ap_const_lv1_0))) then
                In_buffer_length_loa_reg_849 <= In_buffer_length;
                add_ln43_3_reg_862 <= add_ln43_3_fu_651_p2;
                add_ln43_4_reg_867 <= add_ln43_4_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln32_reg_762 <= add_ln32_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_fu_347_p2 = ap_const_lv1_0))) then
                add_ln34_1_reg_834 <= add_ln34_1_fu_570_p2;
                add_ln36_1_reg_829 <= add_ln36_1_fu_564_p2;
                add_ln42_reg_803 <= add_ln42_fu_492_p2;
                icmp_ln34_reg_767 <= icmp_ln34_fu_358_p2;
                mul_ln43_1_reg_814 <= mul_ln43_1_fu_510_p2;
                mul_ln43_2_reg_819 <= mul_ln43_2_fu_528_p2;
                or_ln34_reg_788 <= or_ln34_fu_413_p2;
                select_ln32_3_reg_783 <= select_ln32_3_fu_406_p3;
                select_ln32_reg_772 <= select_ln32_fu_363_p3;
                select_ln36_reg_793 <= select_ln36_fu_452_p3;
                tmp_0_i_i_reg_809 <= tmp_0_i_i_fu_498_p2;
                tmp_3_i_i_reg_824 <= tmp_3_i_i_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                bound22_reg_742 <= bound22_fu_331_p2;
                icmp_ln36_reg_753 <= icmp_ln36_fu_342_p2;
                icmp_ln38_reg_747 <= icmp_ln38_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                bound4_reg_736 <= bound4_fu_312_p2;
                bound_reg_730 <= bound_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln32_reg_758 <= icmp_ln32_fu_347_p2;
                icmp_ln32_reg_758_pp0_iter10_reg <= icmp_ln32_reg_758_pp0_iter9_reg;
                icmp_ln32_reg_758_pp0_iter11_reg <= icmp_ln32_reg_758_pp0_iter10_reg;
                icmp_ln32_reg_758_pp0_iter12_reg <= icmp_ln32_reg_758_pp0_iter11_reg;
                icmp_ln32_reg_758_pp0_iter13_reg <= icmp_ln32_reg_758_pp0_iter12_reg;
                icmp_ln32_reg_758_pp0_iter14_reg <= icmp_ln32_reg_758_pp0_iter13_reg;
                icmp_ln32_reg_758_pp0_iter15_reg <= icmp_ln32_reg_758_pp0_iter14_reg;
                icmp_ln32_reg_758_pp0_iter16_reg <= icmp_ln32_reg_758_pp0_iter15_reg;
                icmp_ln32_reg_758_pp0_iter17_reg <= icmp_ln32_reg_758_pp0_iter16_reg;
                icmp_ln32_reg_758_pp0_iter18_reg <= icmp_ln32_reg_758_pp0_iter17_reg;
                icmp_ln32_reg_758_pp0_iter1_reg <= icmp_ln32_reg_758;
                icmp_ln32_reg_758_pp0_iter2_reg <= icmp_ln32_reg_758_pp0_iter1_reg;
                icmp_ln32_reg_758_pp0_iter3_reg <= icmp_ln32_reg_758_pp0_iter2_reg;
                icmp_ln32_reg_758_pp0_iter4_reg <= icmp_ln32_reg_758_pp0_iter3_reg;
                icmp_ln32_reg_758_pp0_iter5_reg <= icmp_ln32_reg_758_pp0_iter4_reg;
                icmp_ln32_reg_758_pp0_iter6_reg <= icmp_ln32_reg_758_pp0_iter5_reg;
                icmp_ln32_reg_758_pp0_iter7_reg <= icmp_ln32_reg_758_pp0_iter6_reg;
                icmp_ln32_reg_758_pp0_iter8_reg <= icmp_ln32_reg_758_pp0_iter7_reg;
                icmp_ln32_reg_758_pp0_iter9_reg <= icmp_ln32_reg_758_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln32_reg_758 = ap_const_lv1_0))) then
                kc_reg_872 <= kc_fu_667_p2;
                select_ln34_1_reg_839 <= select_ln34_1_fu_581_p3;
                select_ln34_3_reg_882 <= select_ln34_3_fu_678_p3;
                select_ln36_2_reg_877 <= select_ln36_2_fu_672_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_fu_347_p2 = ap_const_lv1_0))) then
                select_ln32_1_reg_778 <= select_ln32_1_fu_377_p3;
                select_ln36_1_reg_798 <= select_ln36_1_fu_460_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0))) then
                tmp_76_reg_902 <= In_buf_q1;
                tmp_reg_897 <= In_buf_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_CS_fsm_state2, icmp_ln32_fu_347_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln32_fu_347_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln32_fu_347_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    In_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter18, sext_ln43_fu_692_p1, sext_ln43_2_fu_702_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter18 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                In_buf_address0 <= sext_ln43_2_fu_702_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                In_buf_address0 <= sext_ln43_fu_692_p1(9 - 1 downto 0);
            else 
                In_buf_address0 <= "XXXXXXXXX";
            end if;
        else 
            In_buf_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    In_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter18, sext_ln43_1_fu_697_p1, ap_block_pp0_stage1, sext_ln43_3_fu_707_p1)
    begin
        if ((ap_enable_reg_pp0_iter18 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                In_buf_address1 <= sext_ln43_3_fu_707_p1(9 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                In_buf_address1 <= sext_ln43_1_fu_697_p1(9 - 1 downto 0);
            else 
                In_buf_address1 <= "XXXXXXXXX";
            end if;
        else 
            In_buf_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    In_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter18)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            In_buf_ce0 <= ap_const_logic_1;
        else 
            In_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    In_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter18)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            In_buf_ce1 <= ap_const_logic_1;
        else 
            In_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    In_next_0_0_V_blk_n_assign_proc : process(In_next_0_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0, icmp_ln32_reg_758_pp0_iter18_reg)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            In_next_0_0_V_blk_n <= In_next_0_0_V_full_n;
        else 
            In_next_0_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    In_next_0_0_V_din <= tmp_reg_897;

    In_next_0_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, icmp_ln32_reg_758_pp0_iter18_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0))) then 
            In_next_0_0_V_write <= ap_const_logic_1;
        else 
            In_next_0_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    In_next_1_0_V_blk_n_assign_proc : process(In_next_1_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0, icmp_ln32_reg_758_pp0_iter18_reg)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            In_next_1_0_V_blk_n <= In_next_1_0_V_full_n;
        else 
            In_next_1_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    In_next_1_0_V_din <= tmp_76_reg_902;

    In_next_1_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, icmp_ln32_reg_758_pp0_iter18_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0))) then 
            In_next_1_0_V_write <= ap_const_logic_1;
        else 
            In_next_1_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    In_next_2_0_V_blk_n_assign_proc : process(In_next_2_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0, icmp_ln32_reg_758_pp0_iter18_reg)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            In_next_2_0_V_blk_n <= In_next_2_0_V_full_n;
        else 
            In_next_2_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    In_next_2_0_V_din <= In_buf_q0;

    In_next_2_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, icmp_ln32_reg_758_pp0_iter18_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0))) then 
            In_next_2_0_V_write <= ap_const_logic_1;
        else 
            In_next_2_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    In_next_3_0_V_blk_n_assign_proc : process(In_next_3_0_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0, icmp_ln32_reg_758_pp0_iter18_reg)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            In_next_3_0_V_blk_n <= In_next_3_0_V_full_n;
        else 
            In_next_3_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    In_next_3_0_V_din <= In_buf_q1;

    In_next_3_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, icmp_ln32_reg_758_pp0_iter18_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0))) then 
            In_next_3_0_V_write <= ap_const_logic_1;
        else 
            In_next_3_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln32_1_fu_371_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(ap_phi_mux_col_0_i_i_phi_fu_224_p4));
    add_ln32_fu_352_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten47_phi_fu_213_p4) + unsigned(ap_const_lv128_lc_2));
    add_ln34_1_fu_570_p2 <= std_logic_vector(unsigned(ap_const_lv96_1) + unsigned(ap_phi_mux_indvar_flatten17_phi_fu_235_p4));
    add_ln36_1_fu_564_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_257_p4));
    add_ln41_1_fu_522_p2 <= std_logic_vector(unsigned(zext_ln36_fu_468_p1) + unsigned(shl_ln41_fu_516_p2));
    add_ln41_2_fu_546_p2 <= std_logic_vector(unsigned(zext_ln36_fu_468_p1) + unsigned(sub_ln41_fu_540_p2));
    add_ln41_fu_504_p1 <= p_s_s;
    add_ln41_fu_504_p2 <= std_logic_vector(unsigned(zext_ln36_fu_468_p1) + unsigned(add_ln41_fu_504_p1));
    add_ln42_fu_492_p2 <= std_logic_vector(unsigned(select_ln36_fu_452_p3) + unsigned(mul_ln42_fu_476_p2));
    add_ln43_3_fu_651_p2 <= std_logic_vector(unsigned(tmp1_2_i_i_fu_646_p2) + unsigned(add_ln43_fu_599_p2));
    add_ln43_4_fu_661_p2 <= std_logic_vector(unsigned(tmp1_3_i_i_fu_657_p2) + unsigned(add_ln43_fu_599_p2));
    add_ln43_fu_599_p2 <= std_logic_vector(unsigned(zext_ln34_fu_587_p1) + unsigned(In_buffer_start));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state42 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, ap_enable_reg_pp0_iter19, icmp_ln32_reg_758_pp0_iter18_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((ap_const_logic_0 = In_next_3_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, ap_enable_reg_pp0_iter19, icmp_ln32_reg_758_pp0_iter18_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((ap_const_logic_0 = In_next_3_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, ap_enable_reg_pp0_iter19, icmp_ln32_reg_758_pp0_iter18_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (((ap_const_logic_0 = In_next_3_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n)
    begin
                ap_block_state2 <= ((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0));
    end process;

        ap_block_state20_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state41_pp0_stage0_iter19_assign_proc : process(In_next_0_0_V_full_n, In_next_1_0_V_full_n, In_next_2_0_V_full_n, In_next_3_0_V_full_n, icmp_ln32_reg_758_pp0_iter18_reg)
    begin
                ap_block_state41_pp0_stage0_iter19 <= (((ap_const_logic_0 = In_next_3_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_2_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_1_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = In_next_0_0_V_full_n) and (icmp_ln32_reg_758_pp0_iter18_reg = ap_const_lv1_0)));
    end process;

        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln32_fu_347_p2)
    begin
        if ((icmp_ln32_fu_347_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_chi_0_i_i_phi_fu_246_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln32_reg_758, chi_0_i_i_reg_242, select_ln34_1_reg_839, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_chi_0_i_i_phi_fu_246_p4 <= select_ln34_1_reg_839;
        else 
            ap_phi_mux_chi_0_i_i_phi_fu_246_p4 <= chi_0_i_i_reg_242;
        end if; 
    end process;


    ap_phi_mux_col_0_i_i_phi_fu_224_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln32_reg_758, col_0_i_i_reg_220, select_ln32_1_reg_778, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_col_0_i_i_phi_fu_224_p4 <= select_ln32_1_reg_778;
        else 
            ap_phi_mux_col_0_i_i_phi_fu_224_p4 <= col_0_i_i_reg_220;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten17_phi_fu_235_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln32_reg_758, indvar_flatten17_reg_231, select_ln34_3_reg_882, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten17_phi_fu_235_p4 <= select_ln34_3_reg_882;
        else 
            ap_phi_mux_indvar_flatten17_phi_fu_235_p4 <= indvar_flatten17_reg_231;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten47_phi_fu_213_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln32_reg_758, indvar_flatten47_reg_209, add_ln32_reg_762, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten47_phi_fu_213_p4 <= add_ln32_reg_762;
        else 
            ap_phi_mux_indvar_flatten47_phi_fu_213_p4 <= indvar_flatten47_reg_209;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_257_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln32_reg_758, indvar_flatten_reg_253, select_ln36_2_reg_877, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_257_p4 <= select_ln36_2_reg_877;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_257_p4 <= indvar_flatten_reg_253;
        end if; 
    end process;


    ap_phi_mux_kc_0_i_i_phi_fu_279_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln32_reg_758, kc_0_i_i_reg_275, kc_reg_872, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_kc_0_i_i_phi_fu_279_p4 <= kc_reg_872;
        else 
            ap_phi_mux_kc_0_i_i_phi_fu_279_p4 <= kc_0_i_i_reg_275;
        end if; 
    end process;


    ap_phi_mux_kr_0_i_i_phi_fu_268_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln32_reg_758, kr_0_i_i_reg_264, select_ln36_1_reg_798, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_758 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_kr_0_i_i_phi_fu_268_p4 <= select_ln36_1_reg_798;
        else 
            ap_phi_mux_kr_0_i_i_phi_fu_268_p4 <= kr_0_i_i_reg_264;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound22_fu_331_p0 <= bound22_fu_331_p00(96 - 1 downto 0);
    bound22_fu_331_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_reg_736),128));
    bound22_fu_331_p1 <= bound22_fu_331_p10(32 - 1 downto 0);
    bound22_fu_331_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_c_s),128));
    bound22_fu_331_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound22_fu_331_p0) * unsigned(bound22_fu_331_p1), 128));
    bound4_fu_312_p0 <= bound4_fu_312_p00(64 - 1 downto 0);
    bound4_fu_312_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_298_p2),96));
    bound4_fu_312_p1 <= bound4_fu_312_p10(32 - 1 downto 0);
    bound4_fu_312_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cast2_fu_304_p0),96));
    bound4_fu_312_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_fu_312_p0) * unsigned(bound4_fu_312_p1), 96));
    bound_fu_298_p0 <= cast_fu_294_p1(32 - 1 downto 0);
    bound_fu_298_p1 <= cast_fu_294_p1(32 - 1 downto 0);
    bound_fu_298_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_298_p0) * unsigned(bound_fu_298_p1), 64));
    cast2_fu_304_p0 <= p_chin_s;
    cast_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_k_s),64));
    chi_fu_576_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(select_ln32_reg_772));

    grp_fu_615_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_615_ce <= ap_const_logic_1;
        else 
            grp_fu_615_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_615_p0 <= std_logic_vector(unsigned(tmp1_0_i_i_fu_595_p2) + unsigned(add_ln43_fu_599_p2));

    grp_fu_636_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_636_ce <= ap_const_logic_1;
        else 
            grp_fu_636_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_636_p0 <= std_logic_vector(unsigned(tmp1_1_i_i_fu_625_p2) + unsigned(add_ln43_fu_599_p2));

    grp_fu_684_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_684_ce <= ap_const_logic_1;
        else 
            grp_fu_684_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_688_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_688_ce <= ap_const_logic_1;
        else 
            grp_fu_688_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln32_fu_347_p2 <= "1" when (ap_phi_mux_indvar_flatten47_phi_fu_213_p4 = bound22_reg_742) else "0";
    icmp_ln34_fu_358_p2 <= "1" when (ap_phi_mux_indvar_flatten17_phi_fu_235_p4 = bound4_reg_736) else "0";
    icmp_ln36_1_fu_401_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_257_p4 = bound_reg_730) else "0";
    icmp_ln36_fu_342_p2 <= "1" when (bound_reg_730 = ap_const_lv64_0) else "0";
    icmp_ln38_1_fu_389_p2 <= "1" when (ap_phi_mux_kc_0_i_i_phi_fu_279_p4 = p_k_s) else "0";
    icmp_ln38_fu_337_p2 <= "1" when (p_k_s = ap_const_lv32_0) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    kc_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln36_reg_793));
    kr_fu_434_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(select_ln34_fu_419_p3));
    mul_ln42_fu_476_p0 <= mul_ln42_fu_476_p00(31 - 1 downto 0);
    mul_ln42_fu_476_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_1_fu_377_p3),32));
    mul_ln42_fu_476_p1 <= p_s_s;
    mul_ln42_fu_476_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln42_fu_476_p0) * signed(mul_ln42_fu_476_p1))), 32));
    mul_ln43_1_fu_510_p1 <= p_cin_s;
    mul_ln43_1_fu_510_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln41_fu_504_p2) * signed(mul_ln43_1_fu_510_p1))), 32));
    mul_ln43_2_fu_528_p1 <= p_cin_s;
    mul_ln43_2_fu_528_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln41_1_fu_522_p2) * signed(mul_ln43_2_fu_528_p1))), 32));
    mul_ln43_3_fu_552_p1 <= p_cin_s;
    mul_ln43_3_fu_552_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln41_2_fu_546_p2) * signed(mul_ln43_3_fu_552_p1))), 32));
    mul_ln43_fu_486_p0 <= zext_ln36_fu_468_p1(31 - 1 downto 0);
    mul_ln43_fu_486_p1 <= p_cin_s;
    mul_ln43_fu_486_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln43_fu_486_p0) * signed(mul_ln43_fu_486_p1))), 32));
    or_ln34_fu_413_p2 <= (select_ln32_3_fu_406_p3 or icmp_ln34_fu_358_p2);
    or_ln36_1_fu_446_p2 <= (or_ln36_fu_440_p2 or icmp_ln34_fu_358_p2);
    or_ln36_fu_440_p2 <= (select_ln34_2_fu_427_p3 or select_ln32_3_fu_406_p3);

    p_c_out1_blk_n_assign_proc : process(p_c_out1_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_c_out1_blk_n <= p_c_out1_full_n;
        else 
            p_c_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_c_out1_din <= p_c_s;

    p_c_out1_write_assign_proc : process(p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_c_out1_write <= ap_const_logic_1;
        else 
            p_c_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    p_c_out_blk_n_assign_proc : process(p_c_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_c_out_blk_n <= p_c_out_full_n;
        else 
            p_c_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_c_out_din <= p_c_s;

    p_c_out_write_assign_proc : process(p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_c_out_write <= ap_const_logic_1;
        else 
            p_c_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_chin_out2_blk_n_assign_proc : process(p_chin_out2_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_chin_out2_blk_n <= p_chin_out2_full_n;
        else 
            p_chin_out2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_chin_out2_din <= p_chin_s;

    p_chin_out2_write_assign_proc : process(p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_chin_out2_write <= ap_const_logic_1;
        else 
            p_chin_out2_write <= ap_const_logic_0;
        end if; 
    end process;


    p_chin_out_blk_n_assign_proc : process(p_chin_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_chin_out_blk_n <= p_chin_out_full_n;
        else 
            p_chin_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_chin_out_din <= p_chin_s;

    p_chin_out_write_assign_proc : process(p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_chin_out_write <= ap_const_logic_1;
        else 
            p_chin_out_write <= ap_const_logic_0;
        end if; 
    end process;


    p_k_out3_blk_n_assign_proc : process(p_k_out3_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_k_out3_blk_n <= p_k_out3_full_n;
        else 
            p_k_out3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_k_out3_din <= p_k_s;

    p_k_out3_write_assign_proc : process(p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_k_out3_write <= ap_const_logic_1;
        else 
            p_k_out3_write <= ap_const_logic_0;
        end if; 
    end process;


    p_k_out_blk_n_assign_proc : process(p_k_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            p_k_out_blk_n <= p_k_out_full_n;
        else 
            p_k_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    p_k_out_din <= p_k_s;

    p_k_out_write_assign_proc : process(p_c_out_full_n, p_c_out1_full_n, p_chin_out_full_n, p_chin_out2_full_n, p_k_out_full_n, p_k_out3_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((p_k_out3_full_n = ap_const_logic_0) or (p_k_out_full_n = ap_const_logic_0) or (p_chin_out2_full_n = ap_const_logic_0) or (p_chin_out_full_n = ap_const_logic_0) or (p_c_out1_full_n = ap_const_logic_0) or (p_c_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            p_k_out_write <= ap_const_logic_1;
        else 
            p_k_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln32_1_fu_377_p3 <= 
        add_ln32_1_fu_371_p2 when (icmp_ln34_fu_358_p2(0) = '1') else 
        ap_phi_mux_col_0_i_i_phi_fu_224_p4;
    select_ln32_2_fu_394_p3 <= 
        icmp_ln38_reg_747 when (icmp_ln34_fu_358_p2(0) = '1') else 
        icmp_ln38_1_fu_389_p2;
    select_ln32_3_fu_406_p3 <= 
        icmp_ln36_reg_753 when (icmp_ln34_fu_358_p2(0) = '1') else 
        icmp_ln36_1_fu_401_p2;
    select_ln32_fu_363_p3 <= 
        ap_const_lv31_0 when (icmp_ln34_fu_358_p2(0) = '1') else 
        ap_phi_mux_chi_0_i_i_phi_fu_246_p4;
    select_ln34_1_fu_581_p3 <= 
        chi_fu_576_p2 when (select_ln32_3_reg_783(0) = '1') else 
        select_ln32_reg_772;
    select_ln34_2_fu_427_p3 <= 
        icmp_ln38_reg_747 when (select_ln32_3_fu_406_p3(0) = '1') else 
        select_ln32_2_fu_394_p3;
    select_ln34_3_fu_678_p3 <= 
        ap_const_lv96_1 when (icmp_ln34_reg_767(0) = '1') else 
        add_ln34_1_reg_834;
    select_ln34_fu_419_p3 <= 
        ap_const_lv31_0 when (or_ln34_fu_413_p2(0) = '1') else 
        ap_phi_mux_kr_0_i_i_phi_fu_268_p4;
    select_ln36_1_fu_460_p3 <= 
        kr_fu_434_p2 when (select_ln34_2_fu_427_p3(0) = '1') else 
        select_ln34_fu_419_p3;
    select_ln36_2_fu_672_p3 <= 
        ap_const_lv64_1 when (or_ln34_reg_788(0) = '1') else 
        add_ln36_1_reg_829;
    select_ln36_fu_452_p3 <= 
        ap_const_lv32_0 when (or_ln36_1_fu_446_p2(0) = '1') else 
        ap_phi_mux_kc_0_i_i_phi_fu_279_p4;
        sext_ln43_1_fu_697_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_636_p2),64));

        sext_ln43_2_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_684_p2),64));

        sext_ln43_3_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_688_p2),64));

        sext_ln43_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_615_p2),64));

    shl_ln41_1_fu_534_p0 <= p_s_s;
    shl_ln41_1_fu_534_p2 <= std_logic_vector(shift_left(unsigned(shl_ln41_1_fu_534_p0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln41_fu_516_p0 <= p_s_s;
    shl_ln41_fu_516_p2 <= std_logic_vector(shift_left(unsigned(shl_ln41_fu_516_p0),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln41_fu_540_p1 <= p_s_s;
    sub_ln41_fu_540_p2 <= std_logic_vector(unsigned(shl_ln41_1_fu_534_p2) - unsigned(sub_ln41_fu_540_p1));
    tmp1_0_i_i_fu_595_p1 <= p_chin_s;
    tmp1_0_i_i_fu_595_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_0_i_i_reg_809) * signed(tmp1_0_i_i_fu_595_p1))), 32));
    tmp1_1_i_i_fu_625_p1 <= p_chin_s;
    tmp1_1_i_i_fu_625_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_1_i_i_fu_621_p2) * signed(tmp1_1_i_i_fu_625_p1))), 32));
    tmp1_2_i_i_fu_646_p1 <= p_chin_s;
    tmp1_2_i_i_fu_646_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_2_i_i_fu_642_p2) * signed(tmp1_2_i_i_fu_646_p1))), 32));
    tmp1_3_i_i_fu_657_p1 <= p_chin_s;
    tmp1_3_i_i_fu_657_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_3_i_i_reg_824) * signed(tmp1_3_i_i_fu_657_p1))), 32));
    tmp_0_i_i_fu_498_p2 <= std_logic_vector(unsigned(mul_ln43_fu_486_p2) + unsigned(add_ln42_fu_492_p2));
    tmp_1_i_i_fu_621_p2 <= std_logic_vector(unsigned(mul_ln43_1_reg_814) + unsigned(add_ln42_reg_803));
    tmp_2_i_i_fu_642_p2 <= std_logic_vector(unsigned(mul_ln43_2_reg_819) + unsigned(add_ln42_reg_803));
    tmp_3_i_i_fu_558_p2 <= std_logic_vector(unsigned(mul_ln43_3_fu_552_p2) + unsigned(add_ln42_fu_492_p2));
    zext_ln34_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_1_fu_581_p3),32));
    zext_ln36_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_460_p3),32));
end behav;
