// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Read_W_buf_HH_
#define _Read_W_buf_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Read_W_buf : public sc_module {
    // Port declarations 57
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > W_address0;
    sc_out< sc_logic > W_ce0;
    sc_out< sc_logic > W_we0;
    sc_out< sc_lv<32> > W_d0;
    sc_out< sc_logic > m_axi_W_ddr_AWVALID;
    sc_in< sc_logic > m_axi_W_ddr_AWREADY;
    sc_out< sc_lv<32> > m_axi_W_ddr_AWADDR;
    sc_out< sc_lv<1> > m_axi_W_ddr_AWID;
    sc_out< sc_lv<32> > m_axi_W_ddr_AWLEN;
    sc_out< sc_lv<3> > m_axi_W_ddr_AWSIZE;
    sc_out< sc_lv<2> > m_axi_W_ddr_AWBURST;
    sc_out< sc_lv<2> > m_axi_W_ddr_AWLOCK;
    sc_out< sc_lv<4> > m_axi_W_ddr_AWCACHE;
    sc_out< sc_lv<3> > m_axi_W_ddr_AWPROT;
    sc_out< sc_lv<4> > m_axi_W_ddr_AWQOS;
    sc_out< sc_lv<4> > m_axi_W_ddr_AWREGION;
    sc_out< sc_lv<1> > m_axi_W_ddr_AWUSER;
    sc_out< sc_logic > m_axi_W_ddr_WVALID;
    sc_in< sc_logic > m_axi_W_ddr_WREADY;
    sc_out< sc_lv<32> > m_axi_W_ddr_WDATA;
    sc_out< sc_lv<4> > m_axi_W_ddr_WSTRB;
    sc_out< sc_logic > m_axi_W_ddr_WLAST;
    sc_out< sc_lv<1> > m_axi_W_ddr_WID;
    sc_out< sc_lv<1> > m_axi_W_ddr_WUSER;
    sc_out< sc_logic > m_axi_W_ddr_ARVALID;
    sc_in< sc_logic > m_axi_W_ddr_ARREADY;
    sc_out< sc_lv<32> > m_axi_W_ddr_ARADDR;
    sc_out< sc_lv<1> > m_axi_W_ddr_ARID;
    sc_out< sc_lv<32> > m_axi_W_ddr_ARLEN;
    sc_out< sc_lv<3> > m_axi_W_ddr_ARSIZE;
    sc_out< sc_lv<2> > m_axi_W_ddr_ARBURST;
    sc_out< sc_lv<2> > m_axi_W_ddr_ARLOCK;
    sc_out< sc_lv<4> > m_axi_W_ddr_ARCACHE;
    sc_out< sc_lv<3> > m_axi_W_ddr_ARPROT;
    sc_out< sc_lv<4> > m_axi_W_ddr_ARQOS;
    sc_out< sc_lv<4> > m_axi_W_ddr_ARREGION;
    sc_out< sc_lv<1> > m_axi_W_ddr_ARUSER;
    sc_in< sc_logic > m_axi_W_ddr_RVALID;
    sc_out< sc_logic > m_axi_W_ddr_RREADY;
    sc_in< sc_lv<32> > m_axi_W_ddr_RDATA;
    sc_in< sc_logic > m_axi_W_ddr_RLAST;
    sc_in< sc_lv<1> > m_axi_W_ddr_RID;
    sc_in< sc_lv<1> > m_axi_W_ddr_RUSER;
    sc_in< sc_lv<2> > m_axi_W_ddr_RRESP;
    sc_in< sc_logic > m_axi_W_ddr_BVALID;
    sc_out< sc_logic > m_axi_W_ddr_BREADY;
    sc_in< sc_lv<2> > m_axi_W_ddr_BRESP;
    sc_in< sc_lv<1> > m_axi_W_ddr_BID;
    sc_in< sc_lv<1> > m_axi_W_ddr_BUSER;
    sc_in< sc_lv<30> > W_ddr_offset;
    sc_in< sc_lv<32> > length_r;


    // Module declarations
    Read_W_buf(sc_module_name name);
    SC_HAS_PROCESS(Read_W_buf);

    ~Read_W_buf();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > W_ddr_blk_n_AR;
    sc_signal< sc_logic > W_ddr_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln274_reg_148;
    sc_signal< sc_lv<31> > p_0_rec_reg_93;
    sc_signal< sc_lv<31> > p_0_rec_reg_93_pp0_iter1_reg;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln274_fu_120_p2;
    sc_signal< sc_lv<1> > icmp_ln274_reg_148_pp0_iter1_reg;
    sc_signal< sc_lv<31> > i_fu_125_p2;
    sc_signal< sc_lv<31> > i_reg_152;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > W_ddr_addr_read_reg_157;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<31> > ap_phi_mux_p_0_rec_phi_fu_97_p4;
    sc_signal< sc_lv<64> > p_0_rec_cast_fu_131_p1;
    sc_signal< sc_lv<64> > zext_ln273_fu_105_p1;
    sc_signal< sc_lv<32> > i_0_cast_fu_116_p1;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_pp0_stage0;
    static const sc_lv<9> ap_ST_fsm_state11;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_W_address0();
    void thread_W_ce0();
    void thread_W_d0();
    void thread_W_ddr_blk_n_AR();
    void thread_W_ddr_blk_n_R();
    void thread_W_we0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter2();
    void thread_ap_block_state8_pp0_stage0_iter0();
    void thread_ap_block_state9_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_p_0_rec_phi_fu_97_p4();
    void thread_ap_ready();
    void thread_i_0_cast_fu_116_p1();
    void thread_i_fu_125_p2();
    void thread_icmp_ln274_fu_120_p2();
    void thread_m_axi_W_ddr_ARADDR();
    void thread_m_axi_W_ddr_ARBURST();
    void thread_m_axi_W_ddr_ARCACHE();
    void thread_m_axi_W_ddr_ARID();
    void thread_m_axi_W_ddr_ARLEN();
    void thread_m_axi_W_ddr_ARLOCK();
    void thread_m_axi_W_ddr_ARPROT();
    void thread_m_axi_W_ddr_ARQOS();
    void thread_m_axi_W_ddr_ARREGION();
    void thread_m_axi_W_ddr_ARSIZE();
    void thread_m_axi_W_ddr_ARUSER();
    void thread_m_axi_W_ddr_ARVALID();
    void thread_m_axi_W_ddr_AWADDR();
    void thread_m_axi_W_ddr_AWBURST();
    void thread_m_axi_W_ddr_AWCACHE();
    void thread_m_axi_W_ddr_AWID();
    void thread_m_axi_W_ddr_AWLEN();
    void thread_m_axi_W_ddr_AWLOCK();
    void thread_m_axi_W_ddr_AWPROT();
    void thread_m_axi_W_ddr_AWQOS();
    void thread_m_axi_W_ddr_AWREGION();
    void thread_m_axi_W_ddr_AWSIZE();
    void thread_m_axi_W_ddr_AWUSER();
    void thread_m_axi_W_ddr_AWVALID();
    void thread_m_axi_W_ddr_BREADY();
    void thread_m_axi_W_ddr_RREADY();
    void thread_m_axi_W_ddr_WDATA();
    void thread_m_axi_W_ddr_WID();
    void thread_m_axi_W_ddr_WLAST();
    void thread_m_axi_W_ddr_WSTRB();
    void thread_m_axi_W_ddr_WUSER();
    void thread_m_axi_W_ddr_WVALID();
    void thread_p_0_rec_cast_fu_131_p1();
    void thread_zext_ln273_fu_105_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
