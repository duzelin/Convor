// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Load_W_ALL (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        cho_dout,
        cho_empty_n,
        cho_read,
        W_buf_address0,
        W_buf_ce0,
        W_buf_q0,
        W_next_0_0_V_din,
        W_next_0_0_V_full_n,
        W_next_0_0_V_write,
        W_next_0_1_V_din,
        W_next_0_1_V_full_n,
        W_next_0_1_V_write,
        W_next_0_2_V_din,
        W_next_0_2_V_full_n,
        W_next_0_2_V_write,
        W_next_0_3_V_din,
        W_next_0_3_V_full_n,
        W_next_0_3_V_write,
        p_c_s_dout,
        p_c_s_empty_n,
        p_c_s_read,
        p_chin_s_dout,
        p_chin_s_empty_n,
        p_chin_s_read,
        p_k_s_dout,
        p_k_s_empty_n,
        p_k_s_read
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] cho_dout;
input   cho_empty_n;
output   cho_read;
output  [8:0] W_buf_address0;
output   W_buf_ce0;
input  [31:0] W_buf_q0;
output  [31:0] W_next_0_0_V_din;
input   W_next_0_0_V_full_n;
output   W_next_0_0_V_write;
output  [31:0] W_next_0_1_V_din;
input   W_next_0_1_V_full_n;
output   W_next_0_1_V_write;
output  [31:0] W_next_0_2_V_din;
input   W_next_0_2_V_full_n;
output   W_next_0_2_V_write;
output  [31:0] W_next_0_3_V_din;
input   W_next_0_3_V_full_n;
output   W_next_0_3_V_write;
input  [31:0] p_c_s_dout;
input   p_c_s_empty_n;
output   p_c_s_read;
input  [31:0] p_chin_s_dout;
input   p_chin_s_empty_n;
output   p_chin_s_read;
input  [31:0] p_k_s_dout;
input   p_k_s_empty_n;
output   p_k_s_read;

reg ap_done;
reg ap_idle;
reg start_write;
reg cho_read;
reg W_buf_ce0;
reg W_next_0_0_V_write;
reg W_next_0_1_V_write;
reg W_next_0_2_V_write;
reg W_next_0_3_V_write;
reg p_c_s_read;
reg p_chin_s_read;
reg p_k_s_read;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cho_blk_n;
reg    W_next_0_0_V_blk_n;
wire    ap_CS_fsm_state8;
reg   [1:0] trunc_ln182_reg_449;
reg    W_next_0_1_V_blk_n;
reg    W_next_0_2_V_blk_n;
reg    W_next_0_3_V_blk_n;
reg    p_c_s_blk_n;
reg    p_chin_s_blk_n;
reg    p_k_s_blk_n;
reg   [31:0] cho_read_reg_355;
reg    ap_block_state1;
reg   [31:0] p_c_read_reg_360;
reg  signed [31:0] p_chin_read_reg_365;
reg  signed [31:0] p_k_read_reg_370;
wire  signed [9:0] trunc_ln78_fu_204_p1;
reg  signed [9:0] trunc_ln78_reg_379;
wire  signed [31:0] mul_ln78_3_fu_208_p2;
reg  signed [31:0] mul_ln78_3_reg_384;
wire   [30:0] col_fu_223_p2;
reg   [30:0] col_reg_392;
wire    ap_CS_fsm_state2;
wire   [30:0] chi_fu_238_p2;
reg   [30:0] chi_reg_400;
wire    ap_CS_fsm_state3;
wire   [9:0] trunc_ln78_1_fu_254_p1;
reg   [9:0] trunc_ln78_1_reg_405;
wire   [0:0] icmp_ln71_fu_233_p2;
wire   [30:0] kr_fu_267_p2;
reg   [30:0] kr_reg_413;
wire    ap_CS_fsm_state4;
wire   [9:0] mul_ln78_2_fu_277_p2;
reg   [9:0] mul_ln78_2_reg_418;
wire   [0:0] icmp_ln73_fu_262_p2;
wire   [31:0] kc_fu_287_p2;
reg   [31:0] kc_reg_426;
wire    ap_CS_fsm_state5;
wire   [9:0] add_ln78_1_fu_297_p2;
reg   [9:0] add_ln78_1_reg_431;
wire   [0:0] icmp_ln75_fu_282_p2;
wire   [2:0] o_fu_312_p2;
reg   [2:0] o_reg_439;
wire    ap_CS_fsm_state6;
wire   [9:0] trunc_ln78_3_fu_333_p1;
reg   [9:0] trunc_ln78_3_reg_444;
wire   [0:0] icmp_ln77_fu_306_p2;
wire   [1:0] trunc_ln182_fu_337_p1;
wire    ap_CS_fsm_state7;
reg   [30:0] col_0_i_i_reg_149;
reg   [30:0] chi_0_i_i_reg_160;
wire   [0:0] icmp_ln69_fu_218_p2;
reg   [30:0] kr_0_i_i_reg_171;
reg   [31:0] kc_0_i_i_reg_182;
reg   [2:0] o_0_i_i_reg_193;
reg    ap_block_state8;
wire  signed [63:0] sext_ln78_fu_350_p1;
wire  signed [31:0] trunc_ln78_fu_204_p0;
wire  signed [31:0] mul_ln78_3_fu_208_p0;
wire  signed [31:0] mul_ln78_3_fu_208_p1;
wire   [31:0] zext_ln69_fu_214_p1;
wire   [31:0] zext_ln71_fu_229_p1;
wire   [30:0] mul_ln78_fu_244_p1;
wire  signed [31:0] mul_ln78_fu_244_p2;
wire   [31:0] mul_ln78_1_fu_249_p2;
wire   [31:0] zext_ln73_fu_258_p1;
wire  signed [9:0] trunc_ln78_2_fu_273_p1;
wire   [9:0] trunc_ln77_fu_293_p1;
wire   [31:0] zext_ln77_fu_302_p1;
wire  signed [31:0] add_ln78_fu_318_p2;
wire  signed [31:0] mul_ln78_4_fu_323_p2;
wire   [31:0] mul_ln78_5_fu_328_p2;
wire   [9:0] add_ln78_2_fu_341_p2;
wire   [9:0] add_ln78_3_fu_345_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_218_p2 == 1'd0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln73_fu_262_p2 == 1'd0))) begin
        chi_0_i_i_reg_160 <= chi_reg_400;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_218_p2 == 1'd1))) begin
        chi_0_i_i_reg_160 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln71_fu_233_p2 == 1'd0))) begin
        col_0_i_i_reg_149 <= col_reg_392;
    end else if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_0_i_i_reg_149 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln77_fu_306_p2 == 1'd1))) begin
        kc_0_i_i_reg_182 <= kc_reg_426;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln73_fu_262_p2 == 1'd1))) begin
        kc_0_i_i_reg_182 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln75_fu_282_p2 == 1'd1))) begin
        kr_0_i_i_reg_171 <= kr_reg_413;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln71_fu_233_p2 == 1'd1))) begin
        kr_0_i_i_reg_171 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((trunc_ln182_reg_449 == 2'd1) & (1'b0 == W_next_0_1_V_full_n)) | ((trunc_ln182_reg_449 == 2'd0) & (1'b0 == W_next_0_0_V_full_n)) | ((trunc_ln182_reg_449 == 2'd3) & (1'b0 == W_next_0_3_V_full_n)) | ((trunc_ln182_reg_449 == 2'd2) & (1'b0 == W_next_0_2_V_full_n))) & (1'b1 == ap_CS_fsm_state8))) begin
        o_0_i_i_reg_193 <= o_reg_439;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln75_fu_282_p2 == 1'd0))) begin
        o_0_i_i_reg_193 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln75_fu_282_p2 == 1'd0))) begin
        add_ln78_1_reg_431 <= add_ln78_1_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        chi_reg_400 <= chi_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_read_reg_355 <= cho_dout;
        mul_ln78_3_reg_384 <= mul_ln78_3_fu_208_p2;
        p_c_read_reg_360 <= p_c_s_dout;
        p_chin_read_reg_365 <= p_chin_s_dout;
        p_k_read_reg_370 <= p_k_s_dout;
        trunc_ln78_reg_379 <= trunc_ln78_fu_204_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        col_reg_392 <= col_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kc_reg_426 <= kc_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kr_reg_413 <= kr_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln73_fu_262_p2 == 1'd1))) begin
        mul_ln78_2_reg_418 <= mul_ln78_2_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        o_reg_439 <= o_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln77_fu_306_p2 == 1'd0))) begin
        trunc_ln182_reg_449 <= trunc_ln182_fu_337_p1;
        trunc_ln78_3_reg_444 <= trunc_ln78_3_fu_333_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln71_fu_233_p2 == 1'd1))) begin
        trunc_ln78_1_reg_405 <= trunc_ln78_1_fu_254_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        W_buf_ce0 = 1'b1;
    end else begin
        W_buf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_reg_449 == 2'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        W_next_0_0_V_blk_n = W_next_0_0_V_full_n;
    end else begin
        W_next_0_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((trunc_ln182_reg_449 == 2'd1) & (1'b0 == W_next_0_1_V_full_n)) | ((trunc_ln182_reg_449 == 2'd0) & (1'b0 == W_next_0_0_V_full_n)) | ((trunc_ln182_reg_449 == 2'd3) & (1'b0 == W_next_0_3_V_full_n)) | ((trunc_ln182_reg_449 == 2'd2) & (1'b0 == W_next_0_2_V_full_n))) & (trunc_ln182_reg_449 == 2'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        W_next_0_0_V_write = 1'b1;
    end else begin
        W_next_0_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_reg_449 == 2'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        W_next_0_1_V_blk_n = W_next_0_1_V_full_n;
    end else begin
        W_next_0_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((trunc_ln182_reg_449 == 2'd1) & (1'b0 == W_next_0_1_V_full_n)) | ((trunc_ln182_reg_449 == 2'd0) & (1'b0 == W_next_0_0_V_full_n)) | ((trunc_ln182_reg_449 == 2'd3) & (1'b0 == W_next_0_3_V_full_n)) | ((trunc_ln182_reg_449 == 2'd2) & (1'b0 == W_next_0_2_V_full_n))) & (trunc_ln182_reg_449 == 2'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        W_next_0_1_V_write = 1'b1;
    end else begin
        W_next_0_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_reg_449 == 2'd2) & (1'b1 == ap_CS_fsm_state8))) begin
        W_next_0_2_V_blk_n = W_next_0_2_V_full_n;
    end else begin
        W_next_0_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((trunc_ln182_reg_449 == 2'd1) & (1'b0 == W_next_0_1_V_full_n)) | ((trunc_ln182_reg_449 == 2'd0) & (1'b0 == W_next_0_0_V_full_n)) | ((trunc_ln182_reg_449 == 2'd3) & (1'b0 == W_next_0_3_V_full_n)) | ((trunc_ln182_reg_449 == 2'd2) & (1'b0 == W_next_0_2_V_full_n))) & (trunc_ln182_reg_449 == 2'd2) & (1'b1 == ap_CS_fsm_state8))) begin
        W_next_0_2_V_write = 1'b1;
    end else begin
        W_next_0_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln182_reg_449 == 2'd3) & (1'b1 == ap_CS_fsm_state8))) begin
        W_next_0_3_V_blk_n = W_next_0_3_V_full_n;
    end else begin
        W_next_0_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((trunc_ln182_reg_449 == 2'd1) & (1'b0 == W_next_0_1_V_full_n)) | ((trunc_ln182_reg_449 == 2'd0) & (1'b0 == W_next_0_0_V_full_n)) | ((trunc_ln182_reg_449 == 2'd3) & (1'b0 == W_next_0_3_V_full_n)) | ((trunc_ln182_reg_449 == 2'd2) & (1'b0 == W_next_0_2_V_full_n))) & (trunc_ln182_reg_449 == 2'd3) & (1'b1 == ap_CS_fsm_state8))) begin
        W_next_0_3_V_write = 1'b1;
    end else begin
        W_next_0_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_218_p2 == 1'd0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_blk_n = cho_empty_n;
    end else begin
        cho_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cho_read = 1'b1;
    end else begin
        cho_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_218_p2 == 1'd0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_s_blk_n = p_c_s_empty_n;
    end else begin
        p_c_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_c_s_read = 1'b1;
    end else begin
        p_c_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_s_blk_n = p_chin_s_empty_n;
    end else begin
        p_chin_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_chin_s_read = 1'b1;
    end else begin
        p_chin_s_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_s_blk_n = p_k_s_empty_n;
    end else begin
        p_k_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_k_s_read = 1'b1;
    end else begin
        p_k_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln69_fu_218_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln71_fu_233_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln73_fu_262_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln75_fu_282_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln77_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~(((trunc_ln182_reg_449 == 2'd1) & (1'b0 == W_next_0_1_V_full_n)) | ((trunc_ln182_reg_449 == 2'd0) & (1'b0 == W_next_0_0_V_full_n)) | ((trunc_ln182_reg_449 == 2'd3) & (1'b0 == W_next_0_3_V_full_n)) | ((trunc_ln182_reg_449 == 2'd2) & (1'b0 == W_next_0_2_V_full_n))) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_buf_address0 = sext_ln78_fu_350_p1;

assign W_next_0_0_V_din = W_buf_q0;

assign W_next_0_1_V_din = W_buf_q0;

assign W_next_0_2_V_din = W_buf_q0;

assign W_next_0_3_V_din = W_buf_q0;

assign add_ln78_1_fu_297_p2 = (trunc_ln77_fu_293_p1 + mul_ln78_2_reg_418);

assign add_ln78_2_fu_341_p2 = (trunc_ln78_3_reg_444 + trunc_ln78_1_reg_405);

assign add_ln78_3_fu_345_p2 = (add_ln78_2_fu_341_p2 + add_ln78_1_reg_431);

assign add_ln78_fu_318_p2 = (cho_read_reg_355 + zext_ln77_fu_302_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((p_k_s_empty_n == 1'b0) | (p_chin_s_empty_n == 1'b0) | (p_c_s_empty_n == 1'b0) | (cho_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state8 = (((trunc_ln182_reg_449 == 2'd1) & (1'b0 == W_next_0_1_V_full_n)) | ((trunc_ln182_reg_449 == 2'd0) & (1'b0 == W_next_0_0_V_full_n)) | ((trunc_ln182_reg_449 == 2'd3) & (1'b0 == W_next_0_3_V_full_n)) | ((trunc_ln182_reg_449 == 2'd2) & (1'b0 == W_next_0_2_V_full_n)));
end

assign ap_ready = internal_ap_ready;

assign chi_fu_238_p2 = (chi_0_i_i_reg_160 + 31'd1);

assign col_fu_223_p2 = (col_0_i_i_reg_149 + 31'd1);

assign icmp_ln69_fu_218_p2 = (($signed(zext_ln69_fu_214_p1) < $signed(p_c_read_reg_360)) ? 1'b1 : 1'b0);

assign icmp_ln71_fu_233_p2 = (($signed(zext_ln71_fu_229_p1) < $signed(p_chin_read_reg_365)) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_262_p2 = (($signed(zext_ln73_fu_258_p1) < $signed(p_k_read_reg_370)) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_282_p2 = ((kc_0_i_i_reg_182 == p_k_read_reg_370) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_306_p2 = ((o_0_i_i_reg_193 == 3'd4) ? 1'b1 : 1'b0);

assign kc_fu_287_p2 = (kc_0_i_i_reg_182 + 32'd1);

assign kr_fu_267_p2 = (kr_0_i_i_reg_171 + 31'd1);

assign mul_ln78_1_fu_249_p2 = ($signed(mul_ln78_fu_244_p2) * $signed(p_k_read_reg_370));

assign mul_ln78_2_fu_277_p2 = ($signed(trunc_ln78_2_fu_273_p1) * $signed(trunc_ln78_reg_379));

assign mul_ln78_3_fu_208_p0 = p_chin_s_dout;

assign mul_ln78_3_fu_208_p1 = p_k_s_dout;

assign mul_ln78_3_fu_208_p2 = ($signed(mul_ln78_3_fu_208_p0) * $signed(mul_ln78_3_fu_208_p1));

assign mul_ln78_4_fu_323_p2 = ($signed(p_k_read_reg_370) * $signed(add_ln78_fu_318_p2));

assign mul_ln78_5_fu_328_p2 = ($signed(mul_ln78_4_fu_323_p2) * $signed(mul_ln78_3_reg_384));

assign mul_ln78_fu_244_p1 = zext_ln71_fu_229_p1;

assign mul_ln78_fu_244_p2 = ($signed(p_k_read_reg_370) * $signed({{1'b0}, {mul_ln78_fu_244_p1}}));

assign o_fu_312_p2 = (o_0_i_i_reg_193 + 3'd1);

assign sext_ln78_fu_350_p1 = $signed(add_ln78_3_fu_345_p2);

assign start_out = real_start;

assign trunc_ln182_fu_337_p1 = o_0_i_i_reg_193[1:0];

assign trunc_ln77_fu_293_p1 = kc_0_i_i_reg_182[9:0];

assign trunc_ln78_1_fu_254_p1 = mul_ln78_1_fu_249_p2[9:0];

assign trunc_ln78_2_fu_273_p1 = kr_0_i_i_reg_171[9:0];

assign trunc_ln78_3_fu_333_p1 = mul_ln78_5_fu_328_p2[9:0];

assign trunc_ln78_fu_204_p0 = p_k_s_dout;

assign trunc_ln78_fu_204_p1 = trunc_ln78_fu_204_p0[9:0];

assign zext_ln69_fu_214_p1 = col_0_i_i_reg_149;

assign zext_ln71_fu_229_p1 = chi_0_i_i_reg_160;

assign zext_ln73_fu_258_p1 = kr_0_i_i_reg_171;

assign zext_ln77_fu_302_p1 = o_0_i_i_reg_193;

endmodule //Load_W_ALL
