// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Read_W_buf.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Read_W_buf::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Read_W_buf::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> Read_W_buf::ap_ST_fsm_state1 = "1";
const sc_lv<9> Read_W_buf::ap_ST_fsm_state2 = "10";
const sc_lv<9> Read_W_buf::ap_ST_fsm_state3 = "100";
const sc_lv<9> Read_W_buf::ap_ST_fsm_state4 = "1000";
const sc_lv<9> Read_W_buf::ap_ST_fsm_state5 = "10000";
const sc_lv<9> Read_W_buf::ap_ST_fsm_state6 = "100000";
const sc_lv<9> Read_W_buf::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> Read_W_buf::ap_ST_fsm_pp0_stage0 = "10000000";
const sc_lv<9> Read_W_buf::ap_ST_fsm_state11 = "100000000";
const bool Read_W_buf::ap_const_boolean_1 = true;
const sc_lv<32> Read_W_buf::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Read_W_buf::ap_const_lv1_0 = "0";
const sc_lv<3> Read_W_buf::ap_const_lv3_0 = "000";
const sc_lv<2> Read_W_buf::ap_const_lv2_0 = "00";
const sc_lv<4> Read_W_buf::ap_const_lv4_0 = "0000";
const sc_lv<32> Read_W_buf::ap_const_lv32_7 = "111";
const bool Read_W_buf::ap_const_boolean_0 = false;
const sc_lv<1> Read_W_buf::ap_const_lv1_1 = "1";
const sc_lv<32> Read_W_buf::ap_const_lv32_6 = "110";
const sc_lv<31> Read_W_buf::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<31> Read_W_buf::ap_const_lv31_1 = "1";
const sc_lv<32> Read_W_buf::ap_const_lv32_8 = "1000";

Read_W_buf::Read_W_buf(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_W_address0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( p_0_rec_cast_fu_131_p1 );

    SC_METHOD(thread_W_ce0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_W_d0);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( W_ddr_addr_read_reg_157 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_W_ddr_blk_n_AR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_W_ddr_ARREADY );

    SC_METHOD(thread_W_ddr_blk_n_R);
    sensitive << ( m_axi_W_ddr_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln274_reg_148 );

    SC_METHOD(thread_W_we0);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln274_reg_148_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( m_axi_W_ddr_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln274_reg_148 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( m_axi_W_ddr_RVALID );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln274_reg_148 );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter1);
    sensitive << ( m_axi_W_ddr_RVALID );
    sensitive << ( icmp_ln274_reg_148 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state8);
    sensitive << ( icmp_ln274_fu_120_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_p_0_rec_phi_fu_97_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln274_reg_148 );
    sensitive << ( p_0_rec_reg_93 );
    sensitive << ( i_reg_152 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_i_0_cast_fu_116_p1);
    sensitive << ( ap_phi_mux_p_0_rec_phi_fu_97_p4 );

    SC_METHOD(thread_i_fu_125_p2);
    sensitive << ( ap_phi_mux_p_0_rec_phi_fu_97_p4 );

    SC_METHOD(thread_icmp_ln274_fu_120_p2);
    sensitive << ( length_r );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( i_0_cast_fu_116_p1 );

    SC_METHOD(thread_m_axi_W_ddr_ARADDR);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_W_ddr_ARREADY );
    sensitive << ( zext_ln273_fu_105_p1 );

    SC_METHOD(thread_m_axi_W_ddr_ARBURST);

    SC_METHOD(thread_m_axi_W_ddr_ARCACHE);

    SC_METHOD(thread_m_axi_W_ddr_ARID);

    SC_METHOD(thread_m_axi_W_ddr_ARLEN);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_W_ddr_ARREADY );
    sensitive << ( length_r );

    SC_METHOD(thread_m_axi_W_ddr_ARLOCK);

    SC_METHOD(thread_m_axi_W_ddr_ARPROT);

    SC_METHOD(thread_m_axi_W_ddr_ARQOS);

    SC_METHOD(thread_m_axi_W_ddr_ARREGION);

    SC_METHOD(thread_m_axi_W_ddr_ARSIZE);

    SC_METHOD(thread_m_axi_W_ddr_ARUSER);

    SC_METHOD(thread_m_axi_W_ddr_ARVALID);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_W_ddr_ARREADY );

    SC_METHOD(thread_m_axi_W_ddr_AWADDR);

    SC_METHOD(thread_m_axi_W_ddr_AWBURST);

    SC_METHOD(thread_m_axi_W_ddr_AWCACHE);

    SC_METHOD(thread_m_axi_W_ddr_AWID);

    SC_METHOD(thread_m_axi_W_ddr_AWLEN);

    SC_METHOD(thread_m_axi_W_ddr_AWLOCK);

    SC_METHOD(thread_m_axi_W_ddr_AWPROT);

    SC_METHOD(thread_m_axi_W_ddr_AWQOS);

    SC_METHOD(thread_m_axi_W_ddr_AWREGION);

    SC_METHOD(thread_m_axi_W_ddr_AWSIZE);

    SC_METHOD(thread_m_axi_W_ddr_AWUSER);

    SC_METHOD(thread_m_axi_W_ddr_AWVALID);

    SC_METHOD(thread_m_axi_W_ddr_BREADY);

    SC_METHOD(thread_m_axi_W_ddr_RREADY);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln274_reg_148 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_W_ddr_WDATA);

    SC_METHOD(thread_m_axi_W_ddr_WID);

    SC_METHOD(thread_m_axi_W_ddr_WLAST);

    SC_METHOD(thread_m_axi_W_ddr_WSTRB);

    SC_METHOD(thread_m_axi_W_ddr_WUSER);

    SC_METHOD(thread_m_axi_W_ddr_WVALID);

    SC_METHOD(thread_p_0_rec_cast_fu_131_p1);
    sensitive << ( p_0_rec_reg_93_pp0_iter1_reg );

    SC_METHOD(thread_zext_ln273_fu_105_p1);
    sensitive << ( W_ddr_offset );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_W_ddr_ARREADY );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln274_fu_120_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    ap_CS_fsm = "000000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Read_W_buf_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, W_address0, "(port)W_address0");
    sc_trace(mVcdFile, W_ce0, "(port)W_ce0");
    sc_trace(mVcdFile, W_we0, "(port)W_we0");
    sc_trace(mVcdFile, W_d0, "(port)W_d0");
    sc_trace(mVcdFile, m_axi_W_ddr_AWVALID, "(port)m_axi_W_ddr_AWVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_AWREADY, "(port)m_axi_W_ddr_AWREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_AWADDR, "(port)m_axi_W_ddr_AWADDR");
    sc_trace(mVcdFile, m_axi_W_ddr_AWID, "(port)m_axi_W_ddr_AWID");
    sc_trace(mVcdFile, m_axi_W_ddr_AWLEN, "(port)m_axi_W_ddr_AWLEN");
    sc_trace(mVcdFile, m_axi_W_ddr_AWSIZE, "(port)m_axi_W_ddr_AWSIZE");
    sc_trace(mVcdFile, m_axi_W_ddr_AWBURST, "(port)m_axi_W_ddr_AWBURST");
    sc_trace(mVcdFile, m_axi_W_ddr_AWLOCK, "(port)m_axi_W_ddr_AWLOCK");
    sc_trace(mVcdFile, m_axi_W_ddr_AWCACHE, "(port)m_axi_W_ddr_AWCACHE");
    sc_trace(mVcdFile, m_axi_W_ddr_AWPROT, "(port)m_axi_W_ddr_AWPROT");
    sc_trace(mVcdFile, m_axi_W_ddr_AWQOS, "(port)m_axi_W_ddr_AWQOS");
    sc_trace(mVcdFile, m_axi_W_ddr_AWREGION, "(port)m_axi_W_ddr_AWREGION");
    sc_trace(mVcdFile, m_axi_W_ddr_AWUSER, "(port)m_axi_W_ddr_AWUSER");
    sc_trace(mVcdFile, m_axi_W_ddr_WVALID, "(port)m_axi_W_ddr_WVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_WREADY, "(port)m_axi_W_ddr_WREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_WDATA, "(port)m_axi_W_ddr_WDATA");
    sc_trace(mVcdFile, m_axi_W_ddr_WSTRB, "(port)m_axi_W_ddr_WSTRB");
    sc_trace(mVcdFile, m_axi_W_ddr_WLAST, "(port)m_axi_W_ddr_WLAST");
    sc_trace(mVcdFile, m_axi_W_ddr_WID, "(port)m_axi_W_ddr_WID");
    sc_trace(mVcdFile, m_axi_W_ddr_WUSER, "(port)m_axi_W_ddr_WUSER");
    sc_trace(mVcdFile, m_axi_W_ddr_ARVALID, "(port)m_axi_W_ddr_ARVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_ARREADY, "(port)m_axi_W_ddr_ARREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_ARADDR, "(port)m_axi_W_ddr_ARADDR");
    sc_trace(mVcdFile, m_axi_W_ddr_ARID, "(port)m_axi_W_ddr_ARID");
    sc_trace(mVcdFile, m_axi_W_ddr_ARLEN, "(port)m_axi_W_ddr_ARLEN");
    sc_trace(mVcdFile, m_axi_W_ddr_ARSIZE, "(port)m_axi_W_ddr_ARSIZE");
    sc_trace(mVcdFile, m_axi_W_ddr_ARBURST, "(port)m_axi_W_ddr_ARBURST");
    sc_trace(mVcdFile, m_axi_W_ddr_ARLOCK, "(port)m_axi_W_ddr_ARLOCK");
    sc_trace(mVcdFile, m_axi_W_ddr_ARCACHE, "(port)m_axi_W_ddr_ARCACHE");
    sc_trace(mVcdFile, m_axi_W_ddr_ARPROT, "(port)m_axi_W_ddr_ARPROT");
    sc_trace(mVcdFile, m_axi_W_ddr_ARQOS, "(port)m_axi_W_ddr_ARQOS");
    sc_trace(mVcdFile, m_axi_W_ddr_ARREGION, "(port)m_axi_W_ddr_ARREGION");
    sc_trace(mVcdFile, m_axi_W_ddr_ARUSER, "(port)m_axi_W_ddr_ARUSER");
    sc_trace(mVcdFile, m_axi_W_ddr_RVALID, "(port)m_axi_W_ddr_RVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_RREADY, "(port)m_axi_W_ddr_RREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_RDATA, "(port)m_axi_W_ddr_RDATA");
    sc_trace(mVcdFile, m_axi_W_ddr_RLAST, "(port)m_axi_W_ddr_RLAST");
    sc_trace(mVcdFile, m_axi_W_ddr_RID, "(port)m_axi_W_ddr_RID");
    sc_trace(mVcdFile, m_axi_W_ddr_RUSER, "(port)m_axi_W_ddr_RUSER");
    sc_trace(mVcdFile, m_axi_W_ddr_RRESP, "(port)m_axi_W_ddr_RRESP");
    sc_trace(mVcdFile, m_axi_W_ddr_BVALID, "(port)m_axi_W_ddr_BVALID");
    sc_trace(mVcdFile, m_axi_W_ddr_BREADY, "(port)m_axi_W_ddr_BREADY");
    sc_trace(mVcdFile, m_axi_W_ddr_BRESP, "(port)m_axi_W_ddr_BRESP");
    sc_trace(mVcdFile, m_axi_W_ddr_BID, "(port)m_axi_W_ddr_BID");
    sc_trace(mVcdFile, m_axi_W_ddr_BUSER, "(port)m_axi_W_ddr_BUSER");
    sc_trace(mVcdFile, W_ddr_offset, "(port)W_ddr_offset");
    sc_trace(mVcdFile, length_r, "(port)length_r");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, W_ddr_blk_n_AR, "W_ddr_blk_n_AR");
    sc_trace(mVcdFile, W_ddr_blk_n_R, "W_ddr_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln274_reg_148, "icmp_ln274_reg_148");
    sc_trace(mVcdFile, p_0_rec_reg_93, "p_0_rec_reg_93");
    sc_trace(mVcdFile, p_0_rec_reg_93_pp0_iter1_reg, "p_0_rec_reg_93_pp0_iter1_reg");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter0, "ap_block_state8_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter1, "ap_block_state9_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter2, "ap_block_state10_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln274_fu_120_p2, "icmp_ln274_fu_120_p2");
    sc_trace(mVcdFile, icmp_ln274_reg_148_pp0_iter1_reg, "icmp_ln274_reg_148_pp0_iter1_reg");
    sc_trace(mVcdFile, i_fu_125_p2, "i_fu_125_p2");
    sc_trace(mVcdFile, i_reg_152, "i_reg_152");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, W_ddr_addr_read_reg_157, "W_ddr_addr_read_reg_157");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state8, "ap_condition_pp0_exit_iter0_state8");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_phi_mux_p_0_rec_phi_fu_97_p4, "ap_phi_mux_p_0_rec_phi_fu_97_p4");
    sc_trace(mVcdFile, p_0_rec_cast_fu_131_p1, "p_0_rec_cast_fu_131_p1");
    sc_trace(mVcdFile, zext_ln273_fu_105_p1, "zext_ln273_fu_105_p1");
    sc_trace(mVcdFile, i_0_cast_fu_116_p1, "i_0_cast_fu_116_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Read_W_buf::~Read_W_buf() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Read_W_buf::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state8.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state8.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state8.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln274_reg_148.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_0_rec_reg_93 = i_reg_152.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_0_rec_reg_93 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln274_reg_148.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        W_ddr_addr_read_reg_157 = m_axi_W_ddr_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        i_reg_152 = i_fu_125_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln274_reg_148 = icmp_ln274_fu_120_p2.read();
        icmp_ln274_reg_148_pp0_iter1_reg = icmp_ln274_reg_148.read();
        p_0_rec_reg_93_pp0_iter1_reg = p_0_rec_reg_93.read();
    }
}

void Read_W_buf::thread_W_address0() {
    W_address0 =  (sc_lv<9>) (p_0_rec_cast_fu_131_p1.read());
}

void Read_W_buf::thread_W_ce0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        W_ce0 = ap_const_logic_1;
    } else {
        W_ce0 = ap_const_logic_0;
    }
}

void Read_W_buf::thread_W_d0() {
    W_d0 = W_ddr_addr_read_reg_157.read();
}

void Read_W_buf::thread_W_ddr_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        W_ddr_blk_n_AR = m_axi_W_ddr_ARREADY.read();
    } else {
        W_ddr_blk_n_AR = ap_const_logic_1;
    }
}

void Read_W_buf::thread_W_ddr_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln274_reg_148.read(), ap_const_lv1_1))) {
        W_ddr_blk_n_R = m_axi_W_ddr_RVALID.read();
    } else {
        W_ddr_blk_n_R = ap_const_logic_1;
    }
}

void Read_W_buf::thread_W_we0() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln274_reg_148_pp0_iter1_reg.read()))) {
        W_we0 = ap_const_logic_1;
    } else {
        W_we0 = ap_const_logic_0;
    }
}

void Read_W_buf::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[7];
}

void Read_W_buf::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Read_W_buf::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[8];
}

void Read_W_buf::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Read_W_buf::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Read_W_buf::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln274_reg_148.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_W_ddr_RVALID.read()));
}

void Read_W_buf::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln274_reg_148.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_W_ddr_RVALID.read()));
}

void Read_W_buf::thread_ap_block_state10_pp0_stage0_iter2() {
    ap_block_state10_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Read_W_buf::thread_ap_block_state8_pp0_stage0_iter0() {
    ap_block_state8_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Read_W_buf::thread_ap_block_state9_pp0_stage0_iter1() {
    ap_block_state9_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln274_reg_148.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_W_ddr_RVALID.read()));
}

void Read_W_buf::thread_ap_condition_pp0_exit_iter0_state8() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln274_fu_120_p2.read())) {
        ap_condition_pp0_exit_iter0_state8 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state8 = ap_const_logic_0;
    }
}

void Read_W_buf::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Read_W_buf::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Read_W_buf::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Read_W_buf::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Read_W_buf::thread_ap_phi_mux_p_0_rec_phi_fu_97_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln274_reg_148.read(), ap_const_lv1_1))) {
        ap_phi_mux_p_0_rec_phi_fu_97_p4 = i_reg_152.read();
    } else {
        ap_phi_mux_p_0_rec_phi_fu_97_p4 = p_0_rec_reg_93.read();
    }
}

void Read_W_buf::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Read_W_buf::thread_i_0_cast_fu_116_p1() {
    i_0_cast_fu_116_p1 = esl_zext<32,31>(ap_phi_mux_p_0_rec_phi_fu_97_p4.read());
}

void Read_W_buf::thread_i_fu_125_p2() {
    i_fu_125_p2 = (!ap_phi_mux_p_0_rec_phi_fu_97_p4.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ap_phi_mux_p_0_rec_phi_fu_97_p4.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void Read_W_buf::thread_icmp_ln274_fu_120_p2() {
    icmp_ln274_fu_120_p2 = (!i_0_cast_fu_116_p1.read().is_01() || !length_r.read().is_01())? sc_lv<1>(): (sc_bigint<32>(i_0_cast_fu_116_p1.read()) < sc_bigint<32>(length_r.read()));
}

void Read_W_buf::thread_m_axi_W_ddr_ARADDR() {
    m_axi_W_ddr_ARADDR =  (sc_lv<32>) (zext_ln273_fu_105_p1.read());
}

void Read_W_buf::thread_m_axi_W_ddr_ARBURST() {
    m_axi_W_ddr_ARBURST = ap_const_lv2_0;
}

void Read_W_buf::thread_m_axi_W_ddr_ARCACHE() {
    m_axi_W_ddr_ARCACHE = ap_const_lv4_0;
}

void Read_W_buf::thread_m_axi_W_ddr_ARID() {
    m_axi_W_ddr_ARID = ap_const_lv1_0;
}

void Read_W_buf::thread_m_axi_W_ddr_ARLEN() {
    m_axi_W_ddr_ARLEN = length_r.read();
}

void Read_W_buf::thread_m_axi_W_ddr_ARLOCK() {
    m_axi_W_ddr_ARLOCK = ap_const_lv2_0;
}

void Read_W_buf::thread_m_axi_W_ddr_ARPROT() {
    m_axi_W_ddr_ARPROT = ap_const_lv3_0;
}

void Read_W_buf::thread_m_axi_W_ddr_ARQOS() {
    m_axi_W_ddr_ARQOS = ap_const_lv4_0;
}

void Read_W_buf::thread_m_axi_W_ddr_ARREGION() {
    m_axi_W_ddr_ARREGION = ap_const_lv4_0;
}

void Read_W_buf::thread_m_axi_W_ddr_ARSIZE() {
    m_axi_W_ddr_ARSIZE = ap_const_lv3_0;
}

void Read_W_buf::thread_m_axi_W_ddr_ARUSER() {
    m_axi_W_ddr_ARUSER = ap_const_lv1_0;
}

void Read_W_buf::thread_m_axi_W_ddr_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_W_ddr_ARREADY.read())))) {
        m_axi_W_ddr_ARVALID = ap_const_logic_1;
    } else {
        m_axi_W_ddr_ARVALID = ap_const_logic_0;
    }
}

void Read_W_buf::thread_m_axi_W_ddr_AWADDR() {
    m_axi_W_ddr_AWADDR = ap_const_lv32_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWBURST() {
    m_axi_W_ddr_AWBURST = ap_const_lv2_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWCACHE() {
    m_axi_W_ddr_AWCACHE = ap_const_lv4_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWID() {
    m_axi_W_ddr_AWID = ap_const_lv1_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWLEN() {
    m_axi_W_ddr_AWLEN = ap_const_lv32_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWLOCK() {
    m_axi_W_ddr_AWLOCK = ap_const_lv2_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWPROT() {
    m_axi_W_ddr_AWPROT = ap_const_lv3_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWQOS() {
    m_axi_W_ddr_AWQOS = ap_const_lv4_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWREGION() {
    m_axi_W_ddr_AWREGION = ap_const_lv4_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWSIZE() {
    m_axi_W_ddr_AWSIZE = ap_const_lv3_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWUSER() {
    m_axi_W_ddr_AWUSER = ap_const_lv1_0;
}

void Read_W_buf::thread_m_axi_W_ddr_AWVALID() {
    m_axi_W_ddr_AWVALID = ap_const_logic_0;
}

void Read_W_buf::thread_m_axi_W_ddr_BREADY() {
    m_axi_W_ddr_BREADY = ap_const_logic_0;
}

void Read_W_buf::thread_m_axi_W_ddr_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln274_reg_148.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_W_ddr_RREADY = ap_const_logic_1;
    } else {
        m_axi_W_ddr_RREADY = ap_const_logic_0;
    }
}

void Read_W_buf::thread_m_axi_W_ddr_WDATA() {
    m_axi_W_ddr_WDATA = ap_const_lv32_0;
}

void Read_W_buf::thread_m_axi_W_ddr_WID() {
    m_axi_W_ddr_WID = ap_const_lv1_0;
}

void Read_W_buf::thread_m_axi_W_ddr_WLAST() {
    m_axi_W_ddr_WLAST = ap_const_logic_0;
}

void Read_W_buf::thread_m_axi_W_ddr_WSTRB() {
    m_axi_W_ddr_WSTRB = ap_const_lv4_0;
}

void Read_W_buf::thread_m_axi_W_ddr_WUSER() {
    m_axi_W_ddr_WUSER = ap_const_lv1_0;
}

void Read_W_buf::thread_m_axi_W_ddr_WVALID() {
    m_axi_W_ddr_WVALID = ap_const_logic_0;
}

void Read_W_buf::thread_p_0_rec_cast_fu_131_p1() {
    p_0_rec_cast_fu_131_p1 = esl_zext<64,31>(p_0_rec_reg_93_pp0_iter1_reg.read());
}

void Read_W_buf::thread_zext_ln273_fu_105_p1() {
    zext_ln273_fu_105_p1 = esl_zext<64,30>(W_ddr_offset.read());
}

void Read_W_buf::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, m_axi_W_ddr_ARREADY.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 128 : 
            if ((!(esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln274_fu_120_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln274_fu_120_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

}

