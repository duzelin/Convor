-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Load_W_ALL is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    cho_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cho_empty_n : IN STD_LOGIC;
    cho_read : OUT STD_LOGIC;
    W_buf_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_buf_ce0 : OUT STD_LOGIC;
    W_buf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_buf_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    W_buf_ce1 : OUT STD_LOGIC;
    W_buf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_0_V_full_n : IN STD_LOGIC;
    W_next_0_0_V_write : OUT STD_LOGIC;
    W_next_0_1_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_1_V_full_n : IN STD_LOGIC;
    W_next_0_1_V_write : OUT STD_LOGIC;
    W_next_0_2_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_2_V_full_n : IN STD_LOGIC;
    W_next_0_2_V_write : OUT STD_LOGIC;
    W_next_0_3_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    W_next_0_3_V_full_n : IN STD_LOGIC;
    W_next_0_3_V_write : OUT STD_LOGIC;
    p_c_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_c_s_empty_n : IN STD_LOGIC;
    p_c_s_read : OUT STD_LOGIC;
    p_chin_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_chin_s_empty_n : IN STD_LOGIC;
    p_chin_s_read : OUT STD_LOGIC;
    p_k_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    p_k_s_empty_n : IN STD_LOGIC;
    p_k_s_read : OUT STD_LOGIC );
end;


architecture behav of Load_W_ALL is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal cho_blk_n : STD_LOGIC;
    signal W_next_0_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln69_reg_744 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_744_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal W_next_0_1_V_blk_n : STD_LOGIC;
    signal W_next_0_2_V_blk_n : STD_LOGIC;
    signal W_next_0_3_V_blk_n : STD_LOGIC;
    signal p_c_s_blk_n : STD_LOGIC;
    signal p_chin_s_blk_n : STD_LOGIC;
    signal p_k_s_blk_n : STD_LOGIC;
    signal indvar_flatten58_reg_177 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten21_reg_189 : STD_LOGIC_VECTOR (95 downto 0);
    signal chi_0_i_i_reg_200 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_reg_211 : STD_LOGIC_VECTOR (63 downto 0);
    signal kc_0_i_i_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal kr_0_i_i_reg_233 : STD_LOGIC_VECTOR (30 downto 0);
    signal cho_read_reg_648 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_c_read_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_chin_read_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_k_read_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln78_1_fu_244_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_1_reg_685 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_fu_262_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_reg_691 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln78_2_fu_286_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_2_reg_696 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_3_fu_306_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_3_reg_701 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_4_fu_326_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_4_reg_706 : STD_LOGIC_VECTOR (9 downto 0);
    signal bound_fu_333_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_711 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_fu_346_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_reg_717 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound26_fu_358_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound26_reg_723 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln75_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_728 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_734 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln78_5_fu_388_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_5_reg_739 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln69_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_748 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_fu_402_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln71_reg_754 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln71_3_fu_427_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_3_reg_759 : STD_LOGIC_VECTOR (0 downto 0);
    signal chi_fu_434_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal chi_reg_765 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln71_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln71_reg_770 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln78_13_fu_450_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_13_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln71_7_fu_455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln71_7_reg_782 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln73_fu_474_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln73_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln78_9_fu_482_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln78_9_reg_793 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln73_1_fu_486_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln73_1_reg_798 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln71_1_fu_492_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln71_1_reg_803 : STD_LOGIC_VECTOR (95 downto 0);
    signal add_ln69_fu_507_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal add_ln69_reg_808 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln71_8_fu_548_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln71_8_reg_813 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln73_2_fu_575_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln73_2_reg_818 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln78_4_fu_587_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_4_reg_823 : STD_LOGIC_VECTOR (9 downto 0);
    signal kc_fu_613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal kc_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln73_3_fu_618_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln73_3_reg_844 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln71_9_fu_624_p3 : STD_LOGIC_VECTOR (95 downto 0);
    signal select_ln71_9_reg_849 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_73_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten58_phi_fu_181_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten21_phi_fu_193_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_phi_mux_chi_0_i_i_phi_fu_204_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_215_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_kc_0_i_i_phi_fu_226_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_kr_0_i_i_phi_fu_237_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln78_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln78_1_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln78_2_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln78_3_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal trunc_ln78_1_fu_244_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_1_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_2_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln78_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_4_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_3_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_5_fu_280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln78_1_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_6_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_7_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln78_2_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_8_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_9_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cast_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_346_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound4_fu_346_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound26_fu_358_p0 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound26_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_10_fu_378_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln78_10_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_11_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln75_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_1_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln78_13_fu_450_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln71_2_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_1_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln78_6_fu_498_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_14_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln78_7_fu_530_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln71_1_fu_513_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_12_fu_502_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln71_4_fu_519_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal kr_fu_553_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln78_8_fu_559_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln78_15_fu_563_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln71_6_fu_541_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln73_1_fu_568_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln71_5_fu_534_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_3_fu_582_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_5_fu_593_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_6_fu_603_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_7_fu_630_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_8_fu_639_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound26_fu_358_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound26_fu_358_p10 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound4_fu_346_p00 : STD_LOGIC_VECTOR (95 downto 0);
    signal bound4_fu_346_p10 : STD_LOGIC_VECTOR (95 downto 0);
    signal mul_ln78_10_fu_378_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln78_13_fu_450_p00 : STD_LOGIC_VECTOR (31 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    chi_0_i_i_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
                chi_0_i_i_reg_200 <= select_ln71_8_reg_813;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                chi_0_i_i_reg_200 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
                indvar_flatten21_reg_189 <= select_ln71_9_reg_849;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten21_reg_189 <= ap_const_lv96_0;
            end if; 
        end if;
    end process;

    indvar_flatten58_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
                indvar_flatten58_reg_177 <= add_ln69_reg_808;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten58_reg_177 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
                indvar_flatten_reg_211 <= select_ln73_3_reg_844;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_211 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    kc_0_i_i_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
                kc_0_i_i_reg_222 <= kc_reg_839;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                kc_0_i_i_reg_222 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    kr_0_i_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
                kr_0_i_i_reg_233 <= select_ln73_2_reg_818;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                kr_0_i_i_reg_233 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln69_reg_808 <= add_ln69_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_fu_392_p2 = ap_const_lv1_0))) then
                add_ln71_1_reg_803 <= add_ln71_1_fu_492_p2;
                add_ln73_1_reg_798 <= add_ln73_1_fu_486_p2;
                chi_reg_765 <= chi_fu_434_p2;
                icmp_ln71_reg_748 <= icmp_ln71_fu_397_p2;
                mul_ln78_13_reg_777 <= mul_ln78_13_fu_450_p2;
                or_ln71_reg_770 <= or_ln71_fu_444_p2;
                select_ln71_3_reg_759 <= select_ln71_3_fu_427_p3;
                select_ln71_7_reg_782 <= select_ln71_7_fu_455_p3;
                select_ln71_reg_754 <= select_ln71_fu_402_p3;
                select_ln73_reg_788 <= select_ln73_fu_474_p3;
                trunc_ln78_9_reg_793 <= trunc_ln78_9_fu_482_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then
                add_ln78_4_reg_823 <= add_ln78_4_fu_587_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound26_reg_723 <= bound26_fu_358_p2;
                icmp_ln73_reg_734 <= icmp_ln73_fu_369_p2;
                icmp_ln75_reg_728 <= icmp_ln75_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound4_reg_717 <= bound4_fu_346_p2;
                bound_reg_711 <= bound_fu_333_p2;
                trunc_ln78_2_reg_696 <= trunc_ln78_2_fu_286_p1;
                trunc_ln78_3_reg_701 <= trunc_ln78_3_fu_306_p1;
                trunc_ln78_4_reg_706 <= trunc_ln78_4_fu_326_p1;
                trunc_ln78_reg_691 <= trunc_ln78_fu_262_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                cho_read_reg_648 <= cho_dout;
                p_c_read_reg_656 <= p_c_s_dout;
                p_chin_read_reg_661 <= p_chin_s_dout;
                p_k_read_reg_668 <= p_k_s_dout;
                trunc_ln78_1_reg_685 <= trunc_ln78_1_fu_244_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln69_reg_744 <= icmp_ln69_fu_392_p2;
                icmp_ln69_reg_744_pp0_iter1_reg <= icmp_ln69_reg_744;
                trunc_ln78_5_reg_739 <= trunc_ln78_5_fu_388_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then
                kc_reg_839 <= kc_fu_613_p2;
                select_ln71_8_reg_813 <= select_ln71_8_fu_548_p3;
                select_ln71_9_reg_849 <= select_ln71_9_fu_624_p3;
                select_ln73_2_reg_818 <= select_ln73_2_fu_575_p3;
                select_ln73_3_reg_844 <= select_ln73_3_fu_618_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then
                tmp_73_reg_859 <= W_buf_q1;
                tmp_reg_854 <= W_buf_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n, icmp_ln69_reg_744, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_744 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln69_reg_744 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    W_buf_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, sext_ln78_fu_598_p1, sext_ln78_2_fu_634_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_address0 <= sext_ln78_2_fu_634_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            W_buf_address0 <= sext_ln78_fu_598_p1(9 - 1 downto 0);
        else 
            W_buf_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    W_buf_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, sext_ln78_1_fu_608_p1, sext_ln78_3_fu_643_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_buf_address1 <= sext_ln78_3_fu_643_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            W_buf_address1 <= sext_ln78_1_fu_608_p1(9 - 1 downto 0);
        else 
            W_buf_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    W_buf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            W_buf_ce0 <= ap_const_logic_1;
        else 
            W_buf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_buf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            W_buf_ce1 <= ap_const_logic_1;
        else 
            W_buf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_next_0_0_V_blk_n_assign_proc : process(W_next_0_0_V_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln69_reg_744_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
            W_next_0_0_V_blk_n <= W_next_0_0_V_full_n;
        else 
            W_next_0_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    W_next_0_0_V_din <= tmp_reg_854;

    W_next_0_0_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln69_reg_744_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
            W_next_0_0_V_write <= ap_const_logic_1;
        else 
            W_next_0_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    W_next_0_1_V_blk_n_assign_proc : process(W_next_0_1_V_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln69_reg_744_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
            W_next_0_1_V_blk_n <= W_next_0_1_V_full_n;
        else 
            W_next_0_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    W_next_0_1_V_din <= tmp_73_reg_859;

    W_next_0_1_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln69_reg_744_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
            W_next_0_1_V_write <= ap_const_logic_1;
        else 
            W_next_0_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    W_next_0_2_V_blk_n_assign_proc : process(W_next_0_2_V_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln69_reg_744_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
            W_next_0_2_V_blk_n <= W_next_0_2_V_full_n;
        else 
            W_next_0_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    W_next_0_2_V_din <= W_buf_q0;

    W_next_0_2_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln69_reg_744_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
            W_next_0_2_V_write <= ap_const_logic_1;
        else 
            W_next_0_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    W_next_0_3_V_blk_n_assign_proc : process(W_next_0_3_V_full_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln69_reg_744_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
            W_next_0_3_V_blk_n <= W_next_0_3_V_full_n;
        else 
            W_next_0_3_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    W_next_0_3_V_din <= W_buf_q1;

    W_next_0_3_V_write_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, icmp_ln69_reg_744_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
            W_next_0_3_V_write <= ap_const_logic_1;
        else 
            W_next_0_3_V_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln69_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv128_lc_2) + unsigned(indvar_flatten58_reg_177));
    add_ln71_1_fu_492_p2 <= std_logic_vector(unsigned(ap_const_lv96_1) + unsigned(ap_phi_mux_indvar_flatten21_phi_fu_193_p4));
    add_ln73_1_fu_486_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_215_p4));
    add_ln78_1_fu_290_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(cho_read_reg_648));
    add_ln78_2_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv32_3) + unsigned(cho_read_reg_648));
    add_ln78_3_fu_582_p2 <= std_logic_vector(unsigned(select_ln73_1_fu_568_p3) + unsigned(trunc_ln78_9_reg_793));
    add_ln78_4_fu_587_p2 <= std_logic_vector(unsigned(select_ln71_5_fu_534_p3) + unsigned(add_ln78_3_fu_582_p2));
    add_ln78_5_fu_593_p2 <= std_logic_vector(unsigned(trunc_ln78_reg_691) + unsigned(add_ln78_4_fu_587_p2));
    add_ln78_6_fu_603_p2 <= std_logic_vector(unsigned(trunc_ln78_2_reg_696) + unsigned(add_ln78_4_fu_587_p2));
    add_ln78_7_fu_630_p2 <= std_logic_vector(unsigned(trunc_ln78_3_reg_701) + unsigned(add_ln78_4_reg_823));
    add_ln78_8_fu_639_p2 <= std_logic_vector(unsigned(trunc_ln78_4_reg_706) + unsigned(add_ln78_4_reg_823));
    add_ln78_fu_266_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(cho_read_reg_648));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln69_reg_744_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = W_next_0_3_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_2_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_1_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_0_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln69_reg_744_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = W_next_0_3_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_2_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_1_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_0_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, ap_enable_reg_pp0_iter1, icmp_ln69_reg_744_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_const_logic_0 = W_next_0_3_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_2_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_1_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_0_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
                ap_block_state1 <= ((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage1_iter1_assign_proc : process(W_next_0_0_V_full_n, W_next_0_1_V_full_n, W_next_0_2_V_full_n, W_next_0_3_V_full_n, icmp_ln69_reg_744_pp0_iter1_reg)
    begin
                ap_block_state7_pp0_stage1_iter1 <= (((ap_const_logic_0 = W_next_0_3_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_2_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_1_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_0 = W_next_0_0_V_full_n) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln69_reg_744)
    begin
        if ((icmp_ln69_reg_744 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_chi_0_i_i_phi_fu_204_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln69_reg_744, chi_0_i_i_reg_200, ap_CS_fsm_pp0_stage0, select_ln71_8_reg_813, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
            ap_phi_mux_chi_0_i_i_phi_fu_204_p4 <= select_ln71_8_reg_813;
        else 
            ap_phi_mux_chi_0_i_i_phi_fu_204_p4 <= chi_0_i_i_reg_200;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten21_phi_fu_193_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln69_reg_744, indvar_flatten21_reg_189, ap_CS_fsm_pp0_stage0, select_ln71_9_reg_849, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten21_phi_fu_193_p4 <= select_ln71_9_reg_849;
        else 
            ap_phi_mux_indvar_flatten21_phi_fu_193_p4 <= indvar_flatten21_reg_189;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten58_phi_fu_181_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln69_reg_744, indvar_flatten58_reg_177, ap_CS_fsm_pp0_stage0, add_ln69_reg_808, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten58_phi_fu_181_p4 <= add_ln69_reg_808;
        else 
            ap_phi_mux_indvar_flatten58_phi_fu_181_p4 <= indvar_flatten58_reg_177;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_215_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln69_reg_744, indvar_flatten_reg_211, ap_CS_fsm_pp0_stage0, select_ln73_3_reg_844, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_215_p4 <= select_ln73_3_reg_844;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_215_p4 <= indvar_flatten_reg_211;
        end if; 
    end process;


    ap_phi_mux_kc_0_i_i_phi_fu_226_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln69_reg_744, kc_0_i_i_reg_222, ap_CS_fsm_pp0_stage0, kc_reg_839, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln69_reg_744 = ap_const_lv1_0))) then 
            ap_phi_mux_kc_0_i_i_phi_fu_226_p4 <= kc_reg_839;
        else 
            ap_phi_mux_kc_0_i_i_phi_fu_226_p4 <= kc_0_i_i_reg_222;
        end if; 
    end process;


    ap_phi_mux_kr_0_i_i_phi_fu_237_p4_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, icmp_ln69_reg_744_pp0_iter1_reg, kr_0_i_i_reg_233, select_ln73_2_reg_818)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln69_reg_744_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_kr_0_i_i_phi_fu_237_p4 <= select_ln73_2_reg_818;
        else 
            ap_phi_mux_kr_0_i_i_phi_fu_237_p4 <= kr_0_i_i_reg_233;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    bound26_fu_358_p0 <= bound26_fu_358_p00(96 - 1 downto 0);
    bound26_fu_358_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_reg_717),128));
    bound26_fu_358_p1 <= bound26_fu_358_p10(32 - 1 downto 0);
    bound26_fu_358_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_c_read_reg_656),128));
    bound26_fu_358_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound26_fu_358_p0) * unsigned(bound26_fu_358_p1), 128));
    bound4_fu_346_p0 <= bound4_fu_346_p00(64 - 1 downto 0);
    bound4_fu_346_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_333_p2),96));
    bound4_fu_346_p1 <= bound4_fu_346_p10(32 - 1 downto 0);
    bound4_fu_346_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_chin_read_reg_661),96));
    bound4_fu_346_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_fu_346_p0) * unsigned(bound4_fu_346_p1), 96));
    bound_fu_333_p0 <= cast_fu_330_p1(32 - 1 downto 0);
    bound_fu_333_p1 <= cast_fu_330_p1(32 - 1 downto 0);
    bound_fu_333_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_333_p0) * unsigned(bound_fu_333_p1), 64));
    cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_k_read_reg_668),64));
    chi_fu_434_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(select_ln71_fu_402_p3));

    cho_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cho_blk_n <= cho_empty_n;
        else 
            cho_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cho_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
        if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cho_read <= ap_const_logic_1;
        else 
            cho_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln69_fu_392_p2 <= "1" when (ap_phi_mux_indvar_flatten58_phi_fu_181_p4 = bound26_reg_723) else "0";
    icmp_ln71_fu_397_p2 <= "1" when (ap_phi_mux_indvar_flatten21_phi_fu_193_p4 = bound4_reg_717) else "0";
    icmp_ln73_1_fu_422_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_215_p4 = bound_reg_711) else "0";
    icmp_ln73_fu_369_p2 <= "1" when (bound_reg_711 = ap_const_lv64_0) else "0";
    icmp_ln75_1_fu_410_p2 <= "1" when (ap_phi_mux_kc_0_i_i_phi_fu_226_p4 = p_k_read_reg_668) else "0";
    icmp_ln75_fu_364_p2 <= "1" when (p_k_read_reg_668 = ap_const_lv32_0) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    kc_fu_613_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(select_ln73_reg_788));
    kr_fu_553_p2 <= std_logic_vector(unsigned(ap_const_lv31_1) + unsigned(select_ln71_4_fu_519_p3));
    mul_ln78_10_fu_378_p1 <= mul_ln78_10_fu_378_p10(31 - 1 downto 0);
    mul_ln78_10_fu_378_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_chi_0_i_i_phi_fu_204_p4),32));
    mul_ln78_10_fu_378_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_k_read_reg_668) * signed('0' &mul_ln78_10_fu_378_p1))), 32));
    mul_ln78_11_fu_383_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln78_10_fu_378_p2) * signed(p_k_read_reg_668))), 32));
    mul_ln78_12_fu_502_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln78_6_fu_498_p1) * signed(trunc_ln78_1_reg_685))), 10));
    mul_ln78_13_fu_450_p0 <= mul_ln78_13_fu_450_p00(31 - 1 downto 0);
    mul_ln78_13_fu_450_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(chi_fu_434_p2),32));
    mul_ln78_13_fu_450_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &mul_ln78_13_fu_450_p0) * signed(p_k_read_reg_668))), 32));
    mul_ln78_14_fu_526_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_k_read_reg_668) * signed(mul_ln78_13_reg_777))), 32));
    mul_ln78_15_fu_563_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(trunc_ln78_1_reg_685) * signed(trunc_ln78_8_fu_559_p1))), 10));
    mul_ln78_1_fu_252_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_k_read_reg_668) * signed(p_k_read_reg_668))), 32));
    mul_ln78_2_fu_256_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln78_1_fu_252_p2) * signed(mul_ln78_fu_248_p2))), 32));
    mul_ln78_3_fu_271_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_chin_read_reg_661) * signed(p_k_read_reg_668))), 32));
    mul_ln78_4_fu_275_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_k_read_reg_668) * signed(add_ln78_fu_266_p2))), 32));
    mul_ln78_5_fu_280_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln78_4_fu_275_p2) * signed(mul_ln78_3_fu_271_p2))), 32));
    mul_ln78_6_fu_295_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_k_read_reg_668) * signed(add_ln78_1_fu_290_p2))), 32));
    mul_ln78_7_fu_300_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln78_6_fu_295_p2) * signed(mul_ln78_3_fu_271_p2))), 32));
    mul_ln78_8_fu_315_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(p_k_read_reg_668) * signed(add_ln78_2_fu_310_p2))), 32));
    mul_ln78_9_fu_320_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln78_8_fu_315_p2) * signed(mul_ln78_3_fu_271_p2))), 32));
    mul_ln78_fu_248_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(cho_read_reg_648) * signed(p_chin_read_reg_661))), 32));
    or_ln71_fu_444_p2 <= (select_ln71_3_fu_427_p3 or icmp_ln71_fu_397_p2);
    or_ln73_1_fu_468_p2 <= (or_ln73_fu_462_p2 or icmp_ln71_fu_397_p2);
    or_ln73_fu_462_p2 <= (select_ln71_7_fu_455_p3 or select_ln71_3_fu_427_p3);

    p_c_s_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_c_s_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_c_s_blk_n <= p_c_s_empty_n;
        else 
            p_c_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_c_s_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
        if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_c_s_read <= ap_const_logic_1;
        else 
            p_c_s_read <= ap_const_logic_0;
        end if; 
    end process;


    p_chin_s_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_chin_s_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_chin_s_blk_n <= p_chin_s_empty_n;
        else 
            p_chin_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_chin_s_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
        if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_chin_s_read <= ap_const_logic_1;
        else 
            p_chin_s_read <= ap_const_logic_0;
        end if; 
    end process;


    p_k_s_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, p_k_s_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_s_blk_n <= p_k_s_empty_n;
        else 
            p_k_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_k_s_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, cho_empty_n, p_c_s_empty_n, p_chin_s_empty_n, p_k_s_empty_n)
    begin
        if ((not(((p_k_s_empty_n = ap_const_logic_0) or (p_chin_s_empty_n = ap_const_logic_0) or (p_c_s_empty_n = ap_const_logic_0) or (cho_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_k_s_read <= ap_const_logic_1;
        else 
            p_k_s_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln71_1_fu_513_p3 <= 
        ap_const_lv10_0 when (icmp_ln71_reg_748(0) = '1') else 
        trunc_ln78_5_reg_739;
    select_ln71_2_fu_415_p3 <= 
        icmp_ln75_reg_728 when (icmp_ln71_fu_397_p2(0) = '1') else 
        icmp_ln75_1_fu_410_p2;
    select_ln71_3_fu_427_p3 <= 
        icmp_ln73_reg_734 when (icmp_ln71_fu_397_p2(0) = '1') else 
        icmp_ln73_1_fu_422_p2;
    select_ln71_4_fu_519_p3 <= 
        ap_const_lv31_0 when (or_ln71_reg_770(0) = '1') else 
        ap_phi_mux_kr_0_i_i_phi_fu_237_p4;
    select_ln71_5_fu_534_p3 <= 
        trunc_ln78_7_fu_530_p1 when (select_ln71_3_reg_759(0) = '1') else 
        select_ln71_1_fu_513_p3;
    select_ln71_6_fu_541_p3 <= 
        ap_const_lv10_0 when (or_ln71_reg_770(0) = '1') else 
        mul_ln78_12_fu_502_p2;
    select_ln71_7_fu_455_p3 <= 
        icmp_ln75_reg_728 when (select_ln71_3_fu_427_p3(0) = '1') else 
        select_ln71_2_fu_415_p3;
    select_ln71_8_fu_548_p3 <= 
        chi_reg_765 when (select_ln71_3_reg_759(0) = '1') else 
        select_ln71_reg_754;
    select_ln71_9_fu_624_p3 <= 
        ap_const_lv96_1 when (icmp_ln71_reg_748(0) = '1') else 
        add_ln71_1_reg_803;
    select_ln71_fu_402_p3 <= 
        ap_const_lv31_0 when (icmp_ln71_fu_397_p2(0) = '1') else 
        ap_phi_mux_chi_0_i_i_phi_fu_204_p4;
    select_ln73_1_fu_568_p3 <= 
        mul_ln78_15_fu_563_p2 when (select_ln71_7_reg_782(0) = '1') else 
        select_ln71_6_fu_541_p3;
    select_ln73_2_fu_575_p3 <= 
        kr_fu_553_p2 when (select_ln71_7_reg_782(0) = '1') else 
        select_ln71_4_fu_519_p3;
    select_ln73_3_fu_618_p3 <= 
        ap_const_lv64_1 when (or_ln71_reg_770(0) = '1') else 
        add_ln73_1_reg_798;
    select_ln73_fu_474_p3 <= 
        ap_const_lv32_0 when (or_ln73_1_fu_468_p2(0) = '1') else 
        ap_phi_mux_kc_0_i_i_phi_fu_226_p4;
        sext_ln78_1_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln78_6_fu_603_p2),64));

        sext_ln78_2_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln78_7_fu_630_p2),64));

        sext_ln78_3_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln78_8_fu_639_p2),64));

        sext_ln78_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln78_5_fu_593_p2),64));

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln78_1_fu_244_p0 <= p_k_s_dout;
    trunc_ln78_1_fu_244_p1 <= trunc_ln78_1_fu_244_p0(10 - 1 downto 0);
    trunc_ln78_2_fu_286_p1 <= mul_ln78_5_fu_280_p2(10 - 1 downto 0);
    trunc_ln78_3_fu_306_p1 <= mul_ln78_7_fu_300_p2(10 - 1 downto 0);
    trunc_ln78_4_fu_326_p1 <= mul_ln78_9_fu_320_p2(10 - 1 downto 0);
    trunc_ln78_5_fu_388_p1 <= mul_ln78_11_fu_383_p2(10 - 1 downto 0);
    trunc_ln78_6_fu_498_p1 <= ap_phi_mux_kr_0_i_i_phi_fu_237_p4(10 - 1 downto 0);
    trunc_ln78_7_fu_530_p1 <= mul_ln78_14_fu_526_p2(10 - 1 downto 0);
    trunc_ln78_8_fu_559_p1 <= kr_fu_553_p2(10 - 1 downto 0);
    trunc_ln78_9_fu_482_p1 <= select_ln73_fu_474_p3(10 - 1 downto 0);
    trunc_ln78_fu_262_p1 <= mul_ln78_2_fu_256_p2(10 - 1 downto 0);
end behav;
